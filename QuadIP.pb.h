// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuadIP.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_QuadIP_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_QuadIP_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dtProto/Service.pb.h"
#include "dtProto/std_msgs/Header.pb.h"
#include "dtProto/std_msgs/Request.pb.h"
#include "dtProto/geometry_msgs/Point.pb.h"
#include "dtProto/geometry_msgs/Vector.pb.h"
#include "dtProto/geometry_msgs/Matrix.pb.h"
#include "dtProto/geometry_msgs/Pose.pb.h"
#include "dtProto/geometry_msgs/Twist.pb.h"
#include "dtProto/geometry_msgs/Orientation.pb.h"
#include "dtProto/sensor_msgs/JointState.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_QuadIP_2eproto
PROTOBUF_NAMESPACE_OPEN
    namespace internal {
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

    // Internal implementation detail -- do not use these members.
    struct TableStruct_QuadIP_2eproto {
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_QuadIP_2eproto;
namespace dtproto {
namespace quadip {
class ControlState;
struct ControlStateDefaultTypeInternal;
extern ControlStateDefaultTypeInternal _ControlState_default_instance_;
class ControlStateTimeStamped;
struct ControlStateTimeStampedDefaultTypeInternal;
extern ControlStateTimeStampedDefaultTypeInternal _ControlStateTimeStamped_default_instance_;
class CpgState;
struct CpgStateDefaultTypeInternal;
extern CpgStateDefaultTypeInternal _CpgState_default_instance_;
class CpgStateTimeStamped;
struct CpgStateTimeStampedDefaultTypeInternal;
extern CpgStateTimeStampedDefaultTypeInternal _CpgStateTimeStamped_default_instance_;
class JointState;
struct JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
class JointStateTimeStamped;
struct JointStateTimeStampedDefaultTypeInternal;
extern JointStateTimeStampedDefaultTypeInternal _JointStateTimeStamped_default_instance_;
class QuadIpState;
struct QuadIpStateDefaultTypeInternal;
extern QuadIpStateDefaultTypeInternal _QuadIpState_default_instance_;
class QuadIpStateTimeStamped;
struct QuadIpStateTimeStampedDefaultTypeInternal;
extern QuadIpStateTimeStampedDefaultTypeInternal _QuadIpStateTimeStamped_default_instance_;
}  // namespace quadip
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
    template<> ::dtproto::quadip::ControlState* Arena::CreateMaybeMessage<::dtproto::quadip::ControlState>(Arena*);
template<> ::dtproto::quadip::ControlStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::quadip::ControlStateTimeStamped>(Arena*);
template<> ::dtproto::quadip::CpgState* Arena::CreateMaybeMessage<::dtproto::quadip::CpgState>(Arena*);
template<> ::dtproto::quadip::CpgStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::quadip::CpgStateTimeStamped>(Arena*);
template<> ::dtproto::quadip::JointState* Arena::CreateMaybeMessage<::dtproto::quadip::JointState>(Arena*);
template<> ::dtproto::quadip::JointStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::quadip::JointStateTimeStamped>(Arena*);
template<> ::dtproto::quadip::QuadIpState* Arena::CreateMaybeMessage<::dtproto::quadip::QuadIpState>(Arena*);
template<> ::dtproto::quadip::QuadIpStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::quadip::QuadIpStateTimeStamped>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
    namespace dtproto {
    namespace quadip {

    // ===================================================================

    class JointState final :
                             public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.JointState) */ {
    public:
        inline JointState() : JointState(nullptr) {}
        ~JointState() override;
        explicit PROTOBUF_CONSTEXPR JointState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        JointState(const JointState& from);
        JointState(JointState&& from) noexcept
            : JointState() {
            *this = ::std::move(from);
        }

        inline JointState& operator=(const JointState& from) {
            CopyFrom(from);
            return *this;
        }
        inline JointState& operator=(JointState&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const JointState& default_instance() {
            return *internal_default_instance();
        }
        static inline const JointState* internal_default_instance() {
            return reinterpret_cast<const JointState*>(
                &_JointState_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(JointState& a, JointState& b) {
            a.Swap(&b);
        }
        inline void Swap(JointState* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(JointState* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<JointState>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const JointState& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const JointState& from) {
            JointState::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(JointState* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.JointState";
        }
    protected:
        explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kJointStateDesFieldNumber = 1,
            kJointStateActFieldNumber = 2,
            kAbsEncoderFieldNumber = 3,
            kIncEncoderFieldNumber = 4,
        };
        // repeated .dtproto.sensor_msgs.JointState joint_state_des = 1;
        int joint_state_des_size() const;
    private:
        int _internal_joint_state_des_size() const;
    public:
        void clear_joint_state_des();
        ::dtproto::sensor_msgs::JointState* mutable_joint_state_des(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >*
        mutable_joint_state_des();
    private:
        const ::dtproto::sensor_msgs::JointState& _internal_joint_state_des(int index) const;
        ::dtproto::sensor_msgs::JointState* _internal_add_joint_state_des();
    public:
        const ::dtproto::sensor_msgs::JointState& joint_state_des(int index) const;
        ::dtproto::sensor_msgs::JointState* add_joint_state_des();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >&
        joint_state_des() const;

        // repeated .dtproto.sensor_msgs.JointState joint_state_act = 2;
        int joint_state_act_size() const;
    private:
        int _internal_joint_state_act_size() const;
    public:
        void clear_joint_state_act();
        ::dtproto::sensor_msgs::JointState* mutable_joint_state_act(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >*
        mutable_joint_state_act();
    private:
        const ::dtproto::sensor_msgs::JointState& _internal_joint_state_act(int index) const;
        ::dtproto::sensor_msgs::JointState* _internal_add_joint_state_act();
    public:
        const ::dtproto::sensor_msgs::JointState& joint_state_act(int index) const;
        ::dtproto::sensor_msgs::JointState* add_joint_state_act();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >&
        joint_state_act() const;

        // repeated double abs_encoder = 3;
        int abs_encoder_size() const;
    private:
        int _internal_abs_encoder_size() const;
    public:
        void clear_abs_encoder();
    private:
        double _internal_abs_encoder(int index) const;
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
        _internal_abs_encoder() const;
        void _internal_add_abs_encoder(double value);
        ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
        _internal_mutable_abs_encoder();
    public:
        double abs_encoder(int index) const;
        void set_abs_encoder(int index, double value);
        void add_abs_encoder(double value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
        abs_encoder() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
        mutable_abs_encoder();

        // repeated double inc_encoder = 4;
        int inc_encoder_size() const;
    private:
        int _internal_inc_encoder_size() const;
    public:
        void clear_inc_encoder();
    private:
        double _internal_inc_encoder(int index) const;
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
        _internal_inc_encoder() const;
        void _internal_add_inc_encoder(double value);
        ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
        _internal_mutable_inc_encoder();
    public:
        double inc_encoder(int index) const;
        void set_inc_encoder(int index, double value);
        void add_inc_encoder(double value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
        inc_encoder() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
        mutable_inc_encoder();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.JointState)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState > joint_state_des_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState > joint_state_act_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > abs_encoder_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > inc_encoder_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class JointStateTimeStamped final :
                                        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.JointStateTimeStamped) */ {
    public:
        inline JointStateTimeStamped() : JointStateTimeStamped(nullptr) {}
        ~JointStateTimeStamped() override;
        explicit PROTOBUF_CONSTEXPR JointStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        JointStateTimeStamped(const JointStateTimeStamped& from);
        JointStateTimeStamped(JointStateTimeStamped&& from) noexcept
            : JointStateTimeStamped() {
            *this = ::std::move(from);
        }

        inline JointStateTimeStamped& operator=(const JointStateTimeStamped& from) {
            CopyFrom(from);
            return *this;
        }
        inline JointStateTimeStamped& operator=(JointStateTimeStamped&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const JointStateTimeStamped& default_instance() {
            return *internal_default_instance();
        }
        static inline const JointStateTimeStamped* internal_default_instance() {
            return reinterpret_cast<const JointStateTimeStamped*>(
                &_JointStateTimeStamped_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(JointStateTimeStamped& a, JointStateTimeStamped& b) {
            a.Swap(&b);
        }
        inline void Swap(JointStateTimeStamped* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(JointStateTimeStamped* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        JointStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<JointStateTimeStamped>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const JointStateTimeStamped& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const JointStateTimeStamped& from) {
            JointStateTimeStamped::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(JointStateTimeStamped* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.JointStateTimeStamped";
        }
    protected:
        explicit JointStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                       bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kHeaderFieldNumber = 1,
            kStateFieldNumber = 2,
        };
        // .dtproto.std_msgs.Header header = 1;
        bool has_header() const;
    private:
        bool _internal_has_header() const;
    public:
        void clear_header();
        const ::dtproto::std_msgs::Header& header() const;
        PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
        ::dtproto::std_msgs::Header* mutable_header();
        void set_allocated_header(::dtproto::std_msgs::Header* header);
    private:
        const ::dtproto::std_msgs::Header& _internal_header() const;
        ::dtproto::std_msgs::Header* _internal_mutable_header();
    public:
        void unsafe_arena_set_allocated_header(
            ::dtproto::std_msgs::Header* header);
        ::dtproto::std_msgs::Header* unsafe_arena_release_header();

        // .dtproto.quadip.JointState state = 2;
        bool has_state() const;
    private:
        bool _internal_has_state() const;
    public:
        void clear_state();
        const ::dtproto::quadip::JointState& state() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::JointState* release_state();
        ::dtproto::quadip::JointState* mutable_state();
        void set_allocated_state(::dtproto::quadip::JointState* state);
    private:
        const ::dtproto::quadip::JointState& _internal_state() const;
        ::dtproto::quadip::JointState* _internal_mutable_state();
    public:
        void unsafe_arena_set_allocated_state(
            ::dtproto::quadip::JointState* state);
        ::dtproto::quadip::JointState* unsafe_arena_release_state();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.JointStateTimeStamped)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::dtproto::std_msgs::Header* header_;
            ::dtproto::quadip::JointState* state_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class ControlState final :
                               public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.ControlState) */ {
    public:
        inline ControlState() : ControlState(nullptr) {}
        ~ControlState() override;
        explicit PROTOBUF_CONSTEXPR ControlState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ControlState(const ControlState& from);
        ControlState(ControlState&& from) noexcept
            : ControlState() {
            *this = ::std::move(from);
        }

        inline ControlState& operator=(const ControlState& from) {
            CopyFrom(from);
            return *this;
        }
        inline ControlState& operator=(ControlState&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const ControlState& default_instance() {
            return *internal_default_instance();
        }
        static inline const ControlState* internal_default_instance() {
            return reinterpret_cast<const ControlState*>(
                &_ControlState_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(ControlState& a, ControlState& b) {
            a.Swap(&b);
        }
        inline void Swap(ControlState* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ControlState* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ControlState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<ControlState>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ControlState& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const ControlState& from) {
            ControlState::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ControlState* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.ControlState";
        }
    protected:
        explicit ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kPosWorld2FootWrtWorldFieldNumber = 9,
            kVelWorld2FootWrtWorldFieldNumber = 10,
            kPosBody2FootWrtWorldFieldNumber = 11,
            kVelBody2FootWrtWorldFieldNumber = 12,
            kPosBody2FootWrtBodyFieldNumber = 13,
            kVelBody2FootWrtBodyFieldNumber = 14,
            kPosWorld2ComWrtWorldFieldNumber = 1,
            kVelWorld2ComWrtWorldFieldNumber = 2,
            kPosWorld2BodyWrtWorldFieldNumber = 3,
            kVelWorld2BodyWrtWorldFieldNumber = 4,
            kEulerAngleBodyWrtWorldFieldNumber = 5,
            kAngularVelBodyWrtWorldFieldNumber = 6,
            kAngularVelBodyWrtBodyFieldNumber = 7,
            kAngularMomentumBodyWrtWorldFieldNumber = 8,
            kRotBodyWrtWorldFieldNumber = 15,
            kContactFieldNumber = 16,
        };
        // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
        int posworld2footwrtworld_size() const;
    private:
        int _internal_posworld2footwrtworld_size() const;
    public:
        void clear_posworld2footwrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_posworld2footwrtworld(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
        mutable_posworld2footwrtworld();
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_posworld2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* _internal_add_posworld2footwrtworld();
    public:
        const ::dtproto::geometry_msgs::Point3d& posworld2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* add_posworld2footwrtworld();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
        posworld2footwrtworld() const;

        // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
        int velworld2footwrtworld_size() const;
    private:
        int _internal_velworld2footwrtworld_size() const;
    public:
        void clear_velworld2footwrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_velworld2footwrtworld(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
        mutable_velworld2footwrtworld();
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_velworld2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* _internal_add_velworld2footwrtworld();
    public:
        const ::dtproto::geometry_msgs::Point3d& velworld2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* add_velworld2footwrtworld();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
        velworld2footwrtworld() const;

        // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
        int posbody2footwrtworld_size() const;
    private:
        int _internal_posbody2footwrtworld_size() const;
    public:
        void clear_posbody2footwrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_posbody2footwrtworld(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
        mutable_posbody2footwrtworld();
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_posbody2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* _internal_add_posbody2footwrtworld();
    public:
        const ::dtproto::geometry_msgs::Point3d& posbody2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* add_posbody2footwrtworld();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
        posbody2footwrtworld() const;

        // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
        int velbody2footwrtworld_size() const;
    private:
        int _internal_velbody2footwrtworld_size() const;
    public:
        void clear_velbody2footwrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_velbody2footwrtworld(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
        mutable_velbody2footwrtworld();
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_velbody2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* _internal_add_velbody2footwrtworld();
    public:
        const ::dtproto::geometry_msgs::Point3d& velbody2footwrtworld(int index) const;
        ::dtproto::geometry_msgs::Point3d* add_velbody2footwrtworld();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
        velbody2footwrtworld() const;

        // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
        int posbody2footwrtbody_size() const;
    private:
        int _internal_posbody2footwrtbody_size() const;
    public:
        void clear_posbody2footwrtbody();
        ::dtproto::geometry_msgs::Point3d* mutable_posbody2footwrtbody(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
        mutable_posbody2footwrtbody();
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_posbody2footwrtbody(int index) const;
        ::dtproto::geometry_msgs::Point3d* _internal_add_posbody2footwrtbody();
    public:
        const ::dtproto::geometry_msgs::Point3d& posbody2footwrtbody(int index) const;
        ::dtproto::geometry_msgs::Point3d* add_posbody2footwrtbody();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
        posbody2footwrtbody() const;

        // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
        int velbody2footwrtbody_size() const;
    private:
        int _internal_velbody2footwrtbody_size() const;
    public:
        void clear_velbody2footwrtbody();
        ::dtproto::geometry_msgs::Point3d* mutable_velbody2footwrtbody(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
        mutable_velbody2footwrtbody();
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_velbody2footwrtbody(int index) const;
        ::dtproto::geometry_msgs::Point3d* _internal_add_velbody2footwrtbody();
    public:
        const ::dtproto::geometry_msgs::Point3d& velbody2footwrtbody(int index) const;
        ::dtproto::geometry_msgs::Point3d* add_velbody2footwrtbody();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
        velbody2footwrtbody() const;

        // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
        bool has_posworld2comwrtworld() const;
    private:
        bool _internal_has_posworld2comwrtworld() const;
    public:
        void clear_posworld2comwrtworld();
        const ::dtproto::geometry_msgs::Point3d& posworld2comwrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_posworld2comwrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_posworld2comwrtworld();
        void set_allocated_posworld2comwrtworld(::dtproto::geometry_msgs::Point3d* posworld2comwrtworld);
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_posworld2comwrtworld() const;
        ::dtproto::geometry_msgs::Point3d* _internal_mutable_posworld2comwrtworld();
    public:
        void unsafe_arena_set_allocated_posworld2comwrtworld(
            ::dtproto::geometry_msgs::Point3d* posworld2comwrtworld);
        ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_posworld2comwrtworld();

        // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
        bool has_velworld2comwrtworld() const;
    private:
        bool _internal_has_velworld2comwrtworld() const;
    public:
        void clear_velworld2comwrtworld();
        const ::dtproto::geometry_msgs::Point3d& velworld2comwrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_velworld2comwrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_velworld2comwrtworld();
        void set_allocated_velworld2comwrtworld(::dtproto::geometry_msgs::Point3d* velworld2comwrtworld);
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_velworld2comwrtworld() const;
        ::dtproto::geometry_msgs::Point3d* _internal_mutable_velworld2comwrtworld();
    public:
        void unsafe_arena_set_allocated_velworld2comwrtworld(
            ::dtproto::geometry_msgs::Point3d* velworld2comwrtworld);
        ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_velworld2comwrtworld();

        // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
        bool has_posworld2bodywrtworld() const;
    private:
        bool _internal_has_posworld2bodywrtworld() const;
    public:
        void clear_posworld2bodywrtworld();
        const ::dtproto::geometry_msgs::Point3d& posworld2bodywrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_posworld2bodywrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_posworld2bodywrtworld();
        void set_allocated_posworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld);
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_posworld2bodywrtworld() const;
        ::dtproto::geometry_msgs::Point3d* _internal_mutable_posworld2bodywrtworld();
    public:
        void unsafe_arena_set_allocated_posworld2bodywrtworld(
            ::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld);
        ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_posworld2bodywrtworld();

        // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
        bool has_velworld2bodywrtworld() const;
    private:
        bool _internal_has_velworld2bodywrtworld() const;
    public:
        void clear_velworld2bodywrtworld();
        const ::dtproto::geometry_msgs::Point3d& velworld2bodywrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_velworld2bodywrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_velworld2bodywrtworld();
        void set_allocated_velworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld);
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_velworld2bodywrtworld() const;
        ::dtproto::geometry_msgs::Point3d* _internal_mutable_velworld2bodywrtworld();
    public:
        void unsafe_arena_set_allocated_velworld2bodywrtworld(
            ::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld);
        ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_velworld2bodywrtworld();

        // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
        bool has_euleranglebodywrtworld() const;
    private:
        bool _internal_has_euleranglebodywrtworld() const;
    public:
        void clear_euleranglebodywrtworld();
        const ::dtproto::geometry_msgs::Euler& euleranglebodywrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Euler* release_euleranglebodywrtworld();
        ::dtproto::geometry_msgs::Euler* mutable_euleranglebodywrtworld();
        void set_allocated_euleranglebodywrtworld(::dtproto::geometry_msgs::Euler* euleranglebodywrtworld);
    private:
        const ::dtproto::geometry_msgs::Euler& _internal_euleranglebodywrtworld() const;
        ::dtproto::geometry_msgs::Euler* _internal_mutable_euleranglebodywrtworld();
    public:
        void unsafe_arena_set_allocated_euleranglebodywrtworld(
            ::dtproto::geometry_msgs::Euler* euleranglebodywrtworld);
        ::dtproto::geometry_msgs::Euler* unsafe_arena_release_euleranglebodywrtworld();

        // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
        bool has_angularvelbodywrtworld() const;
    private:
        bool _internal_has_angularvelbodywrtworld() const;
    public:
        void clear_angularvelbodywrtworld();
        const ::dtproto::geometry_msgs::Euler& angularvelbodywrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Euler* release_angularvelbodywrtworld();
        ::dtproto::geometry_msgs::Euler* mutable_angularvelbodywrtworld();
        void set_allocated_angularvelbodywrtworld(::dtproto::geometry_msgs::Euler* angularvelbodywrtworld);
    private:
        const ::dtproto::geometry_msgs::Euler& _internal_angularvelbodywrtworld() const;
        ::dtproto::geometry_msgs::Euler* _internal_mutable_angularvelbodywrtworld();
    public:
        void unsafe_arena_set_allocated_angularvelbodywrtworld(
            ::dtproto::geometry_msgs::Euler* angularvelbodywrtworld);
        ::dtproto::geometry_msgs::Euler* unsafe_arena_release_angularvelbodywrtworld();

        // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
        bool has_angularvelbodywrtbody() const;
    private:
        bool _internal_has_angularvelbodywrtbody() const;
    public:
        void clear_angularvelbodywrtbody();
        const ::dtproto::geometry_msgs::Euler& angularvelbodywrtbody() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Euler* release_angularvelbodywrtbody();
        ::dtproto::geometry_msgs::Euler* mutable_angularvelbodywrtbody();
        void set_allocated_angularvelbodywrtbody(::dtproto::geometry_msgs::Euler* angularvelbodywrtbody);
    private:
        const ::dtproto::geometry_msgs::Euler& _internal_angularvelbodywrtbody() const;
        ::dtproto::geometry_msgs::Euler* _internal_mutable_angularvelbodywrtbody();
    public:
        void unsafe_arena_set_allocated_angularvelbodywrtbody(
            ::dtproto::geometry_msgs::Euler* angularvelbodywrtbody);
        ::dtproto::geometry_msgs::Euler* unsafe_arena_release_angularvelbodywrtbody();

        // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
        bool has_angularmomentumbodywrtworld() const;
    private:
        bool _internal_has_angularmomentumbodywrtworld() const;
    public:
        void clear_angularmomentumbodywrtworld();
        const ::dtproto::geometry_msgs::Point3d& angularmomentumbodywrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_angularmomentumbodywrtworld();
        ::dtproto::geometry_msgs::Point3d* mutable_angularmomentumbodywrtworld();
        void set_allocated_angularmomentumbodywrtworld(::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld);
    private:
        const ::dtproto::geometry_msgs::Point3d& _internal_angularmomentumbodywrtworld() const;
        ::dtproto::geometry_msgs::Point3d* _internal_mutable_angularmomentumbodywrtworld();
    public:
        void unsafe_arena_set_allocated_angularmomentumbodywrtworld(
            ::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld);
        ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_angularmomentumbodywrtworld();

        // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
        bool has_rotbodywrtworld() const;
    private:
        bool _internal_has_rotbodywrtworld() const;
    public:
        void clear_rotbodywrtworld();
        const ::dtproto::geometry_msgs::Matrix3d& rotbodywrtworld() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Matrix3d* release_rotbodywrtworld();
        ::dtproto::geometry_msgs::Matrix3d* mutable_rotbodywrtworld();
        void set_allocated_rotbodywrtworld(::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld);
    private:
        const ::dtproto::geometry_msgs::Matrix3d& _internal_rotbodywrtworld() const;
        ::dtproto::geometry_msgs::Matrix3d* _internal_mutable_rotbodywrtworld();
    public:
        void unsafe_arena_set_allocated_rotbodywrtworld(
            ::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld);
        ::dtproto::geometry_msgs::Matrix3d* unsafe_arena_release_rotbodywrtworld();

        // .dtproto.geometry_msgs.Vector4b contact = 16;
        bool has_contact() const;
    private:
        bool _internal_has_contact() const;
    public:
        void clear_contact();
        const ::dtproto::geometry_msgs::Vector4b& contact() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4b* release_contact();
        ::dtproto::geometry_msgs::Vector4b* mutable_contact();
        void set_allocated_contact(::dtproto::geometry_msgs::Vector4b* contact);
    private:
        const ::dtproto::geometry_msgs::Vector4b& _internal_contact() const;
        ::dtproto::geometry_msgs::Vector4b* _internal_mutable_contact();
    public:
        void unsafe_arena_set_allocated_contact(
            ::dtproto::geometry_msgs::Vector4b* contact);
        ::dtproto::geometry_msgs::Vector4b* unsafe_arena_release_contact();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.ControlState)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > posworld2footwrtworld_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > velworld2footwrtworld_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > posbody2footwrtworld_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > velbody2footwrtworld_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > posbody2footwrtbody_;
            ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > velbody2footwrtbody_;
            ::dtproto::geometry_msgs::Point3d* posworld2comwrtworld_;
            ::dtproto::geometry_msgs::Point3d* velworld2comwrtworld_;
            ::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld_;
            ::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld_;
            ::dtproto::geometry_msgs::Euler* euleranglebodywrtworld_;
            ::dtproto::geometry_msgs::Euler* angularvelbodywrtworld_;
            ::dtproto::geometry_msgs::Euler* angularvelbodywrtbody_;
            ::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld_;
            ::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld_;
            ::dtproto::geometry_msgs::Vector4b* contact_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class ControlStateTimeStamped final :
                                          public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.ControlStateTimeStamped) */ {
    public:
        inline ControlStateTimeStamped() : ControlStateTimeStamped(nullptr) {}
        ~ControlStateTimeStamped() override;
        explicit PROTOBUF_CONSTEXPR ControlStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ControlStateTimeStamped(const ControlStateTimeStamped& from);
        ControlStateTimeStamped(ControlStateTimeStamped&& from) noexcept
            : ControlStateTimeStamped() {
            *this = ::std::move(from);
        }

        inline ControlStateTimeStamped& operator=(const ControlStateTimeStamped& from) {
            CopyFrom(from);
            return *this;
        }
        inline ControlStateTimeStamped& operator=(ControlStateTimeStamped&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const ControlStateTimeStamped& default_instance() {
            return *internal_default_instance();
        }
        static inline const ControlStateTimeStamped* internal_default_instance() {
            return reinterpret_cast<const ControlStateTimeStamped*>(
                &_ControlStateTimeStamped_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            3;

        friend void swap(ControlStateTimeStamped& a, ControlStateTimeStamped& b) {
            a.Swap(&b);
        }
        inline void Swap(ControlStateTimeStamped* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ControlStateTimeStamped* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ControlStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<ControlStateTimeStamped>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ControlStateTimeStamped& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const ControlStateTimeStamped& from) {
            ControlStateTimeStamped::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ControlStateTimeStamped* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.ControlStateTimeStamped";
        }
    protected:
        explicit ControlStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                         bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kHeaderFieldNumber = 1,
            kStateFieldNumber = 2,
        };
        // .dtproto.std_msgs.Header header = 1;
        bool has_header() const;
    private:
        bool _internal_has_header() const;
    public:
        void clear_header();
        const ::dtproto::std_msgs::Header& header() const;
        PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
        ::dtproto::std_msgs::Header* mutable_header();
        void set_allocated_header(::dtproto::std_msgs::Header* header);
    private:
        const ::dtproto::std_msgs::Header& _internal_header() const;
        ::dtproto::std_msgs::Header* _internal_mutable_header();
    public:
        void unsafe_arena_set_allocated_header(
            ::dtproto::std_msgs::Header* header);
        ::dtproto::std_msgs::Header* unsafe_arena_release_header();

        // .dtproto.quadip.ControlState state = 2;
        bool has_state() const;
    private:
        bool _internal_has_state() const;
    public:
        void clear_state();
        const ::dtproto::quadip::ControlState& state() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::ControlState* release_state();
        ::dtproto::quadip::ControlState* mutable_state();
        void set_allocated_state(::dtproto::quadip::ControlState* state);
    private:
        const ::dtproto::quadip::ControlState& _internal_state() const;
        ::dtproto::quadip::ControlState* _internal_mutable_state();
    public:
        void unsafe_arena_set_allocated_state(
            ::dtproto::quadip::ControlState* state);
        ::dtproto::quadip::ControlState* unsafe_arena_release_state();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.ControlStateTimeStamped)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::dtproto::std_msgs::Header* header_;
            ::dtproto::quadip::ControlState* state_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class CpgState final :
                           public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.CpgState) */ {
    public:
        inline CpgState() : CpgState(nullptr) {}
        ~CpgState() override;
        explicit PROTOBUF_CONSTEXPR CpgState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        CpgState(const CpgState& from);
        CpgState(CpgState&& from) noexcept
            : CpgState() {
            *this = ::std::move(from);
        }

        inline CpgState& operator=(const CpgState& from) {
            CopyFrom(from);
            return *this;
        }
        inline CpgState& operator=(CpgState&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const CpgState& default_instance() {
            return *internal_default_instance();
        }
        static inline const CpgState* internal_default_instance() {
            return reinterpret_cast<const CpgState*>(
                &_CpgState_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            4;

        friend void swap(CpgState& a, CpgState& b) {
            a.Swap(&b);
        }
        inline void Swap(CpgState* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(CpgState* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        CpgState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<CpgState>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const CpgState& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const CpgState& from) {
            CpgState::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(CpgState* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.CpgState";
        }
    protected:
        explicit CpgState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                          bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kPeriodsFieldNumber = 1,
            kPhasesFieldNumber = 2,
            kPhiFieldNumber = 3,
            kPhiToGoFieldNumber = 4,
            kPhiStFieldNumber = 5,
            kPhiSwFieldNumber = 6,
            kCpgFieldNumber = 7,
            kContactFieldNumber = 8,
            kPhaseChangeFlagFieldNumber = 9,
            kPeriodChangeFlagFieldNumber = 10,
            kPhaseDiffFieldNumber = 11,
            kPhiTranFieldNumber = 12,
            kPhiTranStFieldNumber = 13,
            kPhiTranSwFieldNumber = 14,
            kStepFieldNumber = 15,
            kDtFieldNumber = 16,
            kAirFieldNumber = 17,
        };
        // .dtproto.geometry_msgs.Vector2d periods = 1;
        bool has_periods() const;
    private:
        bool _internal_has_periods() const;
    public:
        void clear_periods();
        const ::dtproto::geometry_msgs::Vector2d& periods() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector2d* release_periods();
        ::dtproto::geometry_msgs::Vector2d* mutable_periods();
        void set_allocated_periods(::dtproto::geometry_msgs::Vector2d* periods);
    private:
        const ::dtproto::geometry_msgs::Vector2d& _internal_periods() const;
        ::dtproto::geometry_msgs::Vector2d* _internal_mutable_periods();
    public:
        void unsafe_arena_set_allocated_periods(
            ::dtproto::geometry_msgs::Vector2d* periods);
        ::dtproto::geometry_msgs::Vector2d* unsafe_arena_release_periods();

        // .dtproto.geometry_msgs.Vector4d phases = 2;
        bool has_phases() const;
    private:
        bool _internal_has_phases() const;
    public:
        void clear_phases();
        const ::dtproto::geometry_msgs::Vector4d& phases() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phases();
        ::dtproto::geometry_msgs::Vector4d* mutable_phases();
        void set_allocated_phases(::dtproto::geometry_msgs::Vector4d* phases);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phases() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phases();
    public:
        void unsafe_arena_set_allocated_phases(
            ::dtproto::geometry_msgs::Vector4d* phases);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phases();

        // .dtproto.geometry_msgs.Vector4d phi = 3;
        bool has_phi() const;
    private:
        bool _internal_has_phi() const;
    public:
        void clear_phi();
        const ::dtproto::geometry_msgs::Vector4d& phi() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phi();
        ::dtproto::geometry_msgs::Vector4d* mutable_phi();
        void set_allocated_phi(::dtproto::geometry_msgs::Vector4d* phi);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phi() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phi();
    public:
        void unsafe_arena_set_allocated_phi(
            ::dtproto::geometry_msgs::Vector4d* phi);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phi();

        // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
        bool has_phitogo() const;
    private:
        bool _internal_has_phitogo() const;
    public:
        void clear_phitogo();
        const ::dtproto::geometry_msgs::Vector4d& phitogo() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phitogo();
        ::dtproto::geometry_msgs::Vector4d* mutable_phitogo();
        void set_allocated_phitogo(::dtproto::geometry_msgs::Vector4d* phitogo);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phitogo() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phitogo();
    public:
        void unsafe_arena_set_allocated_phitogo(
            ::dtproto::geometry_msgs::Vector4d* phitogo);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phitogo();

        // .dtproto.geometry_msgs.Vector4d phiSt = 5;
        bool has_phist() const;
    private:
        bool _internal_has_phist() const;
    public:
        void clear_phist();
        const ::dtproto::geometry_msgs::Vector4d& phist() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phist();
        ::dtproto::geometry_msgs::Vector4d* mutable_phist();
        void set_allocated_phist(::dtproto::geometry_msgs::Vector4d* phist);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phist() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phist();
    public:
        void unsafe_arena_set_allocated_phist(
            ::dtproto::geometry_msgs::Vector4d* phist);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phist();

        // .dtproto.geometry_msgs.Vector4d phiSw = 6;
        bool has_phisw() const;
    private:
        bool _internal_has_phisw() const;
    public:
        void clear_phisw();
        const ::dtproto::geometry_msgs::Vector4d& phisw() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phisw();
        ::dtproto::geometry_msgs::Vector4d* mutable_phisw();
        void set_allocated_phisw(::dtproto::geometry_msgs::Vector4d* phisw);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phisw() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phisw();
    public:
        void unsafe_arena_set_allocated_phisw(
            ::dtproto::geometry_msgs::Vector4d* phisw);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phisw();

        // .dtproto.geometry_msgs.Vector4d cpg = 7;
        bool has_cpg() const;
    private:
        bool _internal_has_cpg() const;
    public:
        void clear_cpg();
        const ::dtproto::geometry_msgs::Vector4d& cpg() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_cpg();
        ::dtproto::geometry_msgs::Vector4d* mutable_cpg();
        void set_allocated_cpg(::dtproto::geometry_msgs::Vector4d* cpg);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_cpg() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_cpg();
    public:
        void unsafe_arena_set_allocated_cpg(
            ::dtproto::geometry_msgs::Vector4d* cpg);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_cpg();

        // .dtproto.geometry_msgs.Vector4b contact = 8;
        bool has_contact() const;
    private:
        bool _internal_has_contact() const;
    public:
        void clear_contact();
        const ::dtproto::geometry_msgs::Vector4b& contact() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4b* release_contact();
        ::dtproto::geometry_msgs::Vector4b* mutable_contact();
        void set_allocated_contact(::dtproto::geometry_msgs::Vector4b* contact);
    private:
        const ::dtproto::geometry_msgs::Vector4b& _internal_contact() const;
        ::dtproto::geometry_msgs::Vector4b* _internal_mutable_contact();
    public:
        void unsafe_arena_set_allocated_contact(
            ::dtproto::geometry_msgs::Vector4b* contact);
        ::dtproto::geometry_msgs::Vector4b* unsafe_arena_release_contact();

        // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
        bool has_phasechangeflag() const;
    private:
        bool _internal_has_phasechangeflag() const;
    public:
        void clear_phasechangeflag();
        const ::dtproto::geometry_msgs::Vector4b& phasechangeflag() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4b* release_phasechangeflag();
        ::dtproto::geometry_msgs::Vector4b* mutable_phasechangeflag();
        void set_allocated_phasechangeflag(::dtproto::geometry_msgs::Vector4b* phasechangeflag);
    private:
        const ::dtproto::geometry_msgs::Vector4b& _internal_phasechangeflag() const;
        ::dtproto::geometry_msgs::Vector4b* _internal_mutable_phasechangeflag();
    public:
        void unsafe_arena_set_allocated_phasechangeflag(
            ::dtproto::geometry_msgs::Vector4b* phasechangeflag);
        ::dtproto::geometry_msgs::Vector4b* unsafe_arena_release_phasechangeflag();

        // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
        bool has_periodchangeflag() const;
    private:
        bool _internal_has_periodchangeflag() const;
    public:
        void clear_periodchangeflag();
        const ::dtproto::geometry_msgs::Vector4b& periodchangeflag() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4b* release_periodchangeflag();
        ::dtproto::geometry_msgs::Vector4b* mutable_periodchangeflag();
        void set_allocated_periodchangeflag(::dtproto::geometry_msgs::Vector4b* periodchangeflag);
    private:
        const ::dtproto::geometry_msgs::Vector4b& _internal_periodchangeflag() const;
        ::dtproto::geometry_msgs::Vector4b* _internal_mutable_periodchangeflag();
    public:
        void unsafe_arena_set_allocated_periodchangeflag(
            ::dtproto::geometry_msgs::Vector4b* periodchangeflag);
        ::dtproto::geometry_msgs::Vector4b* unsafe_arena_release_periodchangeflag();

        // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
        bool has_phasediff() const;
    private:
        bool _internal_has_phasediff() const;
    public:
        void clear_phasediff();
        const ::dtproto::geometry_msgs::Vector4d& phasediff() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phasediff();
        ::dtproto::geometry_msgs::Vector4d* mutable_phasediff();
        void set_allocated_phasediff(::dtproto::geometry_msgs::Vector4d* phasediff);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phasediff() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phasediff();
    public:
        void unsafe_arena_set_allocated_phasediff(
            ::dtproto::geometry_msgs::Vector4d* phasediff);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phasediff();

        // .dtproto.geometry_msgs.Vector4d phiTran = 12;
        bool has_phitran() const;
    private:
        bool _internal_has_phitran() const;
    public:
        void clear_phitran();
        const ::dtproto::geometry_msgs::Vector4d& phitran() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phitran();
        ::dtproto::geometry_msgs::Vector4d* mutable_phitran();
        void set_allocated_phitran(::dtproto::geometry_msgs::Vector4d* phitran);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phitran() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phitran();
    public:
        void unsafe_arena_set_allocated_phitran(
            ::dtproto::geometry_msgs::Vector4d* phitran);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phitran();

        // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
        bool has_phitranst() const;
    private:
        bool _internal_has_phitranst() const;
    public:
        void clear_phitranst();
        const ::dtproto::geometry_msgs::Vector4d& phitranst() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phitranst();
        ::dtproto::geometry_msgs::Vector4d* mutable_phitranst();
        void set_allocated_phitranst(::dtproto::geometry_msgs::Vector4d* phitranst);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phitranst() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phitranst();
    public:
        void unsafe_arena_set_allocated_phitranst(
            ::dtproto::geometry_msgs::Vector4d* phitranst);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phitranst();

        // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
        bool has_phitransw() const;
    private:
        bool _internal_has_phitransw() const;
    public:
        void clear_phitransw();
        const ::dtproto::geometry_msgs::Vector4d& phitransw() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4d* release_phitransw();
        ::dtproto::geometry_msgs::Vector4d* mutable_phitransw();
        void set_allocated_phitransw(::dtproto::geometry_msgs::Vector4d* phitransw);
    private:
        const ::dtproto::geometry_msgs::Vector4d& _internal_phitransw() const;
        ::dtproto::geometry_msgs::Vector4d* _internal_mutable_phitransw();
    public:
        void unsafe_arena_set_allocated_phitransw(
            ::dtproto::geometry_msgs::Vector4d* phitransw);
        ::dtproto::geometry_msgs::Vector4d* unsafe_arena_release_phitransw();

        // .dtproto.geometry_msgs.Vector4i32 step = 15;
        bool has_step() const;
    private:
        bool _internal_has_step() const;
    public:
        void clear_step();
        const ::dtproto::geometry_msgs::Vector4i32& step() const;
        PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4i32* release_step();
        ::dtproto::geometry_msgs::Vector4i32* mutable_step();
        void set_allocated_step(::dtproto::geometry_msgs::Vector4i32* step);
    private:
        const ::dtproto::geometry_msgs::Vector4i32& _internal_step() const;
        ::dtproto::geometry_msgs::Vector4i32* _internal_mutable_step();
    public:
        void unsafe_arena_set_allocated_step(
            ::dtproto::geometry_msgs::Vector4i32* step);
        ::dtproto::geometry_msgs::Vector4i32* unsafe_arena_release_step();

        // double dt = 16;
        void clear_dt();
        double dt() const;
        void set_dt(double value);
    private:
        double _internal_dt() const;
        void _internal_set_dt(double value);
    public:

        // bool air = 17;
        void clear_air();
        bool air() const;
        void set_air(bool value);
    private:
        bool _internal_air() const;
        void _internal_set_air(bool value);
    public:

        // @@protoc_insertion_point(class_scope:dtproto.quadip.CpgState)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::dtproto::geometry_msgs::Vector2d* periods_;
            ::dtproto::geometry_msgs::Vector4d* phases_;
            ::dtproto::geometry_msgs::Vector4d* phi_;
            ::dtproto::geometry_msgs::Vector4d* phitogo_;
            ::dtproto::geometry_msgs::Vector4d* phist_;
            ::dtproto::geometry_msgs::Vector4d* phisw_;
            ::dtproto::geometry_msgs::Vector4d* cpg_;
            ::dtproto::geometry_msgs::Vector4b* contact_;
            ::dtproto::geometry_msgs::Vector4b* phasechangeflag_;
            ::dtproto::geometry_msgs::Vector4b* periodchangeflag_;
            ::dtproto::geometry_msgs::Vector4d* phasediff_;
            ::dtproto::geometry_msgs::Vector4d* phitran_;
            ::dtproto::geometry_msgs::Vector4d* phitranst_;
            ::dtproto::geometry_msgs::Vector4d* phitransw_;
            ::dtproto::geometry_msgs::Vector4i32* step_;
            double dt_;
            bool air_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class CpgStateTimeStamped final :
                                      public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.CpgStateTimeStamped) */ {
    public:
        inline CpgStateTimeStamped() : CpgStateTimeStamped(nullptr) {}
        ~CpgStateTimeStamped() override;
        explicit PROTOBUF_CONSTEXPR CpgStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        CpgStateTimeStamped(const CpgStateTimeStamped& from);
        CpgStateTimeStamped(CpgStateTimeStamped&& from) noexcept
            : CpgStateTimeStamped() {
            *this = ::std::move(from);
        }

        inline CpgStateTimeStamped& operator=(const CpgStateTimeStamped& from) {
            CopyFrom(from);
            return *this;
        }
        inline CpgStateTimeStamped& operator=(CpgStateTimeStamped&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const CpgStateTimeStamped& default_instance() {
            return *internal_default_instance();
        }
        static inline const CpgStateTimeStamped* internal_default_instance() {
            return reinterpret_cast<const CpgStateTimeStamped*>(
                &_CpgStateTimeStamped_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            5;

        friend void swap(CpgStateTimeStamped& a, CpgStateTimeStamped& b) {
            a.Swap(&b);
        }
        inline void Swap(CpgStateTimeStamped* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(CpgStateTimeStamped* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        CpgStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<CpgStateTimeStamped>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const CpgStateTimeStamped& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const CpgStateTimeStamped& from) {
            CpgStateTimeStamped::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(CpgStateTimeStamped* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.CpgStateTimeStamped";
        }
    protected:
        explicit CpgStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                     bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kHeaderFieldNumber = 1,
            kStateFieldNumber = 2,
        };
        // .dtproto.std_msgs.Header header = 1;
        bool has_header() const;
    private:
        bool _internal_has_header() const;
    public:
        void clear_header();
        const ::dtproto::std_msgs::Header& header() const;
        PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
        ::dtproto::std_msgs::Header* mutable_header();
        void set_allocated_header(::dtproto::std_msgs::Header* header);
    private:
        const ::dtproto::std_msgs::Header& _internal_header() const;
        ::dtproto::std_msgs::Header* _internal_mutable_header();
    public:
        void unsafe_arena_set_allocated_header(
            ::dtproto::std_msgs::Header* header);
        ::dtproto::std_msgs::Header* unsafe_arena_release_header();

        // .dtproto.quadip.CpgState state = 2;
        bool has_state() const;
    private:
        bool _internal_has_state() const;
    public:
        void clear_state();
        const ::dtproto::quadip::CpgState& state() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::CpgState* release_state();
        ::dtproto::quadip::CpgState* mutable_state();
        void set_allocated_state(::dtproto::quadip::CpgState* state);
    private:
        const ::dtproto::quadip::CpgState& _internal_state() const;
        ::dtproto::quadip::CpgState* _internal_mutable_state();
    public:
        void unsafe_arena_set_allocated_state(
            ::dtproto::quadip::CpgState* state);
        ::dtproto::quadip::CpgState* unsafe_arena_release_state();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.CpgStateTimeStamped)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::dtproto::std_msgs::Header* header_;
            ::dtproto::quadip::CpgState* state_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class QuadIpState final :
                              public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.QuadIpState) */ {
    public:
        inline QuadIpState() : QuadIpState(nullptr) {}
        ~QuadIpState() override;
        explicit PROTOBUF_CONSTEXPR QuadIpState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        QuadIpState(const QuadIpState& from);
        QuadIpState(QuadIpState&& from) noexcept
            : QuadIpState() {
            *this = ::std::move(from);
        }

        inline QuadIpState& operator=(const QuadIpState& from) {
            CopyFrom(from);
            return *this;
        }
        inline QuadIpState& operator=(QuadIpState&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const QuadIpState& default_instance() {
            return *internal_default_instance();
        }
        static inline const QuadIpState* internal_default_instance() {
            return reinterpret_cast<const QuadIpState*>(
                &_QuadIpState_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            6;

        friend void swap(QuadIpState& a, QuadIpState& b) {
            a.Swap(&b);
        }
        inline void Swap(QuadIpState* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(QuadIpState* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        QuadIpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<QuadIpState>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const QuadIpState& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const QuadIpState& from) {
            QuadIpState::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(QuadIpState* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.QuadIpState";
        }
    protected:
        explicit QuadIpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kJointStateFieldNumber = 1,
            kControlStateDesiredFieldNumber = 2,
            kControlStateActualFieldNumber = 3,
            kCpgStateFieldNumber = 4,
        };
        // .dtproto.quadip.JointState jointState = 1;
        bool has_jointstate() const;
    private:
        bool _internal_has_jointstate() const;
    public:
        void clear_jointstate();
        const ::dtproto::quadip::JointState& jointstate() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::JointState* release_jointstate();
        ::dtproto::quadip::JointState* mutable_jointstate();
        void set_allocated_jointstate(::dtproto::quadip::JointState* jointstate);
    private:
        const ::dtproto::quadip::JointState& _internal_jointstate() const;
        ::dtproto::quadip::JointState* _internal_mutable_jointstate();
    public:
        void unsafe_arena_set_allocated_jointstate(
            ::dtproto::quadip::JointState* jointstate);
        ::dtproto::quadip::JointState* unsafe_arena_release_jointstate();

        // .dtproto.quadip.ControlState controlStateDesired = 2;
        bool has_controlstatedesired() const;
    private:
        bool _internal_has_controlstatedesired() const;
    public:
        void clear_controlstatedesired();
        const ::dtproto::quadip::ControlState& controlstatedesired() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::ControlState* release_controlstatedesired();
        ::dtproto::quadip::ControlState* mutable_controlstatedesired();
        void set_allocated_controlstatedesired(::dtproto::quadip::ControlState* controlstatedesired);
    private:
        const ::dtproto::quadip::ControlState& _internal_controlstatedesired() const;
        ::dtproto::quadip::ControlState* _internal_mutable_controlstatedesired();
    public:
        void unsafe_arena_set_allocated_controlstatedesired(
            ::dtproto::quadip::ControlState* controlstatedesired);
        ::dtproto::quadip::ControlState* unsafe_arena_release_controlstatedesired();

        // .dtproto.quadip.ControlState controlStateActual = 3;
        bool has_controlstateactual() const;
    private:
        bool _internal_has_controlstateactual() const;
    public:
        void clear_controlstateactual();
        const ::dtproto::quadip::ControlState& controlstateactual() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::ControlState* release_controlstateactual();
        ::dtproto::quadip::ControlState* mutable_controlstateactual();
        void set_allocated_controlstateactual(::dtproto::quadip::ControlState* controlstateactual);
    private:
        const ::dtproto::quadip::ControlState& _internal_controlstateactual() const;
        ::dtproto::quadip::ControlState* _internal_mutable_controlstateactual();
    public:
        void unsafe_arena_set_allocated_controlstateactual(
            ::dtproto::quadip::ControlState* controlstateactual);
        ::dtproto::quadip::ControlState* unsafe_arena_release_controlstateactual();

        // .dtproto.quadip.CpgState cpgState = 4;
        bool has_cpgstate() const;
    private:
        bool _internal_has_cpgstate() const;
    public:
        void clear_cpgstate();
        const ::dtproto::quadip::CpgState& cpgstate() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::CpgState* release_cpgstate();
        ::dtproto::quadip::CpgState* mutable_cpgstate();
        void set_allocated_cpgstate(::dtproto::quadip::CpgState* cpgstate);
    private:
        const ::dtproto::quadip::CpgState& _internal_cpgstate() const;
        ::dtproto::quadip::CpgState* _internal_mutable_cpgstate();
    public:
        void unsafe_arena_set_allocated_cpgstate(
            ::dtproto::quadip::CpgState* cpgstate);
        ::dtproto::quadip::CpgState* unsafe_arena_release_cpgstate();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.QuadIpState)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::dtproto::quadip::JointState* jointstate_;
            ::dtproto::quadip::ControlState* controlstatedesired_;
            ::dtproto::quadip::ControlState* controlstateactual_;
            ::dtproto::quadip::CpgState* cpgstate_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
    // -------------------------------------------------------------------

    class QuadIpStateTimeStamped final :
                                         public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.quadip.QuadIpStateTimeStamped) */ {
    public:
        inline QuadIpStateTimeStamped() : QuadIpStateTimeStamped(nullptr) {}
        ~QuadIpStateTimeStamped() override;
        explicit PROTOBUF_CONSTEXPR QuadIpStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        QuadIpStateTimeStamped(const QuadIpStateTimeStamped& from);
        QuadIpStateTimeStamped(QuadIpStateTimeStamped&& from) noexcept
            : QuadIpStateTimeStamped() {
            *this = ::std::move(from);
        }

        inline QuadIpStateTimeStamped& operator=(const QuadIpStateTimeStamped& from) {
            CopyFrom(from);
            return *this;
        }
        inline QuadIpStateTimeStamped& operator=(QuadIpStateTimeStamped&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const QuadIpStateTimeStamped& default_instance() {
            return *internal_default_instance();
        }
        static inline const QuadIpStateTimeStamped* internal_default_instance() {
            return reinterpret_cast<const QuadIpStateTimeStamped*>(
                &_QuadIpStateTimeStamped_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            7;

        friend void swap(QuadIpStateTimeStamped& a, QuadIpStateTimeStamped& b) {
            a.Swap(&b);
        }
        inline void Swap(QuadIpStateTimeStamped* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(QuadIpStateTimeStamped* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        QuadIpStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<QuadIpStateTimeStamped>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const QuadIpStateTimeStamped& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom( const QuadIpStateTimeStamped& from) {
            QuadIpStateTimeStamped::MergeImpl(*this, from);
        }
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(QuadIpStateTimeStamped* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "dtproto.quadip.QuadIpStateTimeStamped";
        }
    protected:
        explicit QuadIpStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                        bool is_message_owned = false);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kHeaderFieldNumber = 1,
            kStateFieldNumber = 2,
        };
        // .dtproto.std_msgs.Header header = 1;
        bool has_header() const;
    private:
        bool _internal_has_header() const;
    public:
        void clear_header();
        const ::dtproto::std_msgs::Header& header() const;
        PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
        ::dtproto::std_msgs::Header* mutable_header();
        void set_allocated_header(::dtproto::std_msgs::Header* header);
    private:
        const ::dtproto::std_msgs::Header& _internal_header() const;
        ::dtproto::std_msgs::Header* _internal_mutable_header();
    public:
        void unsafe_arena_set_allocated_header(
            ::dtproto::std_msgs::Header* header);
        ::dtproto::std_msgs::Header* unsafe_arena_release_header();

        // .dtproto.quadip.QuadIpState state = 2;
        bool has_state() const;
    private:
        bool _internal_has_state() const;
    public:
        void clear_state();
        const ::dtproto::quadip::QuadIpState& state() const;
        PROTOBUF_NODISCARD ::dtproto::quadip::QuadIpState* release_state();
        ::dtproto::quadip::QuadIpState* mutable_state();
        void set_allocated_state(::dtproto::quadip::QuadIpState* state);
    private:
        const ::dtproto::quadip::QuadIpState& _internal_state() const;
        ::dtproto::quadip::QuadIpState* _internal_mutable_state();
    public:
        void unsafe_arena_set_allocated_state(
            ::dtproto::quadip::QuadIpState* state);
        ::dtproto::quadip::QuadIpState* unsafe_arena_release_state();

        // @@protoc_insertion_point(class_scope:dtproto.quadip.QuadIpStateTimeStamped)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        struct Impl_ {
            ::dtproto::std_msgs::Header* header_;
            ::dtproto::quadip::QuadIpState* state_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        };
        union { Impl_ _impl_; };
        friend struct ::TableStruct_QuadIP_2eproto;
    };
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
    // JointState

    // repeated .dtproto.sensor_msgs.JointState joint_state_des = 1;
    inline int JointState::_internal_joint_state_des_size() const {
        return _impl_.joint_state_des_.size();
    }
    inline int JointState::joint_state_des_size() const {
        return _internal_joint_state_des_size();
    }
    inline ::dtproto::sensor_msgs::JointState* JointState::mutable_joint_state_des(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.JointState.joint_state_des)
        return _impl_.joint_state_des_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >*
    JointState::mutable_joint_state_des() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.JointState.joint_state_des)
        return &_impl_.joint_state_des_;
    }
    inline const ::dtproto::sensor_msgs::JointState& JointState::_internal_joint_state_des(int index) const {
        return _impl_.joint_state_des_.Get(index);
    }
    inline const ::dtproto::sensor_msgs::JointState& JointState::joint_state_des(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.JointState.joint_state_des)
        return _internal_joint_state_des(index);
    }
    inline ::dtproto::sensor_msgs::JointState* JointState::_internal_add_joint_state_des() {
        return _impl_.joint_state_des_.Add();
    }
    inline ::dtproto::sensor_msgs::JointState* JointState::add_joint_state_des() {
        ::dtproto::sensor_msgs::JointState* _add = _internal_add_joint_state_des();
        // @@protoc_insertion_point(field_add:dtproto.quadip.JointState.joint_state_des)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >&
    JointState::joint_state_des() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.JointState.joint_state_des)
        return _impl_.joint_state_des_;
    }

    // repeated .dtproto.sensor_msgs.JointState joint_state_act = 2;
    inline int JointState::_internal_joint_state_act_size() const {
        return _impl_.joint_state_act_.size();
    }
    inline int JointState::joint_state_act_size() const {
        return _internal_joint_state_act_size();
    }
    inline ::dtproto::sensor_msgs::JointState* JointState::mutable_joint_state_act(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.JointState.joint_state_act)
        return _impl_.joint_state_act_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >*
    JointState::mutable_joint_state_act() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.JointState.joint_state_act)
        return &_impl_.joint_state_act_;
    }
    inline const ::dtproto::sensor_msgs::JointState& JointState::_internal_joint_state_act(int index) const {
        return _impl_.joint_state_act_.Get(index);
    }
    inline const ::dtproto::sensor_msgs::JointState& JointState::joint_state_act(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.JointState.joint_state_act)
        return _internal_joint_state_act(index);
    }
    inline ::dtproto::sensor_msgs::JointState* JointState::_internal_add_joint_state_act() {
        return _impl_.joint_state_act_.Add();
    }
    inline ::dtproto::sensor_msgs::JointState* JointState::add_joint_state_act() {
        ::dtproto::sensor_msgs::JointState* _add = _internal_add_joint_state_act();
        // @@protoc_insertion_point(field_add:dtproto.quadip.JointState.joint_state_act)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::sensor_msgs::JointState >&
    JointState::joint_state_act() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.JointState.joint_state_act)
        return _impl_.joint_state_act_;
    }

    // repeated double abs_encoder = 3;
    inline int JointState::_internal_abs_encoder_size() const {
        return _impl_.abs_encoder_.size();
    }
    inline int JointState::abs_encoder_size() const {
        return _internal_abs_encoder_size();
    }
    inline void JointState::clear_abs_encoder() {
        _impl_.abs_encoder_.Clear();
    }
    inline double JointState::_internal_abs_encoder(int index) const {
        return _impl_.abs_encoder_.Get(index);
    }
    inline double JointState::abs_encoder(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.JointState.abs_encoder)
        return _internal_abs_encoder(index);
    }
    inline void JointState::set_abs_encoder(int index, double value) {
        _impl_.abs_encoder_.Set(index, value);
        // @@protoc_insertion_point(field_set:dtproto.quadip.JointState.abs_encoder)
    }
    inline void JointState::_internal_add_abs_encoder(double value) {
        _impl_.abs_encoder_.Add(value);
    }
    inline void JointState::add_abs_encoder(double value) {
        _internal_add_abs_encoder(value);
        // @@protoc_insertion_point(field_add:dtproto.quadip.JointState.abs_encoder)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
    JointState::_internal_abs_encoder() const {
        return _impl_.abs_encoder_;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
    JointState::abs_encoder() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.JointState.abs_encoder)
        return _internal_abs_encoder();
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
    JointState::_internal_mutable_abs_encoder() {
        return &_impl_.abs_encoder_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
    JointState::mutable_abs_encoder() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.JointState.abs_encoder)
        return _internal_mutable_abs_encoder();
    }

    // repeated double inc_encoder = 4;
    inline int JointState::_internal_inc_encoder_size() const {
        return _impl_.inc_encoder_.size();
    }
    inline int JointState::inc_encoder_size() const {
        return _internal_inc_encoder_size();
    }
    inline void JointState::clear_inc_encoder() {
        _impl_.inc_encoder_.Clear();
    }
    inline double JointState::_internal_inc_encoder(int index) const {
        return _impl_.inc_encoder_.Get(index);
    }
    inline double JointState::inc_encoder(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.JointState.inc_encoder)
        return _internal_inc_encoder(index);
    }
    inline void JointState::set_inc_encoder(int index, double value) {
        _impl_.inc_encoder_.Set(index, value);
        // @@protoc_insertion_point(field_set:dtproto.quadip.JointState.inc_encoder)
    }
    inline void JointState::_internal_add_inc_encoder(double value) {
        _impl_.inc_encoder_.Add(value);
    }
    inline void JointState::add_inc_encoder(double value) {
        _internal_add_inc_encoder(value);
        // @@protoc_insertion_point(field_add:dtproto.quadip.JointState.inc_encoder)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
    JointState::_internal_inc_encoder() const {
        return _impl_.inc_encoder_;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
    JointState::inc_encoder() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.JointState.inc_encoder)
        return _internal_inc_encoder();
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
    JointState::_internal_mutable_inc_encoder() {
        return &_impl_.inc_encoder_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
    JointState::mutable_inc_encoder() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.JointState.inc_encoder)
        return _internal_mutable_inc_encoder();
    }

    // -------------------------------------------------------------------

    // JointStateTimeStamped

    // .dtproto.std_msgs.Header header = 1;
    inline bool JointStateTimeStamped::_internal_has_header() const {
        return this != internal_default_instance() && _impl_.header_ != nullptr;
    }
    inline bool JointStateTimeStamped::has_header() const {
        return _internal_has_header();
    }
    inline const ::dtproto::std_msgs::Header& JointStateTimeStamped::_internal_header() const {
        const ::dtproto::std_msgs::Header* p = _impl_.header_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
                   ::dtproto::std_msgs::_Header_default_instance_);
    }
    inline const ::dtproto::std_msgs::Header& JointStateTimeStamped::header() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.JointStateTimeStamped.header)
        return _internal_header();
    }
    inline void JointStateTimeStamped::unsafe_arena_set_allocated_header(
        ::dtproto::std_msgs::Header* header) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        _impl_.header_ = header;
        if (header) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.JointStateTimeStamped.header)
    }
    inline ::dtproto::std_msgs::Header* JointStateTimeStamped::release_header() {

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::std_msgs::Header* JointStateTimeStamped::unsafe_arena_release_header() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.JointStateTimeStamped.header)

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
        return temp;
    }
    inline ::dtproto::std_msgs::Header* JointStateTimeStamped::_internal_mutable_header() {

        if (_impl_.header_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
            _impl_.header_ = p;
        }
        return _impl_.header_;
    }
    inline ::dtproto::std_msgs::Header* JointStateTimeStamped::mutable_header() {
        ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.JointStateTimeStamped.header)
        return _msg;
    }
    inline void JointStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        if (header) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
            if (message_arena != submessage_arena) {
                header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, header, submessage_arena);
            }

        } else {

        }
        _impl_.header_ = header;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.JointStateTimeStamped.header)
    }

    // .dtproto.quadip.JointState state = 2;
    inline bool JointStateTimeStamped::_internal_has_state() const {
        return this != internal_default_instance() && _impl_.state_ != nullptr;
    }
    inline bool JointStateTimeStamped::has_state() const {
        return _internal_has_state();
    }
    inline void JointStateTimeStamped::clear_state() {
        if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
            delete _impl_.state_;
        }
        _impl_.state_ = nullptr;
    }
    inline const ::dtproto::quadip::JointState& JointStateTimeStamped::_internal_state() const {
        const ::dtproto::quadip::JointState* p = _impl_.state_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::JointState&>(
                   ::dtproto::quadip::_JointState_default_instance_);
    }
    inline const ::dtproto::quadip::JointState& JointStateTimeStamped::state() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.JointStateTimeStamped.state)
        return _internal_state();
    }
    inline void JointStateTimeStamped::unsafe_arena_set_allocated_state(
        ::dtproto::quadip::JointState* state) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
        }
        _impl_.state_ = state;
        if (state) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.JointStateTimeStamped.state)
    }
    inline ::dtproto::quadip::JointState* JointStateTimeStamped::release_state() {

        ::dtproto::quadip::JointState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::JointState* JointStateTimeStamped::unsafe_arena_release_state() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.JointStateTimeStamped.state)

        ::dtproto::quadip::JointState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::JointState* JointStateTimeStamped::_internal_mutable_state() {

        if (_impl_.state_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::JointState>(GetArenaForAllocation());
            _impl_.state_ = p;
        }
        return _impl_.state_;
    }
    inline ::dtproto::quadip::JointState* JointStateTimeStamped::mutable_state() {
        ::dtproto::quadip::JointState* _msg = _internal_mutable_state();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.JointStateTimeStamped.state)
        return _msg;
    }
    inline void JointStateTimeStamped::set_allocated_state(::dtproto::quadip::JointState* state) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.state_;
        }
        if (state) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
            if (message_arena != submessage_arena) {
                state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, state, submessage_arena);
            }

        } else {

        }
        _impl_.state_ = state;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.JointStateTimeStamped.state)
    }

    // -------------------------------------------------------------------

    // ControlState

    // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
    inline bool ControlState::_internal_has_posworld2comwrtworld() const {
        return this != internal_default_instance() && _impl_.posworld2comwrtworld_ != nullptr;
    }
    inline bool ControlState::has_posworld2comwrtworld() const {
        return _internal_has_posworld2comwrtworld();
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posworld2comwrtworld() const {
        const ::dtproto::geometry_msgs::Point3d* p = _impl_.posworld2comwrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
                   ::dtproto::geometry_msgs::_Point3d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::posworld2comwrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.posWorld2ComWrtWorld)
        return _internal_posworld2comwrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_posworld2comwrtworld(
        ::dtproto::geometry_msgs::Point3d* posworld2comwrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2comwrtworld_);
        }
        _impl_.posworld2comwrtworld_ = posworld2comwrtworld;
        if (posworld2comwrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.posWorld2ComWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::release_posworld2comwrtworld() {

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2comwrtworld_;
        _impl_.posworld2comwrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_posworld2comwrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.posWorld2ComWrtWorld)

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2comwrtworld_;
        _impl_.posworld2comwrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_posworld2comwrtworld() {

        if (_impl_.posworld2comwrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
            _impl_.posworld2comwrtworld_ = p;
        }
        return _impl_.posworld2comwrtworld_;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posworld2comwrtworld() {
        ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_posworld2comwrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.posWorld2ComWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_posworld2comwrtworld(::dtproto::geometry_msgs::Point3d* posworld2comwrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2comwrtworld_);
        }
        if (posworld2comwrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posworld2comwrtworld));
            if (message_arena != submessage_arena) {
                posworld2comwrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, posworld2comwrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.posworld2comwrtworld_ = posworld2comwrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.posWorld2ComWrtWorld)
    }

    // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
    inline bool ControlState::_internal_has_velworld2comwrtworld() const {
        return this != internal_default_instance() && _impl_.velworld2comwrtworld_ != nullptr;
    }
    inline bool ControlState::has_velworld2comwrtworld() const {
        return _internal_has_velworld2comwrtworld();
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velworld2comwrtworld() const {
        const ::dtproto::geometry_msgs::Point3d* p = _impl_.velworld2comwrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
                   ::dtproto::geometry_msgs::_Point3d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::velworld2comwrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.velWorld2ComWrtWorld)
        return _internal_velworld2comwrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_velworld2comwrtworld(
        ::dtproto::geometry_msgs::Point3d* velworld2comwrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2comwrtworld_);
        }
        _impl_.velworld2comwrtworld_ = velworld2comwrtworld;
        if (velworld2comwrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.velWorld2ComWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::release_velworld2comwrtworld() {

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2comwrtworld_;
        _impl_.velworld2comwrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_velworld2comwrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.velWorld2ComWrtWorld)

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2comwrtworld_;
        _impl_.velworld2comwrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_velworld2comwrtworld() {

        if (_impl_.velworld2comwrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
            _impl_.velworld2comwrtworld_ = p;
        }
        return _impl_.velworld2comwrtworld_;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velworld2comwrtworld() {
        ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_velworld2comwrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.velWorld2ComWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_velworld2comwrtworld(::dtproto::geometry_msgs::Point3d* velworld2comwrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2comwrtworld_);
        }
        if (velworld2comwrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velworld2comwrtworld));
            if (message_arena != submessage_arena) {
                velworld2comwrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, velworld2comwrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.velworld2comwrtworld_ = velworld2comwrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.velWorld2ComWrtWorld)
    }

    // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
    inline bool ControlState::_internal_has_posworld2bodywrtworld() const {
        return this != internal_default_instance() && _impl_.posworld2bodywrtworld_ != nullptr;
    }
    inline bool ControlState::has_posworld2bodywrtworld() const {
        return _internal_has_posworld2bodywrtworld();
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posworld2bodywrtworld() const {
        const ::dtproto::geometry_msgs::Point3d* p = _impl_.posworld2bodywrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
                   ::dtproto::geometry_msgs::_Point3d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::posworld2bodywrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.posWorld2BodyWrtWorld)
        return _internal_posworld2bodywrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_posworld2bodywrtworld(
        ::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2bodywrtworld_);
        }
        _impl_.posworld2bodywrtworld_ = posworld2bodywrtworld;
        if (posworld2bodywrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.posWorld2BodyWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::release_posworld2bodywrtworld() {

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2bodywrtworld_;
        _impl_.posworld2bodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_posworld2bodywrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.posWorld2BodyWrtWorld)

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2bodywrtworld_;
        _impl_.posworld2bodywrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_posworld2bodywrtworld() {

        if (_impl_.posworld2bodywrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
            _impl_.posworld2bodywrtworld_ = p;
        }
        return _impl_.posworld2bodywrtworld_;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posworld2bodywrtworld() {
        ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_posworld2bodywrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.posWorld2BodyWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_posworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2bodywrtworld_);
        }
        if (posworld2bodywrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posworld2bodywrtworld));
            if (message_arena != submessage_arena) {
                posworld2bodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, posworld2bodywrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.posworld2bodywrtworld_ = posworld2bodywrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.posWorld2BodyWrtWorld)
    }

    // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
    inline bool ControlState::_internal_has_velworld2bodywrtworld() const {
        return this != internal_default_instance() && _impl_.velworld2bodywrtworld_ != nullptr;
    }
    inline bool ControlState::has_velworld2bodywrtworld() const {
        return _internal_has_velworld2bodywrtworld();
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velworld2bodywrtworld() const {
        const ::dtproto::geometry_msgs::Point3d* p = _impl_.velworld2bodywrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
                   ::dtproto::geometry_msgs::_Point3d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::velworld2bodywrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.velWorld2BodyWrtWorld)
        return _internal_velworld2bodywrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_velworld2bodywrtworld(
        ::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2bodywrtworld_);
        }
        _impl_.velworld2bodywrtworld_ = velworld2bodywrtworld;
        if (velworld2bodywrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.velWorld2BodyWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::release_velworld2bodywrtworld() {

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2bodywrtworld_;
        _impl_.velworld2bodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_velworld2bodywrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.velWorld2BodyWrtWorld)

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2bodywrtworld_;
        _impl_.velworld2bodywrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_velworld2bodywrtworld() {

        if (_impl_.velworld2bodywrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
            _impl_.velworld2bodywrtworld_ = p;
        }
        return _impl_.velworld2bodywrtworld_;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velworld2bodywrtworld() {
        ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_velworld2bodywrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.velWorld2BodyWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_velworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2bodywrtworld_);
        }
        if (velworld2bodywrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velworld2bodywrtworld));
            if (message_arena != submessage_arena) {
                velworld2bodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, velworld2bodywrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.velworld2bodywrtworld_ = velworld2bodywrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.velWorld2BodyWrtWorld)
    }

    // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
    inline bool ControlState::_internal_has_euleranglebodywrtworld() const {
        return this != internal_default_instance() && _impl_.euleranglebodywrtworld_ != nullptr;
    }
    inline bool ControlState::has_euleranglebodywrtworld() const {
        return _internal_has_euleranglebodywrtworld();
    }
    inline const ::dtproto::geometry_msgs::Euler& ControlState::_internal_euleranglebodywrtworld() const {
        const ::dtproto::geometry_msgs::Euler* p = _impl_.euleranglebodywrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Euler&>(
                   ::dtproto::geometry_msgs::_Euler_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Euler& ControlState::euleranglebodywrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.eulerAngleBodyWrtWorld)
        return _internal_euleranglebodywrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_euleranglebodywrtworld(
        ::dtproto::geometry_msgs::Euler* euleranglebodywrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.euleranglebodywrtworld_);
        }
        _impl_.euleranglebodywrtworld_ = euleranglebodywrtworld;
        if (euleranglebodywrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.eulerAngleBodyWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::release_euleranglebodywrtworld() {

        ::dtproto::geometry_msgs::Euler* temp = _impl_.euleranglebodywrtworld_;
        _impl_.euleranglebodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::unsafe_arena_release_euleranglebodywrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.eulerAngleBodyWrtWorld)

        ::dtproto::geometry_msgs::Euler* temp = _impl_.euleranglebodywrtworld_;
        _impl_.euleranglebodywrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::_internal_mutable_euleranglebodywrtworld() {

        if (_impl_.euleranglebodywrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Euler>(GetArenaForAllocation());
            _impl_.euleranglebodywrtworld_ = p;
        }
        return _impl_.euleranglebodywrtworld_;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::mutable_euleranglebodywrtworld() {
        ::dtproto::geometry_msgs::Euler* _msg = _internal_mutable_euleranglebodywrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.eulerAngleBodyWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_euleranglebodywrtworld(::dtproto::geometry_msgs::Euler* euleranglebodywrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.euleranglebodywrtworld_);
        }
        if (euleranglebodywrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euleranglebodywrtworld));
            if (message_arena != submessage_arena) {
                euleranglebodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, euleranglebodywrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.euleranglebodywrtworld_ = euleranglebodywrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.eulerAngleBodyWrtWorld)
    }

    // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
    inline bool ControlState::_internal_has_angularvelbodywrtworld() const {
        return this != internal_default_instance() && _impl_.angularvelbodywrtworld_ != nullptr;
    }
    inline bool ControlState::has_angularvelbodywrtworld() const {
        return _internal_has_angularvelbodywrtworld();
    }
    inline const ::dtproto::geometry_msgs::Euler& ControlState::_internal_angularvelbodywrtworld() const {
        const ::dtproto::geometry_msgs::Euler* p = _impl_.angularvelbodywrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Euler&>(
                   ::dtproto::geometry_msgs::_Euler_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Euler& ControlState::angularvelbodywrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.angularVelBodyWrtWorld)
        return _internal_angularvelbodywrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_angularvelbodywrtworld(
        ::dtproto::geometry_msgs::Euler* angularvelbodywrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtworld_);
        }
        _impl_.angularvelbodywrtworld_ = angularvelbodywrtworld;
        if (angularvelbodywrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.angularVelBodyWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::release_angularvelbodywrtworld() {

        ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtworld_;
        _impl_.angularvelbodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::unsafe_arena_release_angularvelbodywrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.angularVelBodyWrtWorld)

        ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtworld_;
        _impl_.angularvelbodywrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::_internal_mutable_angularvelbodywrtworld() {

        if (_impl_.angularvelbodywrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Euler>(GetArenaForAllocation());
            _impl_.angularvelbodywrtworld_ = p;
        }
        return _impl_.angularvelbodywrtworld_;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::mutable_angularvelbodywrtworld() {
        ::dtproto::geometry_msgs::Euler* _msg = _internal_mutable_angularvelbodywrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.angularVelBodyWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_angularvelbodywrtworld(::dtproto::geometry_msgs::Euler* angularvelbodywrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtworld_);
        }
        if (angularvelbodywrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularvelbodywrtworld));
            if (message_arena != submessage_arena) {
                angularvelbodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, angularvelbodywrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.angularvelbodywrtworld_ = angularvelbodywrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.angularVelBodyWrtWorld)
    }

    // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
    inline bool ControlState::_internal_has_angularvelbodywrtbody() const {
        return this != internal_default_instance() && _impl_.angularvelbodywrtbody_ != nullptr;
    }
    inline bool ControlState::has_angularvelbodywrtbody() const {
        return _internal_has_angularvelbodywrtbody();
    }
    inline const ::dtproto::geometry_msgs::Euler& ControlState::_internal_angularvelbodywrtbody() const {
        const ::dtproto::geometry_msgs::Euler* p = _impl_.angularvelbodywrtbody_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Euler&>(
                   ::dtproto::geometry_msgs::_Euler_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Euler& ControlState::angularvelbodywrtbody() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.angularVelBodyWrtBody)
        return _internal_angularvelbodywrtbody();
    }
    inline void ControlState::unsafe_arena_set_allocated_angularvelbodywrtbody(
        ::dtproto::geometry_msgs::Euler* angularvelbodywrtbody) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtbody_);
        }
        _impl_.angularvelbodywrtbody_ = angularvelbodywrtbody;
        if (angularvelbodywrtbody) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.angularVelBodyWrtBody)
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::release_angularvelbodywrtbody() {

        ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtbody_;
        _impl_.angularvelbodywrtbody_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::unsafe_arena_release_angularvelbodywrtbody() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.angularVelBodyWrtBody)

        ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtbody_;
        _impl_.angularvelbodywrtbody_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::_internal_mutable_angularvelbodywrtbody() {

        if (_impl_.angularvelbodywrtbody_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Euler>(GetArenaForAllocation());
            _impl_.angularvelbodywrtbody_ = p;
        }
        return _impl_.angularvelbodywrtbody_;
    }
    inline ::dtproto::geometry_msgs::Euler* ControlState::mutable_angularvelbodywrtbody() {
        ::dtproto::geometry_msgs::Euler* _msg = _internal_mutable_angularvelbodywrtbody();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.angularVelBodyWrtBody)
        return _msg;
    }
    inline void ControlState::set_allocated_angularvelbodywrtbody(::dtproto::geometry_msgs::Euler* angularvelbodywrtbody) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtbody_);
        }
        if (angularvelbodywrtbody) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularvelbodywrtbody));
            if (message_arena != submessage_arena) {
                angularvelbodywrtbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, angularvelbodywrtbody, submessage_arena);
            }

        } else {

        }
        _impl_.angularvelbodywrtbody_ = angularvelbodywrtbody;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.angularVelBodyWrtBody)
    }

    // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
    inline bool ControlState::_internal_has_angularmomentumbodywrtworld() const {
        return this != internal_default_instance() && _impl_.angularmomentumbodywrtworld_ != nullptr;
    }
    inline bool ControlState::has_angularmomentumbodywrtworld() const {
        return _internal_has_angularmomentumbodywrtworld();
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_angularmomentumbodywrtworld() const {
        const ::dtproto::geometry_msgs::Point3d* p = _impl_.angularmomentumbodywrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
                   ::dtproto::geometry_msgs::_Point3d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::angularmomentumbodywrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.angularMomentumBodyWrtWorld)
        return _internal_angularmomentumbodywrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_angularmomentumbodywrtworld(
        ::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularmomentumbodywrtworld_);
        }
        _impl_.angularmomentumbodywrtworld_ = angularmomentumbodywrtworld;
        if (angularmomentumbodywrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.angularMomentumBodyWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::release_angularmomentumbodywrtworld() {

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.angularmomentumbodywrtworld_;
        _impl_.angularmomentumbodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_angularmomentumbodywrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.angularMomentumBodyWrtWorld)

        ::dtproto::geometry_msgs::Point3d* temp = _impl_.angularmomentumbodywrtworld_;
        _impl_.angularmomentumbodywrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_angularmomentumbodywrtworld() {

        if (_impl_.angularmomentumbodywrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
            _impl_.angularmomentumbodywrtworld_ = p;
        }
        return _impl_.angularmomentumbodywrtworld_;
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_angularmomentumbodywrtworld() {
        ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_angularmomentumbodywrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.angularMomentumBodyWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_angularmomentumbodywrtworld(::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularmomentumbodywrtworld_);
        }
        if (angularmomentumbodywrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularmomentumbodywrtworld));
            if (message_arena != submessage_arena) {
                angularmomentumbodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, angularmomentumbodywrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.angularmomentumbodywrtworld_ = angularmomentumbodywrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.angularMomentumBodyWrtWorld)
    }

    // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
    inline int ControlState::_internal_posworld2footwrtworld_size() const {
        return _impl_.posworld2footwrtworld_.size();
    }
    inline int ControlState::posworld2footwrtworld_size() const {
        return _internal_posworld2footwrtworld_size();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posworld2footwrtworld(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.posWorld2FootWrtWorld)
        return _impl_.posworld2footwrtworld_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
    ControlState::mutable_posworld2footwrtworld() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.ControlState.posWorld2FootWrtWorld)
        return &_impl_.posworld2footwrtworld_;
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posworld2footwrtworld(int index) const {
        return _impl_.posworld2footwrtworld_.Get(index);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::posworld2footwrtworld(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.posWorld2FootWrtWorld)
        return _internal_posworld2footwrtworld(index);
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_posworld2footwrtworld() {
        return _impl_.posworld2footwrtworld_.Add();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::add_posworld2footwrtworld() {
        ::dtproto::geometry_msgs::Point3d* _add = _internal_add_posworld2footwrtworld();
        // @@protoc_insertion_point(field_add:dtproto.quadip.ControlState.posWorld2FootWrtWorld)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
    ControlState::posworld2footwrtworld() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.ControlState.posWorld2FootWrtWorld)
        return _impl_.posworld2footwrtworld_;
    }

    // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
    inline int ControlState::_internal_velworld2footwrtworld_size() const {
        return _impl_.velworld2footwrtworld_.size();
    }
    inline int ControlState::velworld2footwrtworld_size() const {
        return _internal_velworld2footwrtworld_size();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velworld2footwrtworld(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.velWorld2FootWrtWorld)
        return _impl_.velworld2footwrtworld_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
    ControlState::mutable_velworld2footwrtworld() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.ControlState.velWorld2FootWrtWorld)
        return &_impl_.velworld2footwrtworld_;
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velworld2footwrtworld(int index) const {
        return _impl_.velworld2footwrtworld_.Get(index);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::velworld2footwrtworld(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.velWorld2FootWrtWorld)
        return _internal_velworld2footwrtworld(index);
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_velworld2footwrtworld() {
        return _impl_.velworld2footwrtworld_.Add();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::add_velworld2footwrtworld() {
        ::dtproto::geometry_msgs::Point3d* _add = _internal_add_velworld2footwrtworld();
        // @@protoc_insertion_point(field_add:dtproto.quadip.ControlState.velWorld2FootWrtWorld)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
    ControlState::velworld2footwrtworld() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.ControlState.velWorld2FootWrtWorld)
        return _impl_.velworld2footwrtworld_;
    }

    // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
    inline int ControlState::_internal_posbody2footwrtworld_size() const {
        return _impl_.posbody2footwrtworld_.size();
    }
    inline int ControlState::posbody2footwrtworld_size() const {
        return _internal_posbody2footwrtworld_size();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posbody2footwrtworld(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.posBody2FootWrtWorld)
        return _impl_.posbody2footwrtworld_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
    ControlState::mutable_posbody2footwrtworld() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.ControlState.posBody2FootWrtWorld)
        return &_impl_.posbody2footwrtworld_;
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posbody2footwrtworld(int index) const {
        return _impl_.posbody2footwrtworld_.Get(index);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::posbody2footwrtworld(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.posBody2FootWrtWorld)
        return _internal_posbody2footwrtworld(index);
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_posbody2footwrtworld() {
        return _impl_.posbody2footwrtworld_.Add();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::add_posbody2footwrtworld() {
        ::dtproto::geometry_msgs::Point3d* _add = _internal_add_posbody2footwrtworld();
        // @@protoc_insertion_point(field_add:dtproto.quadip.ControlState.posBody2FootWrtWorld)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
    ControlState::posbody2footwrtworld() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.ControlState.posBody2FootWrtWorld)
        return _impl_.posbody2footwrtworld_;
    }

    // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
    inline int ControlState::_internal_velbody2footwrtworld_size() const {
        return _impl_.velbody2footwrtworld_.size();
    }
    inline int ControlState::velbody2footwrtworld_size() const {
        return _internal_velbody2footwrtworld_size();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velbody2footwrtworld(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.velBody2FootWrtWorld)
        return _impl_.velbody2footwrtworld_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
    ControlState::mutable_velbody2footwrtworld() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.ControlState.velBody2FootWrtWorld)
        return &_impl_.velbody2footwrtworld_;
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velbody2footwrtworld(int index) const {
        return _impl_.velbody2footwrtworld_.Get(index);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::velbody2footwrtworld(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.velBody2FootWrtWorld)
        return _internal_velbody2footwrtworld(index);
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_velbody2footwrtworld() {
        return _impl_.velbody2footwrtworld_.Add();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::add_velbody2footwrtworld() {
        ::dtproto::geometry_msgs::Point3d* _add = _internal_add_velbody2footwrtworld();
        // @@protoc_insertion_point(field_add:dtproto.quadip.ControlState.velBody2FootWrtWorld)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
    ControlState::velbody2footwrtworld() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.ControlState.velBody2FootWrtWorld)
        return _impl_.velbody2footwrtworld_;
    }

    // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
    inline int ControlState::_internal_posbody2footwrtbody_size() const {
        return _impl_.posbody2footwrtbody_.size();
    }
    inline int ControlState::posbody2footwrtbody_size() const {
        return _internal_posbody2footwrtbody_size();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posbody2footwrtbody(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.posBody2FootWrtBody)
        return _impl_.posbody2footwrtbody_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
    ControlState::mutable_posbody2footwrtbody() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.ControlState.posBody2FootWrtBody)
        return &_impl_.posbody2footwrtbody_;
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posbody2footwrtbody(int index) const {
        return _impl_.posbody2footwrtbody_.Get(index);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::posbody2footwrtbody(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.posBody2FootWrtBody)
        return _internal_posbody2footwrtbody(index);
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_posbody2footwrtbody() {
        return _impl_.posbody2footwrtbody_.Add();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::add_posbody2footwrtbody() {
        ::dtproto::geometry_msgs::Point3d* _add = _internal_add_posbody2footwrtbody();
        // @@protoc_insertion_point(field_add:dtproto.quadip.ControlState.posBody2FootWrtBody)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
    ControlState::posbody2footwrtbody() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.ControlState.posBody2FootWrtBody)
        return _impl_.posbody2footwrtbody_;
    }

    // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
    inline int ControlState::_internal_velbody2footwrtbody_size() const {
        return _impl_.velbody2footwrtbody_.size();
    }
    inline int ControlState::velbody2footwrtbody_size() const {
        return _internal_velbody2footwrtbody_size();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velbody2footwrtbody(int index) {
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.velBody2FootWrtBody)
        return _impl_.velbody2footwrtbody_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
    ControlState::mutable_velbody2footwrtbody() {
        // @@protoc_insertion_point(field_mutable_list:dtproto.quadip.ControlState.velBody2FootWrtBody)
        return &_impl_.velbody2footwrtbody_;
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velbody2footwrtbody(int index) const {
        return _impl_.velbody2footwrtbody_.Get(index);
    }
    inline const ::dtproto::geometry_msgs::Point3d& ControlState::velbody2footwrtbody(int index) const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.velBody2FootWrtBody)
        return _internal_velbody2footwrtbody(index);
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_velbody2footwrtbody() {
        return _impl_.velbody2footwrtbody_.Add();
    }
    inline ::dtproto::geometry_msgs::Point3d* ControlState::add_velbody2footwrtbody() {
        ::dtproto::geometry_msgs::Point3d* _add = _internal_add_velbody2footwrtbody();
        // @@protoc_insertion_point(field_add:dtproto.quadip.ControlState.velBody2FootWrtBody)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
    ControlState::velbody2footwrtbody() const {
        // @@protoc_insertion_point(field_list:dtproto.quadip.ControlState.velBody2FootWrtBody)
        return _impl_.velbody2footwrtbody_;
    }

    // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
    inline bool ControlState::_internal_has_rotbodywrtworld() const {
        return this != internal_default_instance() && _impl_.rotbodywrtworld_ != nullptr;
    }
    inline bool ControlState::has_rotbodywrtworld() const {
        return _internal_has_rotbodywrtworld();
    }
    inline const ::dtproto::geometry_msgs::Matrix3d& ControlState::_internal_rotbodywrtworld() const {
        const ::dtproto::geometry_msgs::Matrix3d* p = _impl_.rotbodywrtworld_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Matrix3d&>(
                   ::dtproto::geometry_msgs::_Matrix3d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Matrix3d& ControlState::rotbodywrtworld() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.rotBodyWrtWorld)
        return _internal_rotbodywrtworld();
    }
    inline void ControlState::unsafe_arena_set_allocated_rotbodywrtworld(
        ::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotbodywrtworld_);
        }
        _impl_.rotbodywrtworld_ = rotbodywrtworld;
        if (rotbodywrtworld) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.rotBodyWrtWorld)
    }
    inline ::dtproto::geometry_msgs::Matrix3d* ControlState::release_rotbodywrtworld() {

        ::dtproto::geometry_msgs::Matrix3d* temp = _impl_.rotbodywrtworld_;
        _impl_.rotbodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Matrix3d* ControlState::unsafe_arena_release_rotbodywrtworld() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.rotBodyWrtWorld)

        ::dtproto::geometry_msgs::Matrix3d* temp = _impl_.rotbodywrtworld_;
        _impl_.rotbodywrtworld_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Matrix3d* ControlState::_internal_mutable_rotbodywrtworld() {

        if (_impl_.rotbodywrtworld_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Matrix3d>(GetArenaForAllocation());
            _impl_.rotbodywrtworld_ = p;
        }
        return _impl_.rotbodywrtworld_;
    }
    inline ::dtproto::geometry_msgs::Matrix3d* ControlState::mutable_rotbodywrtworld() {
        ::dtproto::geometry_msgs::Matrix3d* _msg = _internal_mutable_rotbodywrtworld();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.rotBodyWrtWorld)
        return _msg;
    }
    inline void ControlState::set_allocated_rotbodywrtworld(::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotbodywrtworld_);
        }
        if (rotbodywrtworld) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotbodywrtworld));
            if (message_arena != submessage_arena) {
                rotbodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, rotbodywrtworld, submessage_arena);
            }

        } else {

        }
        _impl_.rotbodywrtworld_ = rotbodywrtworld;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.rotBodyWrtWorld)
    }

    // .dtproto.geometry_msgs.Vector4b contact = 16;
    inline bool ControlState::_internal_has_contact() const {
        return this != internal_default_instance() && _impl_.contact_ != nullptr;
    }
    inline bool ControlState::has_contact() const {
        return _internal_has_contact();
    }
    inline const ::dtproto::geometry_msgs::Vector4b& ControlState::_internal_contact() const {
        const ::dtproto::geometry_msgs::Vector4b* p = _impl_.contact_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4b&>(
                   ::dtproto::geometry_msgs::_Vector4b_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4b& ControlState::contact() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlState.contact)
        return _internal_contact();
    }
    inline void ControlState::unsafe_arena_set_allocated_contact(
        ::dtproto::geometry_msgs::Vector4b* contact) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contact_);
        }
        _impl_.contact_ = contact;
        if (contact) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlState.contact)
    }
    inline ::dtproto::geometry_msgs::Vector4b* ControlState::release_contact() {

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.contact_;
        _impl_.contact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* ControlState::unsafe_arena_release_contact() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlState.contact)

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.contact_;
        _impl_.contact_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* ControlState::_internal_mutable_contact() {

        if (_impl_.contact_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4b>(GetArenaForAllocation());
            _impl_.contact_ = p;
        }
        return _impl_.contact_;
    }
    inline ::dtproto::geometry_msgs::Vector4b* ControlState::mutable_contact() {
        ::dtproto::geometry_msgs::Vector4b* _msg = _internal_mutable_contact();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlState.contact)
        return _msg;
    }
    inline void ControlState::set_allocated_contact(::dtproto::geometry_msgs::Vector4b* contact) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contact_);
        }
        if (contact) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact));
            if (message_arena != submessage_arena) {
                contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, contact, submessage_arena);
            }

        } else {

        }
        _impl_.contact_ = contact;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlState.contact)
    }

    // -------------------------------------------------------------------

    // ControlStateTimeStamped

    // .dtproto.std_msgs.Header header = 1;
    inline bool ControlStateTimeStamped::_internal_has_header() const {
        return this != internal_default_instance() && _impl_.header_ != nullptr;
    }
    inline bool ControlStateTimeStamped::has_header() const {
        return _internal_has_header();
    }
    inline const ::dtproto::std_msgs::Header& ControlStateTimeStamped::_internal_header() const {
        const ::dtproto::std_msgs::Header* p = _impl_.header_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
                   ::dtproto::std_msgs::_Header_default_instance_);
    }
    inline const ::dtproto::std_msgs::Header& ControlStateTimeStamped::header() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlStateTimeStamped.header)
        return _internal_header();
    }
    inline void ControlStateTimeStamped::unsafe_arena_set_allocated_header(
        ::dtproto::std_msgs::Header* header) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        _impl_.header_ = header;
        if (header) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlStateTimeStamped.header)
    }
    inline ::dtproto::std_msgs::Header* ControlStateTimeStamped::release_header() {

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::std_msgs::Header* ControlStateTimeStamped::unsafe_arena_release_header() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlStateTimeStamped.header)

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
        return temp;
    }
    inline ::dtproto::std_msgs::Header* ControlStateTimeStamped::_internal_mutable_header() {

        if (_impl_.header_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
            _impl_.header_ = p;
        }
        return _impl_.header_;
    }
    inline ::dtproto::std_msgs::Header* ControlStateTimeStamped::mutable_header() {
        ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlStateTimeStamped.header)
        return _msg;
    }
    inline void ControlStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        if (header) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
            if (message_arena != submessage_arena) {
                header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, header, submessage_arena);
            }

        } else {

        }
        _impl_.header_ = header;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlStateTimeStamped.header)
    }

    // .dtproto.quadip.ControlState state = 2;
    inline bool ControlStateTimeStamped::_internal_has_state() const {
        return this != internal_default_instance() && _impl_.state_ != nullptr;
    }
    inline bool ControlStateTimeStamped::has_state() const {
        return _internal_has_state();
    }
    inline void ControlStateTimeStamped::clear_state() {
        if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
            delete _impl_.state_;
        }
        _impl_.state_ = nullptr;
    }
    inline const ::dtproto::quadip::ControlState& ControlStateTimeStamped::_internal_state() const {
        const ::dtproto::quadip::ControlState* p = _impl_.state_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::ControlState&>(
                   ::dtproto::quadip::_ControlState_default_instance_);
    }
    inline const ::dtproto::quadip::ControlState& ControlStateTimeStamped::state() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.ControlStateTimeStamped.state)
        return _internal_state();
    }
    inline void ControlStateTimeStamped::unsafe_arena_set_allocated_state(
        ::dtproto::quadip::ControlState* state) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
        }
        _impl_.state_ = state;
        if (state) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.ControlStateTimeStamped.state)
    }
    inline ::dtproto::quadip::ControlState* ControlStateTimeStamped::release_state() {

        ::dtproto::quadip::ControlState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::ControlState* ControlStateTimeStamped::unsafe_arena_release_state() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.ControlStateTimeStamped.state)

        ::dtproto::quadip::ControlState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::ControlState* ControlStateTimeStamped::_internal_mutable_state() {

        if (_impl_.state_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::ControlState>(GetArenaForAllocation());
            _impl_.state_ = p;
        }
        return _impl_.state_;
    }
    inline ::dtproto::quadip::ControlState* ControlStateTimeStamped::mutable_state() {
        ::dtproto::quadip::ControlState* _msg = _internal_mutable_state();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.ControlStateTimeStamped.state)
        return _msg;
    }
    inline void ControlStateTimeStamped::set_allocated_state(::dtproto::quadip::ControlState* state) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.state_;
        }
        if (state) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
            if (message_arena != submessage_arena) {
                state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, state, submessage_arena);
            }

        } else {

        }
        _impl_.state_ = state;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.ControlStateTimeStamped.state)
    }

    // -------------------------------------------------------------------

    // CpgState

    // .dtproto.geometry_msgs.Vector2d periods = 1;
    inline bool CpgState::_internal_has_periods() const {
        return this != internal_default_instance() && _impl_.periods_ != nullptr;
    }
    inline bool CpgState::has_periods() const {
        return _internal_has_periods();
    }
    inline const ::dtproto::geometry_msgs::Vector2d& CpgState::_internal_periods() const {
        const ::dtproto::geometry_msgs::Vector2d* p = _impl_.periods_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector2d&>(
                   ::dtproto::geometry_msgs::_Vector2d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector2d& CpgState::periods() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.periods)
        return _internal_periods();
    }
    inline void CpgState::unsafe_arena_set_allocated_periods(
        ::dtproto::geometry_msgs::Vector2d* periods) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.periods_);
        }
        _impl_.periods_ = periods;
        if (periods) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.periods)
    }
    inline ::dtproto::geometry_msgs::Vector2d* CpgState::release_periods() {

        ::dtproto::geometry_msgs::Vector2d* temp = _impl_.periods_;
        _impl_.periods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector2d* CpgState::unsafe_arena_release_periods() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.periods)

        ::dtproto::geometry_msgs::Vector2d* temp = _impl_.periods_;
        _impl_.periods_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector2d* CpgState::_internal_mutable_periods() {

        if (_impl_.periods_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector2d>(GetArenaForAllocation());
            _impl_.periods_ = p;
        }
        return _impl_.periods_;
    }
    inline ::dtproto::geometry_msgs::Vector2d* CpgState::mutable_periods() {
        ::dtproto::geometry_msgs::Vector2d* _msg = _internal_mutable_periods();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.periods)
        return _msg;
    }
    inline void CpgState::set_allocated_periods(::dtproto::geometry_msgs::Vector2d* periods) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.periods_);
        }
        if (periods) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(periods));
            if (message_arena != submessage_arena) {
                periods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, periods, submessage_arena);
            }

        } else {

        }
        _impl_.periods_ = periods;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.periods)
    }

    // .dtproto.geometry_msgs.Vector4d phases = 2;
    inline bool CpgState::_internal_has_phases() const {
        return this != internal_default_instance() && _impl_.phases_ != nullptr;
    }
    inline bool CpgState::has_phases() const {
        return _internal_has_phases();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phases() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phases_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phases() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phases)
        return _internal_phases();
    }
    inline void CpgState::unsafe_arena_set_allocated_phases(
        ::dtproto::geometry_msgs::Vector4d* phases) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phases_);
        }
        _impl_.phases_ = phases;
        if (phases) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phases)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phases() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phases_;
        _impl_.phases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phases() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phases)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phases_;
        _impl_.phases_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phases() {

        if (_impl_.phases_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phases_ = p;
        }
        return _impl_.phases_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phases() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phases();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phases)
        return _msg;
    }
    inline void CpgState::set_allocated_phases(::dtproto::geometry_msgs::Vector4d* phases) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phases_);
        }
        if (phases) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phases));
            if (message_arena != submessage_arena) {
                phases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phases, submessage_arena);
            }

        } else {

        }
        _impl_.phases_ = phases;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phases)
    }

    // .dtproto.geometry_msgs.Vector4d phi = 3;
    inline bool CpgState::_internal_has_phi() const {
        return this != internal_default_instance() && _impl_.phi_ != nullptr;
    }
    inline bool CpgState::has_phi() const {
        return _internal_has_phi();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phi() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phi_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phi() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phi)
        return _internal_phi();
    }
    inline void CpgState::unsafe_arena_set_allocated_phi(
        ::dtproto::geometry_msgs::Vector4d* phi) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phi_);
        }
        _impl_.phi_ = phi;
        if (phi) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phi)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phi() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phi_;
        _impl_.phi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phi() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phi)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phi_;
        _impl_.phi_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phi() {

        if (_impl_.phi_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phi_ = p;
        }
        return _impl_.phi_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phi() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phi();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phi)
        return _msg;
    }
    inline void CpgState::set_allocated_phi(::dtproto::geometry_msgs::Vector4d* phi) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phi_);
        }
        if (phi) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi));
            if (message_arena != submessage_arena) {
                phi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phi, submessage_arena);
            }

        } else {

        }
        _impl_.phi_ = phi;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phi)
    }

    // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
    inline bool CpgState::_internal_has_phitogo() const {
        return this != internal_default_instance() && _impl_.phitogo_ != nullptr;
    }
    inline bool CpgState::has_phitogo() const {
        return _internal_has_phitogo();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phitogo() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phitogo_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phitogo() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phiToGo)
        return _internal_phitogo();
    }
    inline void CpgState::unsafe_arena_set_allocated_phitogo(
        ::dtproto::geometry_msgs::Vector4d* phitogo) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitogo_);
        }
        _impl_.phitogo_ = phitogo;
        if (phitogo) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phiToGo)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phitogo() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitogo_;
        _impl_.phitogo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phitogo() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phiToGo)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitogo_;
        _impl_.phitogo_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phitogo() {

        if (_impl_.phitogo_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phitogo_ = p;
        }
        return _impl_.phitogo_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phitogo() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phitogo();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phiToGo)
        return _msg;
    }
    inline void CpgState::set_allocated_phitogo(::dtproto::geometry_msgs::Vector4d* phitogo) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitogo_);
        }
        if (phitogo) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phitogo));
            if (message_arena != submessage_arena) {
                phitogo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phitogo, submessage_arena);
            }

        } else {

        }
        _impl_.phitogo_ = phitogo;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phiToGo)
    }

    // .dtproto.geometry_msgs.Vector4d phiSt = 5;
    inline bool CpgState::_internal_has_phist() const {
        return this != internal_default_instance() && _impl_.phist_ != nullptr;
    }
    inline bool CpgState::has_phist() const {
        return _internal_has_phist();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phist() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phist_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phist() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phiSt)
        return _internal_phist();
    }
    inline void CpgState::unsafe_arena_set_allocated_phist(
        ::dtproto::geometry_msgs::Vector4d* phist) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phist_);
        }
        _impl_.phist_ = phist;
        if (phist) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phiSt)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phist() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phist_;
        _impl_.phist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phist() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phiSt)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phist_;
        _impl_.phist_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phist() {

        if (_impl_.phist_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phist_ = p;
        }
        return _impl_.phist_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phist() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phist();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phiSt)
        return _msg;
    }
    inline void CpgState::set_allocated_phist(::dtproto::geometry_msgs::Vector4d* phist) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phist_);
        }
        if (phist) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phist));
            if (message_arena != submessage_arena) {
                phist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phist, submessage_arena);
            }

        } else {

        }
        _impl_.phist_ = phist;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phiSt)
    }

    // .dtproto.geometry_msgs.Vector4d phiSw = 6;
    inline bool CpgState::_internal_has_phisw() const {
        return this != internal_default_instance() && _impl_.phisw_ != nullptr;
    }
    inline bool CpgState::has_phisw() const {
        return _internal_has_phisw();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phisw() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phisw_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phisw() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phiSw)
        return _internal_phisw();
    }
    inline void CpgState::unsafe_arena_set_allocated_phisw(
        ::dtproto::geometry_msgs::Vector4d* phisw) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phisw_);
        }
        _impl_.phisw_ = phisw;
        if (phisw) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phiSw)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phisw() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phisw_;
        _impl_.phisw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phisw() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phiSw)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phisw_;
        _impl_.phisw_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phisw() {

        if (_impl_.phisw_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phisw_ = p;
        }
        return _impl_.phisw_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phisw() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phisw();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phiSw)
        return _msg;
    }
    inline void CpgState::set_allocated_phisw(::dtproto::geometry_msgs::Vector4d* phisw) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phisw_);
        }
        if (phisw) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phisw));
            if (message_arena != submessage_arena) {
                phisw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phisw, submessage_arena);
            }

        } else {

        }
        _impl_.phisw_ = phisw;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phiSw)
    }

    // .dtproto.geometry_msgs.Vector4d cpg = 7;
    inline bool CpgState::_internal_has_cpg() const {
        return this != internal_default_instance() && _impl_.cpg_ != nullptr;
    }
    inline bool CpgState::has_cpg() const {
        return _internal_has_cpg();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_cpg() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.cpg_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::cpg() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.cpg)
        return _internal_cpg();
    }
    inline void CpgState::unsafe_arena_set_allocated_cpg(
        ::dtproto::geometry_msgs::Vector4d* cpg) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpg_);
        }
        _impl_.cpg_ = cpg;
        if (cpg) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.cpg)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_cpg() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.cpg_;
        _impl_.cpg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_cpg() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.cpg)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.cpg_;
        _impl_.cpg_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_cpg() {

        if (_impl_.cpg_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.cpg_ = p;
        }
        return _impl_.cpg_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_cpg() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_cpg();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.cpg)
        return _msg;
    }
    inline void CpgState::set_allocated_cpg(::dtproto::geometry_msgs::Vector4d* cpg) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpg_);
        }
        if (cpg) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpg));
            if (message_arena != submessage_arena) {
                cpg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, cpg, submessage_arena);
            }

        } else {

        }
        _impl_.cpg_ = cpg;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.cpg)
    }

    // .dtproto.geometry_msgs.Vector4b contact = 8;
    inline bool CpgState::_internal_has_contact() const {
        return this != internal_default_instance() && _impl_.contact_ != nullptr;
    }
    inline bool CpgState::has_contact() const {
        return _internal_has_contact();
    }
    inline const ::dtproto::geometry_msgs::Vector4b& CpgState::_internal_contact() const {
        const ::dtproto::geometry_msgs::Vector4b* p = _impl_.contact_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4b&>(
                   ::dtproto::geometry_msgs::_Vector4b_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4b& CpgState::contact() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.contact)
        return _internal_contact();
    }
    inline void CpgState::unsafe_arena_set_allocated_contact(
        ::dtproto::geometry_msgs::Vector4b* contact) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contact_);
        }
        _impl_.contact_ = contact;
        if (contact) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.contact)
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::release_contact() {

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.contact_;
        _impl_.contact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::unsafe_arena_release_contact() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.contact)

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.contact_;
        _impl_.contact_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::_internal_mutable_contact() {

        if (_impl_.contact_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4b>(GetArenaForAllocation());
            _impl_.contact_ = p;
        }
        return _impl_.contact_;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::mutable_contact() {
        ::dtproto::geometry_msgs::Vector4b* _msg = _internal_mutable_contact();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.contact)
        return _msg;
    }
    inline void CpgState::set_allocated_contact(::dtproto::geometry_msgs::Vector4b* contact) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contact_);
        }
        if (contact) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact));
            if (message_arena != submessage_arena) {
                contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, contact, submessage_arena);
            }

        } else {

        }
        _impl_.contact_ = contact;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.contact)
    }

    // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
    inline bool CpgState::_internal_has_phasechangeflag() const {
        return this != internal_default_instance() && _impl_.phasechangeflag_ != nullptr;
    }
    inline bool CpgState::has_phasechangeflag() const {
        return _internal_has_phasechangeflag();
    }
    inline const ::dtproto::geometry_msgs::Vector4b& CpgState::_internal_phasechangeflag() const {
        const ::dtproto::geometry_msgs::Vector4b* p = _impl_.phasechangeflag_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4b&>(
                   ::dtproto::geometry_msgs::_Vector4b_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4b& CpgState::phasechangeflag() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phaseChangeFlag)
        return _internal_phasechangeflag();
    }
    inline void CpgState::unsafe_arena_set_allocated_phasechangeflag(
        ::dtproto::geometry_msgs::Vector4b* phasechangeflag) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasechangeflag_);
        }
        _impl_.phasechangeflag_ = phasechangeflag;
        if (phasechangeflag) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phaseChangeFlag)
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::release_phasechangeflag() {

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.phasechangeflag_;
        _impl_.phasechangeflag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::unsafe_arena_release_phasechangeflag() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phaseChangeFlag)

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.phasechangeflag_;
        _impl_.phasechangeflag_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::_internal_mutable_phasechangeflag() {

        if (_impl_.phasechangeflag_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4b>(GetArenaForAllocation());
            _impl_.phasechangeflag_ = p;
        }
        return _impl_.phasechangeflag_;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::mutable_phasechangeflag() {
        ::dtproto::geometry_msgs::Vector4b* _msg = _internal_mutable_phasechangeflag();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phaseChangeFlag)
        return _msg;
    }
    inline void CpgState::set_allocated_phasechangeflag(::dtproto::geometry_msgs::Vector4b* phasechangeflag) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasechangeflag_);
        }
        if (phasechangeflag) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasechangeflag));
            if (message_arena != submessage_arena) {
                phasechangeflag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phasechangeflag, submessage_arena);
            }

        } else {

        }
        _impl_.phasechangeflag_ = phasechangeflag;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phaseChangeFlag)
    }

    // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
    inline bool CpgState::_internal_has_periodchangeflag() const {
        return this != internal_default_instance() && _impl_.periodchangeflag_ != nullptr;
    }
    inline bool CpgState::has_periodchangeflag() const {
        return _internal_has_periodchangeflag();
    }
    inline const ::dtproto::geometry_msgs::Vector4b& CpgState::_internal_periodchangeflag() const {
        const ::dtproto::geometry_msgs::Vector4b* p = _impl_.periodchangeflag_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4b&>(
                   ::dtproto::geometry_msgs::_Vector4b_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4b& CpgState::periodchangeflag() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.periodChangeFlag)
        return _internal_periodchangeflag();
    }
    inline void CpgState::unsafe_arena_set_allocated_periodchangeflag(
        ::dtproto::geometry_msgs::Vector4b* periodchangeflag) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.periodchangeflag_);
        }
        _impl_.periodchangeflag_ = periodchangeflag;
        if (periodchangeflag) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.periodChangeFlag)
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::release_periodchangeflag() {

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.periodchangeflag_;
        _impl_.periodchangeflag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::unsafe_arena_release_periodchangeflag() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.periodChangeFlag)

        ::dtproto::geometry_msgs::Vector4b* temp = _impl_.periodchangeflag_;
        _impl_.periodchangeflag_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::_internal_mutable_periodchangeflag() {

        if (_impl_.periodchangeflag_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4b>(GetArenaForAllocation());
            _impl_.periodchangeflag_ = p;
        }
        return _impl_.periodchangeflag_;
    }
    inline ::dtproto::geometry_msgs::Vector4b* CpgState::mutable_periodchangeflag() {
        ::dtproto::geometry_msgs::Vector4b* _msg = _internal_mutable_periodchangeflag();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.periodChangeFlag)
        return _msg;
    }
    inline void CpgState::set_allocated_periodchangeflag(::dtproto::geometry_msgs::Vector4b* periodchangeflag) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.periodchangeflag_);
        }
        if (periodchangeflag) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(periodchangeflag));
            if (message_arena != submessage_arena) {
                periodchangeflag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, periodchangeflag, submessage_arena);
            }

        } else {

        }
        _impl_.periodchangeflag_ = periodchangeflag;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.periodChangeFlag)
    }

    // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
    inline bool CpgState::_internal_has_phasediff() const {
        return this != internal_default_instance() && _impl_.phasediff_ != nullptr;
    }
    inline bool CpgState::has_phasediff() const {
        return _internal_has_phasediff();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phasediff() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phasediff_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phasediff() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phaseDiff)
        return _internal_phasediff();
    }
    inline void CpgState::unsafe_arena_set_allocated_phasediff(
        ::dtproto::geometry_msgs::Vector4d* phasediff) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasediff_);
        }
        _impl_.phasediff_ = phasediff;
        if (phasediff) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phaseDiff)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phasediff() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phasediff_;
        _impl_.phasediff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phasediff() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phaseDiff)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phasediff_;
        _impl_.phasediff_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phasediff() {

        if (_impl_.phasediff_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phasediff_ = p;
        }
        return _impl_.phasediff_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phasediff() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phasediff();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phaseDiff)
        return _msg;
    }
    inline void CpgState::set_allocated_phasediff(::dtproto::geometry_msgs::Vector4d* phasediff) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phasediff_);
        }
        if (phasediff) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phasediff));
            if (message_arena != submessage_arena) {
                phasediff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phasediff, submessage_arena);
            }

        } else {

        }
        _impl_.phasediff_ = phasediff;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phaseDiff)
    }

    // .dtproto.geometry_msgs.Vector4d phiTran = 12;
    inline bool CpgState::_internal_has_phitran() const {
        return this != internal_default_instance() && _impl_.phitran_ != nullptr;
    }
    inline bool CpgState::has_phitran() const {
        return _internal_has_phitran();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phitran() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phitran_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phitran() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phiTran)
        return _internal_phitran();
    }
    inline void CpgState::unsafe_arena_set_allocated_phitran(
        ::dtproto::geometry_msgs::Vector4d* phitran) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitran_);
        }
        _impl_.phitran_ = phitran;
        if (phitran) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phiTran)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phitran() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitran_;
        _impl_.phitran_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phitran() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phiTran)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitran_;
        _impl_.phitran_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phitran() {

        if (_impl_.phitran_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phitran_ = p;
        }
        return _impl_.phitran_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phitran() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phitran();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phiTran)
        return _msg;
    }
    inline void CpgState::set_allocated_phitran(::dtproto::geometry_msgs::Vector4d* phitran) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitran_);
        }
        if (phitran) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phitran));
            if (message_arena != submessage_arena) {
                phitran = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phitran, submessage_arena);
            }

        } else {

        }
        _impl_.phitran_ = phitran;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phiTran)
    }

    // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
    inline bool CpgState::_internal_has_phitranst() const {
        return this != internal_default_instance() && _impl_.phitranst_ != nullptr;
    }
    inline bool CpgState::has_phitranst() const {
        return _internal_has_phitranst();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phitranst() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phitranst_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phitranst() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phiTranSt)
        return _internal_phitranst();
    }
    inline void CpgState::unsafe_arena_set_allocated_phitranst(
        ::dtproto::geometry_msgs::Vector4d* phitranst) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitranst_);
        }
        _impl_.phitranst_ = phitranst;
        if (phitranst) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phiTranSt)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phitranst() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitranst_;
        _impl_.phitranst_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phitranst() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phiTranSt)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitranst_;
        _impl_.phitranst_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phitranst() {

        if (_impl_.phitranst_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phitranst_ = p;
        }
        return _impl_.phitranst_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phitranst() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phitranst();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phiTranSt)
        return _msg;
    }
    inline void CpgState::set_allocated_phitranst(::dtproto::geometry_msgs::Vector4d* phitranst) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitranst_);
        }
        if (phitranst) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phitranst));
            if (message_arena != submessage_arena) {
                phitranst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phitranst, submessage_arena);
            }

        } else {

        }
        _impl_.phitranst_ = phitranst;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phiTranSt)
    }

    // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
    inline bool CpgState::_internal_has_phitransw() const {
        return this != internal_default_instance() && _impl_.phitransw_ != nullptr;
    }
    inline bool CpgState::has_phitransw() const {
        return _internal_has_phitransw();
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::_internal_phitransw() const {
        const ::dtproto::geometry_msgs::Vector4d* p = _impl_.phitransw_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4d&>(
                   ::dtproto::geometry_msgs::_Vector4d_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4d& CpgState::phitransw() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.phiTranSw)
        return _internal_phitransw();
    }
    inline void CpgState::unsafe_arena_set_allocated_phitransw(
        ::dtproto::geometry_msgs::Vector4d* phitransw) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitransw_);
        }
        _impl_.phitransw_ = phitransw;
        if (phitransw) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.phiTranSw)
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::release_phitransw() {

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitransw_;
        _impl_.phitransw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::unsafe_arena_release_phitransw() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.phiTranSw)

        ::dtproto::geometry_msgs::Vector4d* temp = _impl_.phitransw_;
        _impl_.phitransw_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::_internal_mutable_phitransw() {

        if (_impl_.phitransw_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4d>(GetArenaForAllocation());
            _impl_.phitransw_ = p;
        }
        return _impl_.phitransw_;
    }
    inline ::dtproto::geometry_msgs::Vector4d* CpgState::mutable_phitransw() {
        ::dtproto::geometry_msgs::Vector4d* _msg = _internal_mutable_phitransw();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.phiTranSw)
        return _msg;
    }
    inline void CpgState::set_allocated_phitransw(::dtproto::geometry_msgs::Vector4d* phitransw) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phitransw_);
        }
        if (phitransw) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phitransw));
            if (message_arena != submessage_arena) {
                phitransw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, phitransw, submessage_arena);
            }

        } else {

        }
        _impl_.phitransw_ = phitransw;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.phiTranSw)
    }

    // .dtproto.geometry_msgs.Vector4i32 step = 15;
    inline bool CpgState::_internal_has_step() const {
        return this != internal_default_instance() && _impl_.step_ != nullptr;
    }
    inline bool CpgState::has_step() const {
        return _internal_has_step();
    }
    inline const ::dtproto::geometry_msgs::Vector4i32& CpgState::_internal_step() const {
        const ::dtproto::geometry_msgs::Vector4i32* p = _impl_.step_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4i32&>(
                   ::dtproto::geometry_msgs::_Vector4i32_default_instance_);
    }
    inline const ::dtproto::geometry_msgs::Vector4i32& CpgState::step() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.step)
        return _internal_step();
    }
    inline void CpgState::unsafe_arena_set_allocated_step(
        ::dtproto::geometry_msgs::Vector4i32* step) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.step_);
        }
        _impl_.step_ = step;
        if (step) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgState.step)
    }
    inline ::dtproto::geometry_msgs::Vector4i32* CpgState::release_step() {

        ::dtproto::geometry_msgs::Vector4i32* temp = _impl_.step_;
        _impl_.step_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4i32* CpgState::unsafe_arena_release_step() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgState.step)

        ::dtproto::geometry_msgs::Vector4i32* temp = _impl_.step_;
        _impl_.step_ = nullptr;
        return temp;
    }
    inline ::dtproto::geometry_msgs::Vector4i32* CpgState::_internal_mutable_step() {

        if (_impl_.step_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4i32>(GetArenaForAllocation());
            _impl_.step_ = p;
        }
        return _impl_.step_;
    }
    inline ::dtproto::geometry_msgs::Vector4i32* CpgState::mutable_step() {
        ::dtproto::geometry_msgs::Vector4i32* _msg = _internal_mutable_step();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgState.step)
        return _msg;
    }
    inline void CpgState::set_allocated_step(::dtproto::geometry_msgs::Vector4i32* step) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.step_);
        }
        if (step) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(step));
            if (message_arena != submessage_arena) {
                step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, step, submessage_arena);
            }

        } else {

        }
        _impl_.step_ = step;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgState.step)
    }

    // double dt = 16;
    inline void CpgState::clear_dt() {
        _impl_.dt_ = 0;
    }
    inline double CpgState::_internal_dt() const {
        return _impl_.dt_;
    }
    inline double CpgState::dt() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.dt)
        return _internal_dt();
    }
    inline void CpgState::_internal_set_dt(double value) {

        _impl_.dt_ = value;
    }
    inline void CpgState::set_dt(double value) {
        _internal_set_dt(value);
        // @@protoc_insertion_point(field_set:dtproto.quadip.CpgState.dt)
    }

    // bool air = 17;
    inline void CpgState::clear_air() {
        _impl_.air_ = false;
    }
    inline bool CpgState::_internal_air() const {
        return _impl_.air_;
    }
    inline bool CpgState::air() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgState.air)
        return _internal_air();
    }
    inline void CpgState::_internal_set_air(bool value) {

        _impl_.air_ = value;
    }
    inline void CpgState::set_air(bool value) {
        _internal_set_air(value);
        // @@protoc_insertion_point(field_set:dtproto.quadip.CpgState.air)
    }

    // -------------------------------------------------------------------

    // CpgStateTimeStamped

    // .dtproto.std_msgs.Header header = 1;
    inline bool CpgStateTimeStamped::_internal_has_header() const {
        return this != internal_default_instance() && _impl_.header_ != nullptr;
    }
    inline bool CpgStateTimeStamped::has_header() const {
        return _internal_has_header();
    }
    inline const ::dtproto::std_msgs::Header& CpgStateTimeStamped::_internal_header() const {
        const ::dtproto::std_msgs::Header* p = _impl_.header_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
                   ::dtproto::std_msgs::_Header_default_instance_);
    }
    inline const ::dtproto::std_msgs::Header& CpgStateTimeStamped::header() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgStateTimeStamped.header)
        return _internal_header();
    }
    inline void CpgStateTimeStamped::unsafe_arena_set_allocated_header(
        ::dtproto::std_msgs::Header* header) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        _impl_.header_ = header;
        if (header) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgStateTimeStamped.header)
    }
    inline ::dtproto::std_msgs::Header* CpgStateTimeStamped::release_header() {

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::std_msgs::Header* CpgStateTimeStamped::unsafe_arena_release_header() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgStateTimeStamped.header)

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
        return temp;
    }
    inline ::dtproto::std_msgs::Header* CpgStateTimeStamped::_internal_mutable_header() {

        if (_impl_.header_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
            _impl_.header_ = p;
        }
        return _impl_.header_;
    }
    inline ::dtproto::std_msgs::Header* CpgStateTimeStamped::mutable_header() {
        ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgStateTimeStamped.header)
        return _msg;
    }
    inline void CpgStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        if (header) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
            if (message_arena != submessage_arena) {
                header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, header, submessage_arena);
            }

        } else {

        }
        _impl_.header_ = header;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgStateTimeStamped.header)
    }

    // .dtproto.quadip.CpgState state = 2;
    inline bool CpgStateTimeStamped::_internal_has_state() const {
        return this != internal_default_instance() && _impl_.state_ != nullptr;
    }
    inline bool CpgStateTimeStamped::has_state() const {
        return _internal_has_state();
    }
    inline void CpgStateTimeStamped::clear_state() {
        if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
            delete _impl_.state_;
        }
        _impl_.state_ = nullptr;
    }
    inline const ::dtproto::quadip::CpgState& CpgStateTimeStamped::_internal_state() const {
        const ::dtproto::quadip::CpgState* p = _impl_.state_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::CpgState&>(
                   ::dtproto::quadip::_CpgState_default_instance_);
    }
    inline const ::dtproto::quadip::CpgState& CpgStateTimeStamped::state() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.CpgStateTimeStamped.state)
        return _internal_state();
    }
    inline void CpgStateTimeStamped::unsafe_arena_set_allocated_state(
        ::dtproto::quadip::CpgState* state) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
        }
        _impl_.state_ = state;
        if (state) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.CpgStateTimeStamped.state)
    }
    inline ::dtproto::quadip::CpgState* CpgStateTimeStamped::release_state() {

        ::dtproto::quadip::CpgState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::CpgState* CpgStateTimeStamped::unsafe_arena_release_state() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.CpgStateTimeStamped.state)

        ::dtproto::quadip::CpgState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::CpgState* CpgStateTimeStamped::_internal_mutable_state() {

        if (_impl_.state_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::CpgState>(GetArenaForAllocation());
            _impl_.state_ = p;
        }
        return _impl_.state_;
    }
    inline ::dtproto::quadip::CpgState* CpgStateTimeStamped::mutable_state() {
        ::dtproto::quadip::CpgState* _msg = _internal_mutable_state();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.CpgStateTimeStamped.state)
        return _msg;
    }
    inline void CpgStateTimeStamped::set_allocated_state(::dtproto::quadip::CpgState* state) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.state_;
        }
        if (state) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
            if (message_arena != submessage_arena) {
                state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, state, submessage_arena);
            }

        } else {

        }
        _impl_.state_ = state;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.CpgStateTimeStamped.state)
    }

    // -------------------------------------------------------------------

    // QuadIpState

    // .dtproto.quadip.JointState jointState = 1;
    inline bool QuadIpState::_internal_has_jointstate() const {
        return this != internal_default_instance() && _impl_.jointstate_ != nullptr;
    }
    inline bool QuadIpState::has_jointstate() const {
        return _internal_has_jointstate();
    }
    inline void QuadIpState::clear_jointstate() {
        if (GetArenaForAllocation() == nullptr && _impl_.jointstate_ != nullptr) {
            delete _impl_.jointstate_;
        }
        _impl_.jointstate_ = nullptr;
    }
    inline const ::dtproto::quadip::JointState& QuadIpState::_internal_jointstate() const {
        const ::dtproto::quadip::JointState* p = _impl_.jointstate_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::JointState&>(
                   ::dtproto::quadip::_JointState_default_instance_);
    }
    inline const ::dtproto::quadip::JointState& QuadIpState::jointstate() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.QuadIpState.jointState)
        return _internal_jointstate();
    }
    inline void QuadIpState::unsafe_arena_set_allocated_jointstate(
        ::dtproto::quadip::JointState* jointstate) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointstate_);
        }
        _impl_.jointstate_ = jointstate;
        if (jointstate) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.QuadIpState.jointState)
    }
    inline ::dtproto::quadip::JointState* QuadIpState::release_jointstate() {

        ::dtproto::quadip::JointState* temp = _impl_.jointstate_;
        _impl_.jointstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::JointState* QuadIpState::unsafe_arena_release_jointstate() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.QuadIpState.jointState)

        ::dtproto::quadip::JointState* temp = _impl_.jointstate_;
        _impl_.jointstate_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::JointState* QuadIpState::_internal_mutable_jointstate() {

        if (_impl_.jointstate_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::JointState>(GetArenaForAllocation());
            _impl_.jointstate_ = p;
        }
        return _impl_.jointstate_;
    }
    inline ::dtproto::quadip::JointState* QuadIpState::mutable_jointstate() {
        ::dtproto::quadip::JointState* _msg = _internal_mutable_jointstate();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.QuadIpState.jointState)
        return _msg;
    }
    inline void QuadIpState::set_allocated_jointstate(::dtproto::quadip::JointState* jointstate) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.jointstate_;
        }
        if (jointstate) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(jointstate);
            if (message_arena != submessage_arena) {
                jointstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, jointstate, submessage_arena);
            }

        } else {

        }
        _impl_.jointstate_ = jointstate;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.QuadIpState.jointState)
    }

    // .dtproto.quadip.ControlState controlStateDesired = 2;
    inline bool QuadIpState::_internal_has_controlstatedesired() const {
        return this != internal_default_instance() && _impl_.controlstatedesired_ != nullptr;
    }
    inline bool QuadIpState::has_controlstatedesired() const {
        return _internal_has_controlstatedesired();
    }
    inline void QuadIpState::clear_controlstatedesired() {
        if (GetArenaForAllocation() == nullptr && _impl_.controlstatedesired_ != nullptr) {
            delete _impl_.controlstatedesired_;
        }
        _impl_.controlstatedesired_ = nullptr;
    }
    inline const ::dtproto::quadip::ControlState& QuadIpState::_internal_controlstatedesired() const {
        const ::dtproto::quadip::ControlState* p = _impl_.controlstatedesired_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::ControlState&>(
                   ::dtproto::quadip::_ControlState_default_instance_);
    }
    inline const ::dtproto::quadip::ControlState& QuadIpState::controlstatedesired() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.QuadIpState.controlStateDesired)
        return _internal_controlstatedesired();
    }
    inline void QuadIpState::unsafe_arena_set_allocated_controlstatedesired(
        ::dtproto::quadip::ControlState* controlstatedesired) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlstatedesired_);
        }
        _impl_.controlstatedesired_ = controlstatedesired;
        if (controlstatedesired) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.QuadIpState.controlStateDesired)
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::release_controlstatedesired() {

        ::dtproto::quadip::ControlState* temp = _impl_.controlstatedesired_;
        _impl_.controlstatedesired_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::unsafe_arena_release_controlstatedesired() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.QuadIpState.controlStateDesired)

        ::dtproto::quadip::ControlState* temp = _impl_.controlstatedesired_;
        _impl_.controlstatedesired_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::_internal_mutable_controlstatedesired() {

        if (_impl_.controlstatedesired_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::ControlState>(GetArenaForAllocation());
            _impl_.controlstatedesired_ = p;
        }
        return _impl_.controlstatedesired_;
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::mutable_controlstatedesired() {
        ::dtproto::quadip::ControlState* _msg = _internal_mutable_controlstatedesired();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.QuadIpState.controlStateDesired)
        return _msg;
    }
    inline void QuadIpState::set_allocated_controlstatedesired(::dtproto::quadip::ControlState* controlstatedesired) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.controlstatedesired_;
        }
        if (controlstatedesired) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(controlstatedesired);
            if (message_arena != submessage_arena) {
                controlstatedesired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, controlstatedesired, submessage_arena);
            }

        } else {

        }
        _impl_.controlstatedesired_ = controlstatedesired;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.QuadIpState.controlStateDesired)
    }

    // .dtproto.quadip.ControlState controlStateActual = 3;
    inline bool QuadIpState::_internal_has_controlstateactual() const {
        return this != internal_default_instance() && _impl_.controlstateactual_ != nullptr;
    }
    inline bool QuadIpState::has_controlstateactual() const {
        return _internal_has_controlstateactual();
    }
    inline void QuadIpState::clear_controlstateactual() {
        if (GetArenaForAllocation() == nullptr && _impl_.controlstateactual_ != nullptr) {
            delete _impl_.controlstateactual_;
        }
        _impl_.controlstateactual_ = nullptr;
    }
    inline const ::dtproto::quadip::ControlState& QuadIpState::_internal_controlstateactual() const {
        const ::dtproto::quadip::ControlState* p = _impl_.controlstateactual_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::ControlState&>(
                   ::dtproto::quadip::_ControlState_default_instance_);
    }
    inline const ::dtproto::quadip::ControlState& QuadIpState::controlstateactual() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.QuadIpState.controlStateActual)
        return _internal_controlstateactual();
    }
    inline void QuadIpState::unsafe_arena_set_allocated_controlstateactual(
        ::dtproto::quadip::ControlState* controlstateactual) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlstateactual_);
        }
        _impl_.controlstateactual_ = controlstateactual;
        if (controlstateactual) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.QuadIpState.controlStateActual)
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::release_controlstateactual() {

        ::dtproto::quadip::ControlState* temp = _impl_.controlstateactual_;
        _impl_.controlstateactual_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::unsafe_arena_release_controlstateactual() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.QuadIpState.controlStateActual)

        ::dtproto::quadip::ControlState* temp = _impl_.controlstateactual_;
        _impl_.controlstateactual_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::_internal_mutable_controlstateactual() {

        if (_impl_.controlstateactual_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::ControlState>(GetArenaForAllocation());
            _impl_.controlstateactual_ = p;
        }
        return _impl_.controlstateactual_;
    }
    inline ::dtproto::quadip::ControlState* QuadIpState::mutable_controlstateactual() {
        ::dtproto::quadip::ControlState* _msg = _internal_mutable_controlstateactual();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.QuadIpState.controlStateActual)
        return _msg;
    }
    inline void QuadIpState::set_allocated_controlstateactual(::dtproto::quadip::ControlState* controlstateactual) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.controlstateactual_;
        }
        if (controlstateactual) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(controlstateactual);
            if (message_arena != submessage_arena) {
                controlstateactual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, controlstateactual, submessage_arena);
            }

        } else {

        }
        _impl_.controlstateactual_ = controlstateactual;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.QuadIpState.controlStateActual)
    }

    // .dtproto.quadip.CpgState cpgState = 4;
    inline bool QuadIpState::_internal_has_cpgstate() const {
        return this != internal_default_instance() && _impl_.cpgstate_ != nullptr;
    }
    inline bool QuadIpState::has_cpgstate() const {
        return _internal_has_cpgstate();
    }
    inline void QuadIpState::clear_cpgstate() {
        if (GetArenaForAllocation() == nullptr && _impl_.cpgstate_ != nullptr) {
            delete _impl_.cpgstate_;
        }
        _impl_.cpgstate_ = nullptr;
    }
    inline const ::dtproto::quadip::CpgState& QuadIpState::_internal_cpgstate() const {
        const ::dtproto::quadip::CpgState* p = _impl_.cpgstate_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::CpgState&>(
                   ::dtproto::quadip::_CpgState_default_instance_);
    }
    inline const ::dtproto::quadip::CpgState& QuadIpState::cpgstate() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.QuadIpState.cpgState)
        return _internal_cpgstate();
    }
    inline void QuadIpState::unsafe_arena_set_allocated_cpgstate(
        ::dtproto::quadip::CpgState* cpgstate) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpgstate_);
        }
        _impl_.cpgstate_ = cpgstate;
        if (cpgstate) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.QuadIpState.cpgState)
    }
    inline ::dtproto::quadip::CpgState* QuadIpState::release_cpgstate() {

        ::dtproto::quadip::CpgState* temp = _impl_.cpgstate_;
        _impl_.cpgstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::CpgState* QuadIpState::unsafe_arena_release_cpgstate() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.QuadIpState.cpgState)

        ::dtproto::quadip::CpgState* temp = _impl_.cpgstate_;
        _impl_.cpgstate_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::CpgState* QuadIpState::_internal_mutable_cpgstate() {

        if (_impl_.cpgstate_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::CpgState>(GetArenaForAllocation());
            _impl_.cpgstate_ = p;
        }
        return _impl_.cpgstate_;
    }
    inline ::dtproto::quadip::CpgState* QuadIpState::mutable_cpgstate() {
        ::dtproto::quadip::CpgState* _msg = _internal_mutable_cpgstate();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.QuadIpState.cpgState)
        return _msg;
    }
    inline void QuadIpState::set_allocated_cpgstate(::dtproto::quadip::CpgState* cpgstate) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.cpgstate_;
        }
        if (cpgstate) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cpgstate);
            if (message_arena != submessage_arena) {
                cpgstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, cpgstate, submessage_arena);
            }

        } else {

        }
        _impl_.cpgstate_ = cpgstate;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.QuadIpState.cpgState)
    }

    // -------------------------------------------------------------------

    // QuadIpStateTimeStamped

    // .dtproto.std_msgs.Header header = 1;
    inline bool QuadIpStateTimeStamped::_internal_has_header() const {
        return this != internal_default_instance() && _impl_.header_ != nullptr;
    }
    inline bool QuadIpStateTimeStamped::has_header() const {
        return _internal_has_header();
    }
    inline const ::dtproto::std_msgs::Header& QuadIpStateTimeStamped::_internal_header() const {
        const ::dtproto::std_msgs::Header* p = _impl_.header_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
                   ::dtproto::std_msgs::_Header_default_instance_);
    }
    inline const ::dtproto::std_msgs::Header& QuadIpStateTimeStamped::header() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.QuadIpStateTimeStamped.header)
        return _internal_header();
    }
    inline void QuadIpStateTimeStamped::unsafe_arena_set_allocated_header(
        ::dtproto::std_msgs::Header* header) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        _impl_.header_ = header;
        if (header) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.QuadIpStateTimeStamped.header)
    }
    inline ::dtproto::std_msgs::Header* QuadIpStateTimeStamped::release_header() {

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::std_msgs::Header* QuadIpStateTimeStamped::unsafe_arena_release_header() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.QuadIpStateTimeStamped.header)

        ::dtproto::std_msgs::Header* temp = _impl_.header_;
        _impl_.header_ = nullptr;
        return temp;
    }
    inline ::dtproto::std_msgs::Header* QuadIpStateTimeStamped::_internal_mutable_header() {

        if (_impl_.header_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
            _impl_.header_ = p;
        }
        return _impl_.header_;
    }
    inline ::dtproto::std_msgs::Header* QuadIpStateTimeStamped::mutable_header() {
        ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.QuadIpStateTimeStamped.header)
        return _msg;
    }
    inline void QuadIpStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
        }
        if (header) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                    reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
            if (message_arena != submessage_arena) {
                header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, header, submessage_arena);
            }

        } else {

        }
        _impl_.header_ = header;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.QuadIpStateTimeStamped.header)
    }

    // .dtproto.quadip.QuadIpState state = 2;
    inline bool QuadIpStateTimeStamped::_internal_has_state() const {
        return this != internal_default_instance() && _impl_.state_ != nullptr;
    }
    inline bool QuadIpStateTimeStamped::has_state() const {
        return _internal_has_state();
    }
    inline void QuadIpStateTimeStamped::clear_state() {
        if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
            delete _impl_.state_;
        }
        _impl_.state_ = nullptr;
    }
    inline const ::dtproto::quadip::QuadIpState& QuadIpStateTimeStamped::_internal_state() const {
        const ::dtproto::quadip::QuadIpState* p = _impl_.state_;
        return p != nullptr ? *p : reinterpret_cast<const ::dtproto::quadip::QuadIpState&>(
                   ::dtproto::quadip::_QuadIpState_default_instance_);
    }
    inline const ::dtproto::quadip::QuadIpState& QuadIpStateTimeStamped::state() const {
        // @@protoc_insertion_point(field_get:dtproto.quadip.QuadIpStateTimeStamped.state)
        return _internal_state();
    }
    inline void QuadIpStateTimeStamped::unsafe_arena_set_allocated_state(
        ::dtproto::quadip::QuadIpState* state) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
        }
        _impl_.state_ = state;
        if (state) {

        } else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.quadip.QuadIpStateTimeStamped.state)
    }
    inline ::dtproto::quadip::QuadIpState* QuadIpStateTimeStamped::release_state() {

        ::dtproto::quadip::QuadIpState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::dtproto::quadip::QuadIpState* QuadIpStateTimeStamped::unsafe_arena_release_state() {
        // @@protoc_insertion_point(field_release:dtproto.quadip.QuadIpStateTimeStamped.state)

        ::dtproto::quadip::QuadIpState* temp = _impl_.state_;
        _impl_.state_ = nullptr;
        return temp;
    }
    inline ::dtproto::quadip::QuadIpState* QuadIpStateTimeStamped::_internal_mutable_state() {

        if (_impl_.state_ == nullptr) {
            auto* p = CreateMaybeMessage<::dtproto::quadip::QuadIpState>(GetArenaForAllocation());
            _impl_.state_ = p;
        }
        return _impl_.state_;
    }
    inline ::dtproto::quadip::QuadIpState* QuadIpStateTimeStamped::mutable_state() {
        ::dtproto::quadip::QuadIpState* _msg = _internal_mutable_state();
        // @@protoc_insertion_point(field_mutable:dtproto.quadip.QuadIpStateTimeStamped.state)
        return _msg;
    }
    inline void QuadIpStateTimeStamped::set_allocated_state(::dtproto::quadip::QuadIpState* state) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete _impl_.state_;
        }
        if (state) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
            if (message_arena != submessage_arena) {
                state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, state, submessage_arena);
            }

        } else {

        }
        _impl_.state_ = state;
        // @@protoc_insertion_point(field_set_allocated:dtproto.quadip.QuadIpStateTimeStamped.state)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------


    // @@protoc_insertion_point(namespace_scope)

    }  // namespace quadip
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_QuadIP_2eproto
