// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuadIP.proto

#include "QuadIP.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

    namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace quadip {
PROTOBUF_CONSTEXPR JointState::JointState(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.joint_state_des_)*/{}
             , /*decltype(_impl_.joint_state_act_)*/{}
             , /*decltype(_impl_.abs_encoder_)*/{}
             , /*decltype(_impl_.inc_encoder_)*/{}
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointStateDefaultTypeInternal {
    PROTOBUF_CONSTEXPR JointStateDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~JointStateDefaultTypeInternal() {}
    union {
        JointState _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointStateDefaultTypeInternal _JointState_default_instance_;
PROTOBUF_CONSTEXPR JointStateTimeStamped::JointStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.header_)*/nullptr
             , /*decltype(_impl_.state_)*/nullptr
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointStateTimeStampedDefaultTypeInternal {
    PROTOBUF_CONSTEXPR JointStateTimeStampedDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~JointStateTimeStampedDefaultTypeInternal() {}
    union {
        JointStateTimeStamped _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointStateTimeStampedDefaultTypeInternal _JointStateTimeStamped_default_instance_;
PROTOBUF_CONSTEXPR ControlState::ControlState(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.posworld2footwrtworld_)*/{}
             , /*decltype(_impl_.velworld2footwrtworld_)*/{}
             , /*decltype(_impl_.posbody2footwrtworld_)*/{}
             , /*decltype(_impl_.velbody2footwrtworld_)*/{}
             , /*decltype(_impl_.posbody2footwrtbody_)*/{}
             , /*decltype(_impl_.velbody2footwrtbody_)*/{}
             , /*decltype(_impl_.posworld2comwrtworld_)*/nullptr
             , /*decltype(_impl_.velworld2comwrtworld_)*/nullptr
             , /*decltype(_impl_.posworld2bodywrtworld_)*/nullptr
             , /*decltype(_impl_.velworld2bodywrtworld_)*/nullptr
             , /*decltype(_impl_.euleranglebodywrtworld_)*/nullptr
             , /*decltype(_impl_.angularvelbodywrtworld_)*/nullptr
             , /*decltype(_impl_.angularvelbodywrtbody_)*/nullptr
             , /*decltype(_impl_.angularmomentumbodywrtworld_)*/nullptr
             , /*decltype(_impl_.rotbodywrtworld_)*/nullptr
             , /*decltype(_impl_.contact_)*/nullptr
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStateDefaultTypeInternal {
    PROTOBUF_CONSTEXPR ControlStateDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~ControlStateDefaultTypeInternal() {}
    union {
        ControlState _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateDefaultTypeInternal _ControlState_default_instance_;
PROTOBUF_CONSTEXPR ControlStateTimeStamped::ControlStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.header_)*/nullptr
             , /*decltype(_impl_.state_)*/nullptr
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStateTimeStampedDefaultTypeInternal {
    PROTOBUF_CONSTEXPR ControlStateTimeStampedDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~ControlStateTimeStampedDefaultTypeInternal() {}
    union {
        ControlStateTimeStamped _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateTimeStampedDefaultTypeInternal _ControlStateTimeStamped_default_instance_;
PROTOBUF_CONSTEXPR CpgState::CpgState(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.periods_)*/nullptr
             , /*decltype(_impl_.phases_)*/nullptr
             , /*decltype(_impl_.phi_)*/nullptr
             , /*decltype(_impl_.phitogo_)*/nullptr
             , /*decltype(_impl_.phist_)*/nullptr
             , /*decltype(_impl_.phisw_)*/nullptr
             , /*decltype(_impl_.cpg_)*/nullptr
             , /*decltype(_impl_.contact_)*/nullptr
             , /*decltype(_impl_.phasechangeflag_)*/nullptr
             , /*decltype(_impl_.periodchangeflag_)*/nullptr
             , /*decltype(_impl_.phasediff_)*/nullptr
             , /*decltype(_impl_.phitran_)*/nullptr
             , /*decltype(_impl_.phitranst_)*/nullptr
             , /*decltype(_impl_.phitransw_)*/nullptr
             , /*decltype(_impl_.step_)*/nullptr
             , /*decltype(_impl_.dt_)*/0
             , /*decltype(_impl_.air_)*/false
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpgStateDefaultTypeInternal {
    PROTOBUF_CONSTEXPR CpgStateDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~CpgStateDefaultTypeInternal() {}
    union {
        CpgState _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpgStateDefaultTypeInternal _CpgState_default_instance_;
PROTOBUF_CONSTEXPR CpgStateTimeStamped::CpgStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.header_)*/nullptr
             , /*decltype(_impl_.state_)*/nullptr
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpgStateTimeStampedDefaultTypeInternal {
    PROTOBUF_CONSTEXPR CpgStateTimeStampedDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~CpgStateTimeStampedDefaultTypeInternal() {}
    union {
        CpgStateTimeStamped _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpgStateTimeStampedDefaultTypeInternal _CpgStateTimeStamped_default_instance_;
PROTOBUF_CONSTEXPR QuadIpState::QuadIpState(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.jointstate_)*/nullptr
             , /*decltype(_impl_.controlstatedesired_)*/nullptr
             , /*decltype(_impl_.controlstateactual_)*/nullptr
             , /*decltype(_impl_.cpgstate_)*/nullptr
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuadIpStateDefaultTypeInternal {
    PROTOBUF_CONSTEXPR QuadIpStateDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~QuadIpStateDefaultTypeInternal() {}
    union {
        QuadIpState _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuadIpStateDefaultTypeInternal _QuadIpState_default_instance_;
PROTOBUF_CONSTEXPR QuadIpStateTimeStamped::QuadIpStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
             /*decltype(_impl_.header_)*/nullptr
             , /*decltype(_impl_.state_)*/nullptr
             , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuadIpStateTimeStampedDefaultTypeInternal {
    PROTOBUF_CONSTEXPR QuadIpStateTimeStampedDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~QuadIpStateTimeStampedDefaultTypeInternal() {}
    union {
        QuadIpStateTimeStamped _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuadIpStateTimeStampedDefaultTypeInternal _QuadIpStateTimeStamped_default_instance_;
}  // namespace quadip
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_QuadIP_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_QuadIP_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_QuadIP_2eproto = nullptr;

const uint32_t TableStruct_QuadIP_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointState, _impl_.joint_state_des_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointState, _impl_.joint_state_act_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointState, _impl_.abs_encoder_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointState, _impl_.inc_encoder_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointStateTimeStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointStateTimeStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::JointStateTimeStamped, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.posworld2comwrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.velworld2comwrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.posworld2bodywrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.velworld2bodywrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.euleranglebodywrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.angularvelbodywrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.angularvelbodywrtbody_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.angularmomentumbodywrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.posworld2footwrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.velworld2footwrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.posbody2footwrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.velbody2footwrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.posbody2footwrtbody_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.velbody2footwrtbody_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.rotbodywrtworld_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlState, _impl_.contact_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlStateTimeStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlStateTimeStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::ControlStateTimeStamped, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.periods_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phases_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phi_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phitogo_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phist_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phisw_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.cpg_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.contact_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phasechangeflag_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.periodchangeflag_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phasediff_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phitran_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phitranst_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.phitransw_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.step_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.dt_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgState, _impl_.air_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgStateTimeStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgStateTimeStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::CpgStateTimeStamped, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpState, _impl_.jointstate_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpState, _impl_.controlstatedesired_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpState, _impl_.controlstateactual_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpState, _impl_.cpgstate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpStateTimeStamped, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpStateTimeStamped, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::dtproto::quadip::QuadIpStateTimeStamped, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    { 0, -1, -1, sizeof(::dtproto::quadip::JointState)},
    { 10, -1, -1, sizeof(::dtproto::quadip::JointStateTimeStamped)},
    { 18, -1, -1, sizeof(::dtproto::quadip::ControlState)},
    { 40, -1, -1, sizeof(::dtproto::quadip::ControlStateTimeStamped)},
    { 48, -1, -1, sizeof(::dtproto::quadip::CpgState)},
    { 71, -1, -1, sizeof(::dtproto::quadip::CpgStateTimeStamped)},
    { 79, -1, -1, sizeof(::dtproto::quadip::QuadIpState)},
    { 89, -1, -1, sizeof(::dtproto::quadip::QuadIpStateTimeStamped)},
    };

static const ::_pb::Message* const file_default_instances[] = {
    &::dtproto::quadip::_JointState_default_instance_._instance,
    &::dtproto::quadip::_JointStateTimeStamped_default_instance_._instance,
    &::dtproto::quadip::_ControlState_default_instance_._instance,
    &::dtproto::quadip::_ControlStateTimeStamped_default_instance_._instance,
    &::dtproto::quadip::_CpgState_default_instance_._instance,
    &::dtproto::quadip::_CpgStateTimeStamped_default_instance_._instance,
    &::dtproto::quadip::_QuadIpState_default_instance_._instance,
    &::dtproto::quadip::_QuadIpStateTimeStamped_default_instance_._instance,
};

const char descriptor_table_protodef_QuadIP_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\014QuadIP.proto\022\016dtproto.quadip\032\025dtProto/"
    "Service.proto\032\035dtProto/std_msgs/Header.p"
    "roto\032\036dtProto/std_msgs/Request.proto\032!dt"
    "Proto/geometry_msgs/Point.proto\032\"dtProto"
    "/geometry_msgs/Vector.proto\032\"dtProto/geo"
    "metry_msgs/Matrix.proto\032 dtProto/geometr"
    "y_msgs/Pose.proto\032!dtProto/geometry_msgs"
    "/Twist.proto\032\'dtProto/geometry_msgs/Orie"
    "ntation.proto\032$dtProto/sensor_msgs/Joint"
    "State.proto\032\033google/protobuf/empty.proto"
    "\"\252\001\n\nJointState\0228\n\017joint_state_des\030\001 \003(\013"
    "2\037.dtproto.sensor_msgs.JointState\0228\n\017joi"
    "nt_state_act\030\002 \003(\0132\037.dtproto.sensor_msgs"
    ".JointState\022\023\n\013abs_encoder\030\003 \003(\001\022\023\n\013inc_"
    "encoder\030\004 \003(\001\"l\n\025JointStateTimeStamped\022("
    "\n\006header\030\001 \001(\0132\030.dtproto.std_msgs.Header"
    "\022)\n\005state\030\002 \001(\0132\032.dtproto.quadip.JointSt"
    "ate\"\346\007\n\014ControlState\022<\n\024posWorld2ComWrtW"
    "orld\030\001 \001(\0132\036.dtproto.geometry_msgs.Point"
    "3d\022<\n\024velWorld2ComWrtWorld\030\002 \001(\0132\036.dtpro"
    "to.geometry_msgs.Point3d\022=\n\025posWorld2Bod"
    "yWrtWorld\030\003 \001(\0132\036.dtproto.geometry_msgs."
    "Point3d\022=\n\025velWorld2BodyWrtWorld\030\004 \001(\0132\036"
    ".dtproto.geometry_msgs.Point3d\022<\n\026eulerA"
    "ngleBodyWrtWorld\030\005 \001(\0132\034.dtproto.geometr"
    "y_msgs.Euler\022<\n\026angularVelBodyWrtWorld\030\006"
    " \001(\0132\034.dtproto.geometry_msgs.Euler\022;\n\025an"
    "gularVelBodyWrtBody\030\007 \001(\0132\034.dtproto.geom"
    "etry_msgs.Euler\022C\n\033angularMomentumBodyWr"
    "tWorld\030\010 \001(\0132\036.dtproto.geometry_msgs.Poi"
    "nt3d\022=\n\025posWorld2FootWrtWorld\030\t \003(\0132\036.dt"
    "proto.geometry_msgs.Point3d\022=\n\025velWorld2"
    "FootWrtWorld\030\n \003(\0132\036.dtproto.geometry_ms"
    "gs.Point3d\022<\n\024posBody2FootWrtWorld\030\013 \003(\013"
    "2\036.dtproto.geometry_msgs.Point3d\022<\n\024velB"
    "ody2FootWrtWorld\030\014 \003(\0132\036.dtproto.geometr"
    "y_msgs.Point3d\022;\n\023posBody2FootWrtBody\030\r "
    "\003(\0132\036.dtproto.geometry_msgs.Point3d\022;\n\023v"
    "elBody2FootWrtBody\030\016 \003(\0132\036.dtproto.geome"
    "try_msgs.Point3d\0228\n\017rotBodyWrtWorld\030\017 \001("
    "\0132\037.dtproto.geometry_msgs.Matrix3d\0220\n\007co"
    "ntact\030\020 \001(\0132\037.dtproto.geometry_msgs.Vect"
    "or4b\"p\n\027ControlStateTimeStamped\022(\n\006heade"
    "r\030\001 \001(\0132\030.dtproto.std_msgs.Header\022+\n\005sta"
    "te\030\002 \001(\0132\034.dtproto.quadip.ControlState\"\232"
    "\006\n\010CpgState\0220\n\007periods\030\001 \001(\0132\037.dtproto.g"
    "eometry_msgs.Vector2d\022/\n\006phases\030\002 \001(\0132\037."
    "dtproto.geometry_msgs.Vector4d\022,\n\003phi\030\003 "
    "\001(\0132\037.dtproto.geometry_msgs.Vector4d\0220\n\007"
    "phiToGo\030\004 \001(\0132\037.dtproto.geometry_msgs.Ve"
    "ctor4d\022.\n\005phiSt\030\005 \001(\0132\037.dtproto.geometry"
    "_msgs.Vector4d\022.\n\005phiSw\030\006 \001(\0132\037.dtproto."
    "geometry_msgs.Vector4d\022,\n\003cpg\030\007 \001(\0132\037.dt"
    "proto.geometry_msgs.Vector4d\0220\n\007contact\030"
    "\010 \001(\0132\037.dtproto.geometry_msgs.Vector4b\0228"
    "\n\017phaseChangeFlag\030\t \001(\0132\037.dtproto.geomet"
    "ry_msgs.Vector4b\0229\n\020periodChangeFlag\030\n \001"
    "(\0132\037.dtproto.geometry_msgs.Vector4b\0222\n\tp"
    "haseDiff\030\013 \001(\0132\037.dtproto.geometry_msgs.V"
    "ector4d\0220\n\007phiTran\030\014 \001(\0132\037.dtproto.geome"
    "try_msgs.Vector4d\0222\n\tphiTranSt\030\r \001(\0132\037.d"
    "tproto.geometry_msgs.Vector4d\0222\n\tphiTran"
    "Sw\030\016 \001(\0132\037.dtproto.geometry_msgs.Vector4"
    "d\022/\n\004step\030\017 \001(\0132!.dtproto.geometry_msgs."
    "Vector4i32\022\n\n\002dt\030\020 \001(\001\022\013\n\003air\030\021 \001(\010\"h\n\023C"
    "pgStateTimeStamped\022(\n\006header\030\001 \001(\0132\030.dtp"
    "roto.std_msgs.Header\022\'\n\005state\030\002 \001(\0132\030.dt"
    "proto.quadip.CpgState\"\336\001\n\013QuadIpState\022.\n"
    "\njointState\030\001 \001(\0132\032.dtproto.quadip.Joint"
    "State\0229\n\023controlStateDesired\030\002 \001(\0132\034.dtp"
    "roto.quadip.ControlState\0228\n\022controlState"
    "Actual\030\003 \001(\0132\034.dtproto.quadip.ControlSta"
    "te\022*\n\010cpgState\030\004 \001(\0132\030.dtproto.quadip.Cp"
    "gState\"n\n\026QuadIpStateTimeStamped\022(\n\006head"
    "er\030\001 \001(\0132\030.dtproto.std_msgs.Header\022*\n\005st"
    "ate\030\002 \001(\0132\033.dtproto.quadip.QuadIpState2\365"
    "\002\n\021QuadIpDataService\022X\n\021StreamQuadIpStat"
    "e\022\031.dtproto.std_msgs.Request\032&.dtproto.q"
    "uadip.QuadIpStateTimeStamped0\001\022V\n\020Stream"
    "JointState\022\031.dtproto.std_msgs.Request\032%."
    "dtproto.quadip.JointStateTimeStamped0\001\022Z"
    "\n\022StreamControlState\022\031.dtproto.std_msgs."
    "Request\032\'.dtproto.quadip.ControlStateTim"
    "eStamped0\001\022R\n\016StreamCpgState\022\031.dtproto.s"
    "td_msgs.Request\032#.dtproto.quadip.CpgStat"
    "eTimeStamped0\001b\006proto3"
    ;
static const ::_pbi::DescriptorTable* const descriptor_table_QuadIP_2eproto_deps[11] = {
    &::descriptor_table_dtProto_2fService_2eproto,
    &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto,
    &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto,
    &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fPoint_2eproto,
    &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fPose_2eproto,
    &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fTwist_2eproto,
    &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto,
    &::descriptor_table_dtProto_2fsensor_5fmsgs_2fJointState_2eproto,
    &::descriptor_table_dtProto_2fstd_5fmsgs_2fHeader_2eproto,
    &::descriptor_table_dtProto_2fstd_5fmsgs_2fRequest_2eproto,
    &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_QuadIP_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_QuadIP_2eproto = {
    false, false, 3422, descriptor_table_protodef_QuadIP_2eproto,
    "QuadIP.proto",
    &descriptor_table_QuadIP_2eproto_once, descriptor_table_QuadIP_2eproto_deps, 11, 8,
    schemas, file_default_instances, TableStruct_QuadIP_2eproto::offsets,
    file_level_metadata_QuadIP_2eproto, file_level_enum_descriptors_QuadIP_2eproto,
    file_level_service_descriptors_QuadIP_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_QuadIP_2eproto_getter() {
    return &descriptor_table_QuadIP_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_QuadIP_2eproto(&descriptor_table_QuadIP_2eproto);
namespace dtproto {
namespace quadip {

// ===================================================================

class JointState::_Internal {
public:
};

void JointState::clear_joint_state_des() {
    _impl_.joint_state_des_.Clear();
}
void JointState::clear_joint_state_act() {
    _impl_.joint_state_act_.Clear();
}
JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.JointState)
}
JointState::JointState(const JointState& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    JointState* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.joint_state_des_){from._impl_.joint_state_des_}
                        , decltype(_impl_.joint_state_act_){from._impl_.joint_state_act_}
                        , decltype(_impl_.abs_encoder_){from._impl_.abs_encoder_}
                        , decltype(_impl_.inc_encoder_){from._impl_.inc_encoder_}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.JointState)
}

inline void JointState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.joint_state_des_){arena}
        , decltype(_impl_.joint_state_act_){arena}
        , decltype(_impl_.abs_encoder_){arena}
        , decltype(_impl_.inc_encoder_){arena}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

JointState::~JointState() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.JointState)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void JointState::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.joint_state_des_.~RepeatedPtrField();
    _impl_.joint_state_act_.~RepeatedPtrField();
    _impl_.abs_encoder_.~RepeatedField();
    _impl_.inc_encoder_.~RepeatedField();
}

void JointState::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void JointState::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.JointState)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    _impl_.joint_state_des_.Clear();
    _impl_.joint_state_act_.Clear();
    _impl_.abs_encoder_.Clear();
    _impl_.inc_encoder_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // repeated .dtproto.sensor_msgs.JointState joint_state_des = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_joint_state_des(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.sensor_msgs.JointState joint_state_act = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_joint_state_act(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated double abs_encoder = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_abs_encoder(), ptr, ctx);
                CHK_(ptr);
            } else if (static_cast<uint8_t>(tag) == 25) {
                _internal_add_abs_encoder(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
                ptr += sizeof(double);
            } else
                goto handle_unusual;
            continue;
        // repeated double inc_encoder = 4;
        case 4:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_inc_encoder(), ptr, ctx);
                CHK_(ptr);
            } else if (static_cast<uint8_t>(tag) == 33) {
                _internal_add_inc_encoder(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
                ptr += sizeof(double);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* JointState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.JointState)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // repeated .dtproto.sensor_msgs.JointState joint_state_des = 1;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_joint_state_des_size()); i < n; i++) {
        const auto& repfield = this->_internal_joint_state_des(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated .dtproto.sensor_msgs.JointState joint_state_act = 2;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_joint_state_act_size()); i < n; i++) {
        const auto& repfield = this->_internal_joint_state_act(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated double abs_encoder = 3;
    if (this->_internal_abs_encoder_size() > 0) {
        target = stream->WriteFixedPacked(3, _internal_abs_encoder(), target);
    }

    // repeated double inc_encoder = 4;
    if (this->_internal_inc_encoder_size() > 0) {
        target = stream->WriteFixedPacked(4, _internal_inc_encoder(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.JointState)
    return target;
}

size_t JointState::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.JointState)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // repeated .dtproto.sensor_msgs.JointState joint_state_des = 1;
    total_size += 1UL * this->_internal_joint_state_des_size();
    for (const auto& msg : this->_impl_.joint_state_des_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .dtproto.sensor_msgs.JointState joint_state_act = 2;
    total_size += 1UL * this->_internal_joint_state_act_size();
    for (const auto& msg : this->_impl_.joint_state_act_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated double abs_encoder = 3;
    {
        unsigned int count = static_cast<unsigned int>(this->_internal_abs_encoder_size());
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 +
                          ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
        }
        total_size += data_size;
    }

    // repeated double inc_encoder = 4;
    {
        unsigned int count = static_cast<unsigned int>(this->_internal_inc_encoder_size());
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 +
                          ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
        }
        total_size += data_size;
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointState::GetClassData() const { return &_class_data_; }


void JointState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<JointState*>(&to_msg);
    auto& from = static_cast<const JointState&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.JointState)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    _this->_impl_.joint_state_des_.MergeFrom(from._impl_.joint_state_des_);
    _this->_impl_.joint_state_act_.MergeFrom(from._impl_.joint_state_act_);
    _this->_impl_.abs_encoder_.MergeFrom(from._impl_.abs_encoder_);
    _this->_impl_.inc_encoder_.MergeFrom(from._impl_.inc_encoder_);
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointState::CopyFrom(const JointState& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.JointState)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool JointState::IsInitialized() const {
    return true;
}

void JointState::InternalSwap(JointState* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    _impl_.joint_state_des_.InternalSwap(&other->_impl_.joint_state_des_);
    _impl_.joint_state_act_.InternalSwap(&other->_impl_.joint_state_act_);
    _impl_.abs_encoder_.InternalSwap(&other->_impl_.abs_encoder_);
    _impl_.inc_encoder_.InternalSwap(&other->_impl_.inc_encoder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[0]);
}

// ===================================================================

class JointStateTimeStamped::_Internal {
public:
    static const ::dtproto::std_msgs::Header& header(const JointStateTimeStamped* msg);
    static const ::dtproto::quadip::JointState& state(const JointStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
JointStateTimeStamped::_Internal::header(const JointStateTimeStamped* msg) {
    return *msg->_impl_.header_;
}
const ::dtproto::quadip::JointState&
JointStateTimeStamped::_Internal::state(const JointStateTimeStamped* msg) {
    return *msg->_impl_.state_;
}
void JointStateTimeStamped::clear_header() {
    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
}
JointStateTimeStamped::JointStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                             bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.JointStateTimeStamped)
}
JointStateTimeStamped::JointStateTimeStamped(const JointStateTimeStamped& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    JointStateTimeStamped* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.header_){nullptr}
                        , decltype(_impl_.state_){nullptr}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_header()) {
        _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
    }
    if (from._internal_has_state()) {
        _this->_impl_.state_ = new ::dtproto::quadip::JointState(*from._impl_.state_);
    }
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.JointStateTimeStamped)
}

inline void JointStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.header_){nullptr}
        , decltype(_impl_.state_){nullptr}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

JointStateTimeStamped::~JointStateTimeStamped() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.JointStateTimeStamped)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void JointStateTimeStamped::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.header_;
    if (this != internal_default_instance()) delete _impl_.state_;
}

void JointStateTimeStamped::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void JointStateTimeStamped::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.JointStateTimeStamped)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
        delete _impl_.state_;
    }
    _impl_.state_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.std_msgs.Header header = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.JointState state = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* JointStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.JointStateTimeStamped)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::header(this),
                                 _Internal::header(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.JointState state = 2;
    if (this->_internal_has_state()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::state(this),
                                 _Internal::state(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.JointStateTimeStamped)
    return target;
}

size_t JointStateTimeStamped::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.JointStateTimeStamped)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.header_);
    }

    // .dtproto.quadip.JointState state = 2;
    if (this->_internal_has_state()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.state_);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointStateTimeStamped::GetClassData() const { return &_class_data_; }


void JointStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<JointStateTimeStamped*>(&to_msg);
    auto& from = static_cast<const JointStateTimeStamped&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.JointStateTimeStamped)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    if (from._internal_has_header()) {
        _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
            from._internal_header());
    }
    if (from._internal_has_state()) {
        _this->_internal_mutable_state()->::dtproto::quadip::JointState::MergeFrom(
            from._internal_state());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointStateTimeStamped::CopyFrom(const JointStateTimeStamped& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.JointStateTimeStamped)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool JointStateTimeStamped::IsInitialized() const {
    return true;
}

void JointStateTimeStamped::InternalSwap(JointStateTimeStamped* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(JointStateTimeStamped, _impl_.state_)
        + sizeof(JointStateTimeStamped::_impl_.state_)
        - PROTOBUF_FIELD_OFFSET(JointStateTimeStamped, _impl_.header_)>(
        reinterpret_cast<char*>(&_impl_.header_),
        reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointStateTimeStamped::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[1]);
}

// ===================================================================

class ControlState::_Internal {
public:
    static const ::dtproto::geometry_msgs::Point3d& posworld2comwrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Point3d& velworld2comwrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Point3d& posworld2bodywrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Point3d& velworld2bodywrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Euler& euleranglebodywrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Euler& angularvelbodywrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Euler& angularvelbodywrtbody(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Point3d& angularmomentumbodywrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Matrix3d& rotbodywrtworld(const ControlState* msg);
    static const ::dtproto::geometry_msgs::Vector4b& contact(const ControlState* msg);
};

const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posworld2comwrtworld(const ControlState* msg) {
    return *msg->_impl_.posworld2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velworld2comwrtworld(const ControlState* msg) {
    return *msg->_impl_.velworld2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posworld2bodywrtworld(const ControlState* msg) {
    return *msg->_impl_.posworld2bodywrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velworld2bodywrtworld(const ControlState* msg) {
    return *msg->_impl_.velworld2bodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::euleranglebodywrtworld(const ControlState* msg) {
    return *msg->_impl_.euleranglebodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::angularvelbodywrtworld(const ControlState* msg) {
    return *msg->_impl_.angularvelbodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::angularvelbodywrtbody(const ControlState* msg) {
    return *msg->_impl_.angularvelbodywrtbody_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::angularmomentumbodywrtworld(const ControlState* msg) {
    return *msg->_impl_.angularmomentumbodywrtworld_;
}
const ::dtproto::geometry_msgs::Matrix3d&
ControlState::_Internal::rotbodywrtworld(const ControlState* msg) {
    return *msg->_impl_.rotbodywrtworld_;
}
const ::dtproto::geometry_msgs::Vector4b&
ControlState::_Internal::contact(const ControlState* msg) {
    return *msg->_impl_.contact_;
}
void ControlState::clear_posworld2comwrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.posworld2comwrtworld_ != nullptr) {
        delete _impl_.posworld2comwrtworld_;
    }
    _impl_.posworld2comwrtworld_ = nullptr;
}
void ControlState::clear_velworld2comwrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.velworld2comwrtworld_ != nullptr) {
        delete _impl_.velworld2comwrtworld_;
    }
    _impl_.velworld2comwrtworld_ = nullptr;
}
void ControlState::clear_posworld2bodywrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.posworld2bodywrtworld_ != nullptr) {
        delete _impl_.posworld2bodywrtworld_;
    }
    _impl_.posworld2bodywrtworld_ = nullptr;
}
void ControlState::clear_velworld2bodywrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.velworld2bodywrtworld_ != nullptr) {
        delete _impl_.velworld2bodywrtworld_;
    }
    _impl_.velworld2bodywrtworld_ = nullptr;
}
void ControlState::clear_euleranglebodywrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.euleranglebodywrtworld_ != nullptr) {
        delete _impl_.euleranglebodywrtworld_;
    }
    _impl_.euleranglebodywrtworld_ = nullptr;
}
void ControlState::clear_angularvelbodywrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtworld_ != nullptr) {
        delete _impl_.angularvelbodywrtworld_;
    }
    _impl_.angularvelbodywrtworld_ = nullptr;
}
void ControlState::clear_angularvelbodywrtbody() {
    if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtbody_ != nullptr) {
        delete _impl_.angularvelbodywrtbody_;
    }
    _impl_.angularvelbodywrtbody_ = nullptr;
}
void ControlState::clear_angularmomentumbodywrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.angularmomentumbodywrtworld_ != nullptr) {
        delete _impl_.angularmomentumbodywrtworld_;
    }
    _impl_.angularmomentumbodywrtworld_ = nullptr;
}
void ControlState::clear_posworld2footwrtworld() {
    _impl_.posworld2footwrtworld_.Clear();
}
void ControlState::clear_velworld2footwrtworld() {
    _impl_.velworld2footwrtworld_.Clear();
}
void ControlState::clear_posbody2footwrtworld() {
    _impl_.posbody2footwrtworld_.Clear();
}
void ControlState::clear_velbody2footwrtworld() {
    _impl_.velbody2footwrtworld_.Clear();
}
void ControlState::clear_posbody2footwrtbody() {
    _impl_.posbody2footwrtbody_.Clear();
}
void ControlState::clear_velbody2footwrtbody() {
    _impl_.velbody2footwrtbody_.Clear();
}
void ControlState::clear_rotbodywrtworld() {
    if (GetArenaForAllocation() == nullptr && _impl_.rotbodywrtworld_ != nullptr) {
        delete _impl_.rotbodywrtworld_;
    }
    _impl_.rotbodywrtworld_ = nullptr;
}
void ControlState::clear_contact() {
    if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
        delete _impl_.contact_;
    }
    _impl_.contact_ = nullptr;
}
ControlState::ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.ControlState)
}
ControlState::ControlState(const ControlState& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    ControlState* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.posworld2footwrtworld_){from._impl_.posworld2footwrtworld_}
                        , decltype(_impl_.velworld2footwrtworld_){from._impl_.velworld2footwrtworld_}
                        , decltype(_impl_.posbody2footwrtworld_){from._impl_.posbody2footwrtworld_}
                        , decltype(_impl_.velbody2footwrtworld_){from._impl_.velbody2footwrtworld_}
                        , decltype(_impl_.posbody2footwrtbody_){from._impl_.posbody2footwrtbody_}
                        , decltype(_impl_.velbody2footwrtbody_){from._impl_.velbody2footwrtbody_}
                        , decltype(_impl_.posworld2comwrtworld_){nullptr}
                        , decltype(_impl_.velworld2comwrtworld_){nullptr}
                        , decltype(_impl_.posworld2bodywrtworld_){nullptr}
                        , decltype(_impl_.velworld2bodywrtworld_){nullptr}
                        , decltype(_impl_.euleranglebodywrtworld_){nullptr}
                        , decltype(_impl_.angularvelbodywrtworld_){nullptr}
                        , decltype(_impl_.angularvelbodywrtbody_){nullptr}
                        , decltype(_impl_.angularmomentumbodywrtworld_){nullptr}
                        , decltype(_impl_.rotbodywrtworld_){nullptr}
                        , decltype(_impl_.contact_){nullptr}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_posworld2comwrtworld()) {
        _this->_impl_.posworld2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posworld2comwrtworld_);
    }
    if (from._internal_has_velworld2comwrtworld()) {
        _this->_impl_.velworld2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velworld2comwrtworld_);
    }
    if (from._internal_has_posworld2bodywrtworld()) {
        _this->_impl_.posworld2bodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posworld2bodywrtworld_);
    }
    if (from._internal_has_velworld2bodywrtworld()) {
        _this->_impl_.velworld2bodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velworld2bodywrtworld_);
    }
    if (from._internal_has_euleranglebodywrtworld()) {
        _this->_impl_.euleranglebodywrtworld_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.euleranglebodywrtworld_);
    }
    if (from._internal_has_angularvelbodywrtworld()) {
        _this->_impl_.angularvelbodywrtworld_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.angularvelbodywrtworld_);
    }
    if (from._internal_has_angularvelbodywrtbody()) {
        _this->_impl_.angularvelbodywrtbody_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.angularvelbodywrtbody_);
    }
    if (from._internal_has_angularmomentumbodywrtworld()) {
        _this->_impl_.angularmomentumbodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.angularmomentumbodywrtworld_);
    }
    if (from._internal_has_rotbodywrtworld()) {
        _this->_impl_.rotbodywrtworld_ = new ::dtproto::geometry_msgs::Matrix3d(*from._impl_.rotbodywrtworld_);
    }
    if (from._internal_has_contact()) {
        _this->_impl_.contact_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.contact_);
    }
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.ControlState)
}

inline void ControlState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.posworld2footwrtworld_){arena}
        , decltype(_impl_.velworld2footwrtworld_){arena}
        , decltype(_impl_.posbody2footwrtworld_){arena}
        , decltype(_impl_.velbody2footwrtworld_){arena}
        , decltype(_impl_.posbody2footwrtbody_){arena}
        , decltype(_impl_.velbody2footwrtbody_){arena}
        , decltype(_impl_.posworld2comwrtworld_){nullptr}
        , decltype(_impl_.velworld2comwrtworld_){nullptr}
        , decltype(_impl_.posworld2bodywrtworld_){nullptr}
        , decltype(_impl_.velworld2bodywrtworld_){nullptr}
        , decltype(_impl_.euleranglebodywrtworld_){nullptr}
        , decltype(_impl_.angularvelbodywrtworld_){nullptr}
        , decltype(_impl_.angularvelbodywrtbody_){nullptr}
        , decltype(_impl_.angularmomentumbodywrtworld_){nullptr}
        , decltype(_impl_.rotbodywrtworld_){nullptr}
        , decltype(_impl_.contact_){nullptr}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

ControlState::~ControlState() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.ControlState)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void ControlState::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.posworld2footwrtworld_.~RepeatedPtrField();
    _impl_.velworld2footwrtworld_.~RepeatedPtrField();
    _impl_.posbody2footwrtworld_.~RepeatedPtrField();
    _impl_.velbody2footwrtworld_.~RepeatedPtrField();
    _impl_.posbody2footwrtbody_.~RepeatedPtrField();
    _impl_.velbody2footwrtbody_.~RepeatedPtrField();
    if (this != internal_default_instance()) delete _impl_.posworld2comwrtworld_;
    if (this != internal_default_instance()) delete _impl_.velworld2comwrtworld_;
    if (this != internal_default_instance()) delete _impl_.posworld2bodywrtworld_;
    if (this != internal_default_instance()) delete _impl_.velworld2bodywrtworld_;
    if (this != internal_default_instance()) delete _impl_.euleranglebodywrtworld_;
    if (this != internal_default_instance()) delete _impl_.angularvelbodywrtworld_;
    if (this != internal_default_instance()) delete _impl_.angularvelbodywrtbody_;
    if (this != internal_default_instance()) delete _impl_.angularmomentumbodywrtworld_;
    if (this != internal_default_instance()) delete _impl_.rotbodywrtworld_;
    if (this != internal_default_instance()) delete _impl_.contact_;
}

void ControlState::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void ControlState::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.ControlState)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    _impl_.posworld2footwrtworld_.Clear();
    _impl_.velworld2footwrtworld_.Clear();
    _impl_.posbody2footwrtworld_.Clear();
    _impl_.velbody2footwrtworld_.Clear();
    _impl_.posbody2footwrtbody_.Clear();
    _impl_.velbody2footwrtbody_.Clear();
    if (GetArenaForAllocation() == nullptr && _impl_.posworld2comwrtworld_ != nullptr) {
        delete _impl_.posworld2comwrtworld_;
    }
    _impl_.posworld2comwrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.velworld2comwrtworld_ != nullptr) {
        delete _impl_.velworld2comwrtworld_;
    }
    _impl_.velworld2comwrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.posworld2bodywrtworld_ != nullptr) {
        delete _impl_.posworld2bodywrtworld_;
    }
    _impl_.posworld2bodywrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.velworld2bodywrtworld_ != nullptr) {
        delete _impl_.velworld2bodywrtworld_;
    }
    _impl_.velworld2bodywrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.euleranglebodywrtworld_ != nullptr) {
        delete _impl_.euleranglebodywrtworld_;
    }
    _impl_.euleranglebodywrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtworld_ != nullptr) {
        delete _impl_.angularvelbodywrtworld_;
    }
    _impl_.angularvelbodywrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtbody_ != nullptr) {
        delete _impl_.angularvelbodywrtbody_;
    }
    _impl_.angularvelbodywrtbody_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.angularmomentumbodywrtworld_ != nullptr) {
        delete _impl_.angularmomentumbodywrtworld_;
    }
    _impl_.angularmomentumbodywrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.rotbodywrtworld_ != nullptr) {
        delete _impl_.rotbodywrtworld_;
    }
    _impl_.rotbodywrtworld_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
        delete _impl_.contact_;
    }
    _impl_.contact_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_posworld2comwrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_velworld2comwrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                ptr = ctx->ParseMessage(_internal_mutable_posworld2bodywrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
        case 4:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                ptr = ctx->ParseMessage(_internal_mutable_velworld2bodywrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
        case 5:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
                ptr = ctx->ParseMessage(_internal_mutable_euleranglebodywrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
        case 6:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
                ptr = ctx->ParseMessage(_internal_mutable_angularvelbodywrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
        case 7:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
                ptr = ctx->ParseMessage(_internal_mutable_angularvelbodywrtbody(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
        case 8:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
                ptr = ctx->ParseMessage(_internal_mutable_angularmomentumbodywrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
        case 9:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_posworld2footwrtworld(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
        case 10:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_velworld2footwrtworld(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
        case 11:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_posbody2footwrtworld(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
        case 12:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_velbody2footwrtworld(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
        case 13:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_posbody2footwrtbody(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
            } else
                goto handle_unusual;
            continue;
        // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
        case 14:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
                ptr -= 1;
                do {
                    ptr += 1;
                    ptr = ctx->ParseMessage(_internal_add_velbody2footwrtbody(), ptr);
                    CHK_(ptr);
                    if (!ctx->DataAvailable(ptr)) break;
                } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
        case 15:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
                ptr = ctx->ParseMessage(_internal_mutable_rotbodywrtworld(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4b contact = 16;
        case 16:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
                ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* ControlState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.ControlState)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
    if (this->_internal_has_posworld2comwrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::posworld2comwrtworld(this),
                                 _Internal::posworld2comwrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
    if (this->_internal_has_velworld2comwrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::velworld2comwrtworld(this),
                                 _Internal::velworld2comwrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
    if (this->_internal_has_posworld2bodywrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(3, _Internal::posworld2bodywrtworld(this),
                                 _Internal::posworld2bodywrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
    if (this->_internal_has_velworld2bodywrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(4, _Internal::velworld2bodywrtworld(this),
                                 _Internal::velworld2bodywrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
    if (this->_internal_has_euleranglebodywrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(5, _Internal::euleranglebodywrtworld(this),
                                 _Internal::euleranglebodywrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
    if (this->_internal_has_angularvelbodywrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(6, _Internal::angularvelbodywrtworld(this),
                                 _Internal::angularvelbodywrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
    if (this->_internal_has_angularvelbodywrtbody()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(7, _Internal::angularvelbodywrtbody(this),
                                 _Internal::angularvelbodywrtbody(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
    if (this->_internal_has_angularmomentumbodywrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(8, _Internal::angularmomentumbodywrtworld(this),
                                 _Internal::angularmomentumbodywrtworld(this).GetCachedSize(), target, stream);
    }

    // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_posworld2footwrtworld_size()); i < n; i++) {
        const auto& repfield = this->_internal_posworld2footwrtworld(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_velworld2footwrtworld_size()); i < n; i++) {
        const auto& repfield = this->_internal_velworld2footwrtworld(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_posbody2footwrtworld_size()); i < n; i++) {
        const auto& repfield = this->_internal_posbody2footwrtworld(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_velbody2footwrtworld_size()); i < n; i++) {
        const auto& repfield = this->_internal_velbody2footwrtworld(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_posbody2footwrtbody_size()); i < n; i++) {
        const auto& repfield = this->_internal_posbody2footwrtbody(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
    }

    // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
    for (unsigned i = 0,
         n = static_cast<unsigned>(this->_internal_velbody2footwrtbody_size()); i < n; i++) {
        const auto& repfield = this->_internal_velbody2footwrtbody(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
    if (this->_internal_has_rotbodywrtworld()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(15, _Internal::rotbodywrtworld(this),
                                 _Internal::rotbodywrtworld(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4b contact = 16;
    if (this->_internal_has_contact()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(16, _Internal::contact(this),
                                 _Internal::contact(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.ControlState)
    return target;
}

size_t ControlState::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.ControlState)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
    total_size += 1UL * this->_internal_posworld2footwrtworld_size();
    for (const auto& msg : this->_impl_.posworld2footwrtworld_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
    total_size += 1UL * this->_internal_velworld2footwrtworld_size();
    for (const auto& msg : this->_impl_.velworld2footwrtworld_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
    total_size += 1UL * this->_internal_posbody2footwrtworld_size();
    for (const auto& msg : this->_impl_.posbody2footwrtworld_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
    total_size += 1UL * this->_internal_velbody2footwrtworld_size();
    for (const auto& msg : this->_impl_.velbody2footwrtworld_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
    total_size += 1UL * this->_internal_posbody2footwrtbody_size();
    for (const auto& msg : this->_impl_.posbody2footwrtbody_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
    total_size += 1UL * this->_internal_velbody2footwrtbody_size();
    for (const auto& msg : this->_impl_.velbody2footwrtbody_) {
        total_size +=
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
    if (this->_internal_has_posworld2comwrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.posworld2comwrtworld_);
    }

    // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
    if (this->_internal_has_velworld2comwrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.velworld2comwrtworld_);
    }

    // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
    if (this->_internal_has_posworld2bodywrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.posworld2bodywrtworld_);
    }

    // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
    if (this->_internal_has_velworld2bodywrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.velworld2bodywrtworld_);
    }

    // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
    if (this->_internal_has_euleranglebodywrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.euleranglebodywrtworld_);
    }

    // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
    if (this->_internal_has_angularvelbodywrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.angularvelbodywrtworld_);
    }

    // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
    if (this->_internal_has_angularvelbodywrtbody()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.angularvelbodywrtbody_);
    }

    // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
    if (this->_internal_has_angularmomentumbodywrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.angularmomentumbodywrtworld_);
    }

    // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
    if (this->_internal_has_rotbodywrtworld()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.rotbodywrtworld_);
    }

    // .dtproto.geometry_msgs.Vector4b contact = 16;
    if (this->_internal_has_contact()) {
        total_size += 2 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.contact_);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlState::GetClassData() const { return &_class_data_; }


void ControlState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<ControlState*>(&to_msg);
    auto& from = static_cast<const ControlState&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.ControlState)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    _this->_impl_.posworld2footwrtworld_.MergeFrom(from._impl_.posworld2footwrtworld_);
    _this->_impl_.velworld2footwrtworld_.MergeFrom(from._impl_.velworld2footwrtworld_);
    _this->_impl_.posbody2footwrtworld_.MergeFrom(from._impl_.posbody2footwrtworld_);
    _this->_impl_.velbody2footwrtworld_.MergeFrom(from._impl_.velbody2footwrtworld_);
    _this->_impl_.posbody2footwrtbody_.MergeFrom(from._impl_.posbody2footwrtbody_);
    _this->_impl_.velbody2footwrtbody_.MergeFrom(from._impl_.velbody2footwrtbody_);
    if (from._internal_has_posworld2comwrtworld()) {
        _this->_internal_mutable_posworld2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
            from._internal_posworld2comwrtworld());
    }
    if (from._internal_has_velworld2comwrtworld()) {
        _this->_internal_mutable_velworld2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
            from._internal_velworld2comwrtworld());
    }
    if (from._internal_has_posworld2bodywrtworld()) {
        _this->_internal_mutable_posworld2bodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
            from._internal_posworld2bodywrtworld());
    }
    if (from._internal_has_velworld2bodywrtworld()) {
        _this->_internal_mutable_velworld2bodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
            from._internal_velworld2bodywrtworld());
    }
    if (from._internal_has_euleranglebodywrtworld()) {
        _this->_internal_mutable_euleranglebodywrtworld()->::dtproto::geometry_msgs::Euler::MergeFrom(
            from._internal_euleranglebodywrtworld());
    }
    if (from._internal_has_angularvelbodywrtworld()) {
        _this->_internal_mutable_angularvelbodywrtworld()->::dtproto::geometry_msgs::Euler::MergeFrom(
            from._internal_angularvelbodywrtworld());
    }
    if (from._internal_has_angularvelbodywrtbody()) {
        _this->_internal_mutable_angularvelbodywrtbody()->::dtproto::geometry_msgs::Euler::MergeFrom(
            from._internal_angularvelbodywrtbody());
    }
    if (from._internal_has_angularmomentumbodywrtworld()) {
        _this->_internal_mutable_angularmomentumbodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
            from._internal_angularmomentumbodywrtworld());
    }
    if (from._internal_has_rotbodywrtworld()) {
        _this->_internal_mutable_rotbodywrtworld()->::dtproto::geometry_msgs::Matrix3d::MergeFrom(
            from._internal_rotbodywrtworld());
    }
    if (from._internal_has_contact()) {
        _this->_internal_mutable_contact()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
            from._internal_contact());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlState::CopyFrom(const ControlState& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.ControlState)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ControlState::IsInitialized() const {
    return true;
}

void ControlState::InternalSwap(ControlState* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    _impl_.posworld2footwrtworld_.InternalSwap(&other->_impl_.posworld2footwrtworld_);
    _impl_.velworld2footwrtworld_.InternalSwap(&other->_impl_.velworld2footwrtworld_);
    _impl_.posbody2footwrtworld_.InternalSwap(&other->_impl_.posbody2footwrtworld_);
    _impl_.velbody2footwrtworld_.InternalSwap(&other->_impl_.velbody2footwrtworld_);
    _impl_.posbody2footwrtbody_.InternalSwap(&other->_impl_.posbody2footwrtbody_);
    _impl_.velbody2footwrtbody_.InternalSwap(&other->_impl_.velbody2footwrtbody_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ControlState, _impl_.contact_)
        + sizeof(ControlState::_impl_.contact_)
        - PROTOBUF_FIELD_OFFSET(ControlState, _impl_.posworld2comwrtworld_)>(
        reinterpret_cast<char*>(&_impl_.posworld2comwrtworld_),
        reinterpret_cast<char*>(&other->_impl_.posworld2comwrtworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlState::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[2]);
}

// ===================================================================

class ControlStateTimeStamped::_Internal {
public:
    static const ::dtproto::std_msgs::Header& header(const ControlStateTimeStamped* msg);
    static const ::dtproto::quadip::ControlState& state(const ControlStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
ControlStateTimeStamped::_Internal::header(const ControlStateTimeStamped* msg) {
    return *msg->_impl_.header_;
}
const ::dtproto::quadip::ControlState&
ControlStateTimeStamped::_Internal::state(const ControlStateTimeStamped* msg) {
    return *msg->_impl_.state_;
}
void ControlStateTimeStamped::clear_header() {
    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
}
ControlStateTimeStamped::ControlStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                                 bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.ControlStateTimeStamped)
}
ControlStateTimeStamped::ControlStateTimeStamped(const ControlStateTimeStamped& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    ControlStateTimeStamped* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.header_){nullptr}
                        , decltype(_impl_.state_){nullptr}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_header()) {
        _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
    }
    if (from._internal_has_state()) {
        _this->_impl_.state_ = new ::dtproto::quadip::ControlState(*from._impl_.state_);
    }
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.ControlStateTimeStamped)
}

inline void ControlStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.header_){nullptr}
        , decltype(_impl_.state_){nullptr}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

ControlStateTimeStamped::~ControlStateTimeStamped() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.ControlStateTimeStamped)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void ControlStateTimeStamped::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.header_;
    if (this != internal_default_instance()) delete _impl_.state_;
}

void ControlStateTimeStamped::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void ControlStateTimeStamped::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.ControlStateTimeStamped)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
        delete _impl_.state_;
    }
    _impl_.state_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.std_msgs.Header header = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.ControlState state = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* ControlStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.ControlStateTimeStamped)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::header(this),
                                 _Internal::header(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.ControlState state = 2;
    if (this->_internal_has_state()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::state(this),
                                 _Internal::state(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.ControlStateTimeStamped)
    return target;
}

size_t ControlStateTimeStamped::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.ControlStateTimeStamped)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.header_);
    }

    // .dtproto.quadip.ControlState state = 2;
    if (this->_internal_has_state()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.state_);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlStateTimeStamped::GetClassData() const { return &_class_data_; }


void ControlStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<ControlStateTimeStamped*>(&to_msg);
    auto& from = static_cast<const ControlStateTimeStamped&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.ControlStateTimeStamped)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    if (from._internal_has_header()) {
        _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
            from._internal_header());
    }
    if (from._internal_has_state()) {
        _this->_internal_mutable_state()->::dtproto::quadip::ControlState::MergeFrom(
            from._internal_state());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStateTimeStamped::CopyFrom(const ControlStateTimeStamped& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.ControlStateTimeStamped)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ControlStateTimeStamped::IsInitialized() const {
    return true;
}

void ControlStateTimeStamped::InternalSwap(ControlStateTimeStamped* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ControlStateTimeStamped, _impl_.state_)
        + sizeof(ControlStateTimeStamped::_impl_.state_)
        - PROTOBUF_FIELD_OFFSET(ControlStateTimeStamped, _impl_.header_)>(
        reinterpret_cast<char*>(&_impl_.header_),
        reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStateTimeStamped::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[3]);
}

// ===================================================================

class CpgState::_Internal {
public:
    static const ::dtproto::geometry_msgs::Vector2d& periods(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phases(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phi(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phitogo(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phist(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phisw(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& cpg(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4b& contact(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4b& phasechangeflag(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4b& periodchangeflag(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phasediff(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phitran(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phitranst(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4d& phitransw(const CpgState* msg);
    static const ::dtproto::geometry_msgs::Vector4i32& step(const CpgState* msg);
};

const ::dtproto::geometry_msgs::Vector2d&
CpgState::_Internal::periods(const CpgState* msg) {
    return *msg->_impl_.periods_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phases(const CpgState* msg) {
    return *msg->_impl_.phases_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phi(const CpgState* msg) {
    return *msg->_impl_.phi_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitogo(const CpgState* msg) {
    return *msg->_impl_.phitogo_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phist(const CpgState* msg) {
    return *msg->_impl_.phist_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phisw(const CpgState* msg) {
    return *msg->_impl_.phisw_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::cpg(const CpgState* msg) {
    return *msg->_impl_.cpg_;
}
const ::dtproto::geometry_msgs::Vector4b&
CpgState::_Internal::contact(const CpgState* msg) {
    return *msg->_impl_.contact_;
}
const ::dtproto::geometry_msgs::Vector4b&
CpgState::_Internal::phasechangeflag(const CpgState* msg) {
    return *msg->_impl_.phasechangeflag_;
}
const ::dtproto::geometry_msgs::Vector4b&
CpgState::_Internal::periodchangeflag(const CpgState* msg) {
    return *msg->_impl_.periodchangeflag_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phasediff(const CpgState* msg) {
    return *msg->_impl_.phasediff_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitran(const CpgState* msg) {
    return *msg->_impl_.phitran_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitranst(const CpgState* msg) {
    return *msg->_impl_.phitranst_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitransw(const CpgState* msg) {
    return *msg->_impl_.phitransw_;
}
const ::dtproto::geometry_msgs::Vector4i32&
CpgState::_Internal::step(const CpgState* msg) {
    return *msg->_impl_.step_;
}
void CpgState::clear_periods() {
    if (GetArenaForAllocation() == nullptr && _impl_.periods_ != nullptr) {
        delete _impl_.periods_;
    }
    _impl_.periods_ = nullptr;
}
void CpgState::clear_phases() {
    if (GetArenaForAllocation() == nullptr && _impl_.phases_ != nullptr) {
        delete _impl_.phases_;
    }
    _impl_.phases_ = nullptr;
}
void CpgState::clear_phi() {
    if (GetArenaForAllocation() == nullptr && _impl_.phi_ != nullptr) {
        delete _impl_.phi_;
    }
    _impl_.phi_ = nullptr;
}
void CpgState::clear_phitogo() {
    if (GetArenaForAllocation() == nullptr && _impl_.phitogo_ != nullptr) {
        delete _impl_.phitogo_;
    }
    _impl_.phitogo_ = nullptr;
}
void CpgState::clear_phist() {
    if (GetArenaForAllocation() == nullptr && _impl_.phist_ != nullptr) {
        delete _impl_.phist_;
    }
    _impl_.phist_ = nullptr;
}
void CpgState::clear_phisw() {
    if (GetArenaForAllocation() == nullptr && _impl_.phisw_ != nullptr) {
        delete _impl_.phisw_;
    }
    _impl_.phisw_ = nullptr;
}
void CpgState::clear_cpg() {
    if (GetArenaForAllocation() == nullptr && _impl_.cpg_ != nullptr) {
        delete _impl_.cpg_;
    }
    _impl_.cpg_ = nullptr;
}
void CpgState::clear_contact() {
    if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
        delete _impl_.contact_;
    }
    _impl_.contact_ = nullptr;
}
void CpgState::clear_phasechangeflag() {
    if (GetArenaForAllocation() == nullptr && _impl_.phasechangeflag_ != nullptr) {
        delete _impl_.phasechangeflag_;
    }
    _impl_.phasechangeflag_ = nullptr;
}
void CpgState::clear_periodchangeflag() {
    if (GetArenaForAllocation() == nullptr && _impl_.periodchangeflag_ != nullptr) {
        delete _impl_.periodchangeflag_;
    }
    _impl_.periodchangeflag_ = nullptr;
}
void CpgState::clear_phasediff() {
    if (GetArenaForAllocation() == nullptr && _impl_.phasediff_ != nullptr) {
        delete _impl_.phasediff_;
    }
    _impl_.phasediff_ = nullptr;
}
void CpgState::clear_phitran() {
    if (GetArenaForAllocation() == nullptr && _impl_.phitran_ != nullptr) {
        delete _impl_.phitran_;
    }
    _impl_.phitran_ = nullptr;
}
void CpgState::clear_phitranst() {
    if (GetArenaForAllocation() == nullptr && _impl_.phitranst_ != nullptr) {
        delete _impl_.phitranst_;
    }
    _impl_.phitranst_ = nullptr;
}
void CpgState::clear_phitransw() {
    if (GetArenaForAllocation() == nullptr && _impl_.phitransw_ != nullptr) {
        delete _impl_.phitransw_;
    }
    _impl_.phitransw_ = nullptr;
}
void CpgState::clear_step() {
    if (GetArenaForAllocation() == nullptr && _impl_.step_ != nullptr) {
        delete _impl_.step_;
    }
    _impl_.step_ = nullptr;
}
CpgState::CpgState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                   bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.CpgState)
}
CpgState::CpgState(const CpgState& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    CpgState* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.periods_){nullptr}
                        , decltype(_impl_.phases_){nullptr}
                        , decltype(_impl_.phi_){nullptr}
                        , decltype(_impl_.phitogo_){nullptr}
                        , decltype(_impl_.phist_){nullptr}
                        , decltype(_impl_.phisw_){nullptr}
                        , decltype(_impl_.cpg_){nullptr}
                        , decltype(_impl_.contact_){nullptr}
                        , decltype(_impl_.phasechangeflag_){nullptr}
                        , decltype(_impl_.periodchangeflag_){nullptr}
                        , decltype(_impl_.phasediff_){nullptr}
                        , decltype(_impl_.phitran_){nullptr}
                        , decltype(_impl_.phitranst_){nullptr}
                        , decltype(_impl_.phitransw_){nullptr}
                        , decltype(_impl_.step_){nullptr}
                        , decltype(_impl_.dt_){}
                        , decltype(_impl_.air_){}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_periods()) {
        _this->_impl_.periods_ = new ::dtproto::geometry_msgs::Vector2d(*from._impl_.periods_);
    }
    if (from._internal_has_phases()) {
        _this->_impl_.phases_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phases_);
    }
    if (from._internal_has_phi()) {
        _this->_impl_.phi_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phi_);
    }
    if (from._internal_has_phitogo()) {
        _this->_impl_.phitogo_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitogo_);
    }
    if (from._internal_has_phist()) {
        _this->_impl_.phist_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phist_);
    }
    if (from._internal_has_phisw()) {
        _this->_impl_.phisw_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phisw_);
    }
    if (from._internal_has_cpg()) {
        _this->_impl_.cpg_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.cpg_);
    }
    if (from._internal_has_contact()) {
        _this->_impl_.contact_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.contact_);
    }
    if (from._internal_has_phasechangeflag()) {
        _this->_impl_.phasechangeflag_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.phasechangeflag_);
    }
    if (from._internal_has_periodchangeflag()) {
        _this->_impl_.periodchangeflag_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.periodchangeflag_);
    }
    if (from._internal_has_phasediff()) {
        _this->_impl_.phasediff_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phasediff_);
    }
    if (from._internal_has_phitran()) {
        _this->_impl_.phitran_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitran_);
    }
    if (from._internal_has_phitranst()) {
        _this->_impl_.phitranst_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitranst_);
    }
    if (from._internal_has_phitransw()) {
        _this->_impl_.phitransw_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitransw_);
    }
    if (from._internal_has_step()) {
        _this->_impl_.step_ = new ::dtproto::geometry_msgs::Vector4i32(*from._impl_.step_);
    }
    ::memcpy(&_impl_.dt_, &from._impl_.dt_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.air_) -
                                 reinterpret_cast<char*>(&_impl_.dt_)) + sizeof(_impl_.air_));
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.CpgState)
}

inline void CpgState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.periods_){nullptr}
        , decltype(_impl_.phases_){nullptr}
        , decltype(_impl_.phi_){nullptr}
        , decltype(_impl_.phitogo_){nullptr}
        , decltype(_impl_.phist_){nullptr}
        , decltype(_impl_.phisw_){nullptr}
        , decltype(_impl_.cpg_){nullptr}
        , decltype(_impl_.contact_){nullptr}
        , decltype(_impl_.phasechangeflag_){nullptr}
        , decltype(_impl_.periodchangeflag_){nullptr}
        , decltype(_impl_.phasediff_){nullptr}
        , decltype(_impl_.phitran_){nullptr}
        , decltype(_impl_.phitranst_){nullptr}
        , decltype(_impl_.phitransw_){nullptr}
        , decltype(_impl_.step_){nullptr}
        , decltype(_impl_.dt_){0}
        , decltype(_impl_.air_){false}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

CpgState::~CpgState() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.CpgState)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void CpgState::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.periods_;
    if (this != internal_default_instance()) delete _impl_.phases_;
    if (this != internal_default_instance()) delete _impl_.phi_;
    if (this != internal_default_instance()) delete _impl_.phitogo_;
    if (this != internal_default_instance()) delete _impl_.phist_;
    if (this != internal_default_instance()) delete _impl_.phisw_;
    if (this != internal_default_instance()) delete _impl_.cpg_;
    if (this != internal_default_instance()) delete _impl_.contact_;
    if (this != internal_default_instance()) delete _impl_.phasechangeflag_;
    if (this != internal_default_instance()) delete _impl_.periodchangeflag_;
    if (this != internal_default_instance()) delete _impl_.phasediff_;
    if (this != internal_default_instance()) delete _impl_.phitran_;
    if (this != internal_default_instance()) delete _impl_.phitranst_;
    if (this != internal_default_instance()) delete _impl_.phitransw_;
    if (this != internal_default_instance()) delete _impl_.step_;
}

void CpgState::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void CpgState::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.CpgState)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.periods_ != nullptr) {
        delete _impl_.periods_;
    }
    _impl_.periods_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phases_ != nullptr) {
        delete _impl_.phases_;
    }
    _impl_.phases_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phi_ != nullptr) {
        delete _impl_.phi_;
    }
    _impl_.phi_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phitogo_ != nullptr) {
        delete _impl_.phitogo_;
    }
    _impl_.phitogo_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phist_ != nullptr) {
        delete _impl_.phist_;
    }
    _impl_.phist_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phisw_ != nullptr) {
        delete _impl_.phisw_;
    }
    _impl_.phisw_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.cpg_ != nullptr) {
        delete _impl_.cpg_;
    }
    _impl_.cpg_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
        delete _impl_.contact_;
    }
    _impl_.contact_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phasechangeflag_ != nullptr) {
        delete _impl_.phasechangeflag_;
    }
    _impl_.phasechangeflag_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.periodchangeflag_ != nullptr) {
        delete _impl_.periodchangeflag_;
    }
    _impl_.periodchangeflag_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phasediff_ != nullptr) {
        delete _impl_.phasediff_;
    }
    _impl_.phasediff_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phitran_ != nullptr) {
        delete _impl_.phitran_;
    }
    _impl_.phitran_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phitranst_ != nullptr) {
        delete _impl_.phitranst_;
    }
    _impl_.phitranst_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.phitransw_ != nullptr) {
        delete _impl_.phitransw_;
    }
    _impl_.phitransw_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.step_ != nullptr) {
        delete _impl_.step_;
    }
    _impl_.step_ = nullptr;
    ::memset(&_impl_.dt_, 0, static_cast<size_t>(
                                 reinterpret_cast<char*>(&_impl_.air_) -
                                 reinterpret_cast<char*>(&_impl_.dt_)) + sizeof(_impl_.air_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpgState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.geometry_msgs.Vector2d periods = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_periods(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phases = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_phases(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phi = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                ptr = ctx->ParseMessage(_internal_mutable_phi(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
        case 4:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                ptr = ctx->ParseMessage(_internal_mutable_phitogo(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phiSt = 5;
        case 5:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
                ptr = ctx->ParseMessage(_internal_mutable_phist(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phiSw = 6;
        case 6:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
                ptr = ctx->ParseMessage(_internal_mutable_phisw(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d cpg = 7;
        case 7:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
                ptr = ctx->ParseMessage(_internal_mutable_cpg(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4b contact = 8;
        case 8:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
                ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
        case 9:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
                ptr = ctx->ParseMessage(_internal_mutable_phasechangeflag(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
        case 10:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
                ptr = ctx->ParseMessage(_internal_mutable_periodchangeflag(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
        case 11:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
                ptr = ctx->ParseMessage(_internal_mutable_phasediff(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phiTran = 12;
        case 12:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
                ptr = ctx->ParseMessage(_internal_mutable_phitran(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
        case 13:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
                ptr = ctx->ParseMessage(_internal_mutable_phitranst(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
        case 14:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
                ptr = ctx->ParseMessage(_internal_mutable_phitransw(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.geometry_msgs.Vector4i32 step = 15;
        case 15:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
                ptr = ctx->ParseMessage(_internal_mutable_step(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // double dt = 16;
        case 16:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
                _impl_.dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            } else
                goto handle_unusual;
            continue;
        // bool air = 17;
        case 17:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
                _impl_.air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* CpgState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.CpgState)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.geometry_msgs.Vector2d periods = 1;
    if (this->_internal_has_periods()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::periods(this),
                                 _Internal::periods(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phases = 2;
    if (this->_internal_has_phases()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::phases(this),
                                 _Internal::phases(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phi = 3;
    if (this->_internal_has_phi()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(3, _Internal::phi(this),
                                 _Internal::phi(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
    if (this->_internal_has_phitogo()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(4, _Internal::phitogo(this),
                                 _Internal::phitogo(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phiSt = 5;
    if (this->_internal_has_phist()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(5, _Internal::phist(this),
                                 _Internal::phist(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phiSw = 6;
    if (this->_internal_has_phisw()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(6, _Internal::phisw(this),
                                 _Internal::phisw(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d cpg = 7;
    if (this->_internal_has_cpg()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(7, _Internal::cpg(this),
                                 _Internal::cpg(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4b contact = 8;
    if (this->_internal_has_contact()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(8, _Internal::contact(this),
                                 _Internal::contact(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
    if (this->_internal_has_phasechangeflag()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(9, _Internal::phasechangeflag(this),
                                 _Internal::phasechangeflag(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
    if (this->_internal_has_periodchangeflag()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(10, _Internal::periodchangeflag(this),
                                 _Internal::periodchangeflag(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
    if (this->_internal_has_phasediff()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(11, _Internal::phasediff(this),
                                 _Internal::phasediff(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phiTran = 12;
    if (this->_internal_has_phitran()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(12, _Internal::phitran(this),
                                 _Internal::phitran(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
    if (this->_internal_has_phitranst()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(13, _Internal::phitranst(this),
                                 _Internal::phitranst(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
    if (this->_internal_has_phitransw()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(14, _Internal::phitransw(this),
                                 _Internal::phitransw(this).GetCachedSize(), target, stream);
    }

    // .dtproto.geometry_msgs.Vector4i32 step = 15;
    if (this->_internal_has_step()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(15, _Internal::step(this),
                                 _Internal::step(this).GetCachedSize(), target, stream);
    }

    // double dt = 16;
    static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
    double tmp_dt = this->_internal_dt();
    uint64_t raw_dt;
    memcpy(&raw_dt, &tmp_dt, sizeof(tmp_dt));
    if (raw_dt != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_dt(), target);
    }

    // bool air = 17;
    if (this->_internal_air() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_air(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.CpgState)
    return target;
}

size_t CpgState::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.CpgState)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .dtproto.geometry_msgs.Vector2d periods = 1;
    if (this->_internal_has_periods()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.periods_);
    }

    // .dtproto.geometry_msgs.Vector4d phases = 2;
    if (this->_internal_has_phases()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phases_);
    }

    // .dtproto.geometry_msgs.Vector4d phi = 3;
    if (this->_internal_has_phi()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phi_);
    }

    // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
    if (this->_internal_has_phitogo()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phitogo_);
    }

    // .dtproto.geometry_msgs.Vector4d phiSt = 5;
    if (this->_internal_has_phist()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phist_);
    }

    // .dtproto.geometry_msgs.Vector4d phiSw = 6;
    if (this->_internal_has_phisw()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phisw_);
    }

    // .dtproto.geometry_msgs.Vector4d cpg = 7;
    if (this->_internal_has_cpg()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.cpg_);
    }

    // .dtproto.geometry_msgs.Vector4b contact = 8;
    if (this->_internal_has_contact()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.contact_);
    }

    // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
    if (this->_internal_has_phasechangeflag()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phasechangeflag_);
    }

    // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
    if (this->_internal_has_periodchangeflag()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.periodchangeflag_);
    }

    // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
    if (this->_internal_has_phasediff()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phasediff_);
    }

    // .dtproto.geometry_msgs.Vector4d phiTran = 12;
    if (this->_internal_has_phitran()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phitran_);
    }

    // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
    if (this->_internal_has_phitranst()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phitranst_);
    }

    // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
    if (this->_internal_has_phitransw()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.phitransw_);
    }

    // .dtproto.geometry_msgs.Vector4i32 step = 15;
    if (this->_internal_has_step()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.step_);
    }

    // double dt = 16;
    static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
    double tmp_dt = this->_internal_dt();
    uint64_t raw_dt;
    memcpy(&raw_dt, &tmp_dt, sizeof(tmp_dt));
    if (raw_dt != 0) {
        total_size += 2 + 8;
    }

    // bool air = 17;
    if (this->_internal_air() != 0) {
        total_size += 2 + 1;
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpgState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpgState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpgState::GetClassData() const { return &_class_data_; }


void CpgState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<CpgState*>(&to_msg);
    auto& from = static_cast<const CpgState&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.CpgState)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    if (from._internal_has_periods()) {
        _this->_internal_mutable_periods()->::dtproto::geometry_msgs::Vector2d::MergeFrom(
            from._internal_periods());
    }
    if (from._internal_has_phases()) {
        _this->_internal_mutable_phases()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phases());
    }
    if (from._internal_has_phi()) {
        _this->_internal_mutable_phi()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phi());
    }
    if (from._internal_has_phitogo()) {
        _this->_internal_mutable_phitogo()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phitogo());
    }
    if (from._internal_has_phist()) {
        _this->_internal_mutable_phist()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phist());
    }
    if (from._internal_has_phisw()) {
        _this->_internal_mutable_phisw()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phisw());
    }
    if (from._internal_has_cpg()) {
        _this->_internal_mutable_cpg()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_cpg());
    }
    if (from._internal_has_contact()) {
        _this->_internal_mutable_contact()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
            from._internal_contact());
    }
    if (from._internal_has_phasechangeflag()) {
        _this->_internal_mutable_phasechangeflag()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
            from._internal_phasechangeflag());
    }
    if (from._internal_has_periodchangeflag()) {
        _this->_internal_mutable_periodchangeflag()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
            from._internal_periodchangeflag());
    }
    if (from._internal_has_phasediff()) {
        _this->_internal_mutable_phasediff()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phasediff());
    }
    if (from._internal_has_phitran()) {
        _this->_internal_mutable_phitran()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phitran());
    }
    if (from._internal_has_phitranst()) {
        _this->_internal_mutable_phitranst()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phitranst());
    }
    if (from._internal_has_phitransw()) {
        _this->_internal_mutable_phitransw()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
            from._internal_phitransw());
    }
    if (from._internal_has_step()) {
        _this->_internal_mutable_step()->::dtproto::geometry_msgs::Vector4i32::MergeFrom(
            from._internal_step());
    }
    static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
    double tmp_dt = from._internal_dt();
    uint64_t raw_dt;
    memcpy(&raw_dt, &tmp_dt, sizeof(tmp_dt));
    if (raw_dt != 0) {
        _this->_internal_set_dt(from._internal_dt());
    }
    if (from._internal_air() != 0) {
        _this->_internal_set_air(from._internal_air());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpgState::CopyFrom(const CpgState& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.CpgState)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CpgState::IsInitialized() const {
    return true;
}

void CpgState::InternalSwap(CpgState* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(CpgState, _impl_.air_)
        + sizeof(CpgState::_impl_.air_)
        - PROTOBUF_FIELD_OFFSET(CpgState, _impl_.periods_)>(
        reinterpret_cast<char*>(&_impl_.periods_),
        reinterpret_cast<char*>(&other->_impl_.periods_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpgState::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[4]);
}

// ===================================================================

class CpgStateTimeStamped::_Internal {
public:
    static const ::dtproto::std_msgs::Header& header(const CpgStateTimeStamped* msg);
    static const ::dtproto::quadip::CpgState& state(const CpgStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
CpgStateTimeStamped::_Internal::header(const CpgStateTimeStamped* msg) {
    return *msg->_impl_.header_;
}
const ::dtproto::quadip::CpgState&
CpgStateTimeStamped::_Internal::state(const CpgStateTimeStamped* msg) {
    return *msg->_impl_.state_;
}
void CpgStateTimeStamped::clear_header() {
    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
}
CpgStateTimeStamped::CpgStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                         bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.CpgStateTimeStamped)
}
CpgStateTimeStamped::CpgStateTimeStamped(const CpgStateTimeStamped& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    CpgStateTimeStamped* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.header_){nullptr}
                        , decltype(_impl_.state_){nullptr}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_header()) {
        _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
    }
    if (from._internal_has_state()) {
        _this->_impl_.state_ = new ::dtproto::quadip::CpgState(*from._impl_.state_);
    }
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.CpgStateTimeStamped)
}

inline void CpgStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.header_){nullptr}
        , decltype(_impl_.state_){nullptr}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

CpgStateTimeStamped::~CpgStateTimeStamped() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.CpgStateTimeStamped)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void CpgStateTimeStamped::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.header_;
    if (this != internal_default_instance()) delete _impl_.state_;
}

void CpgStateTimeStamped::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void CpgStateTimeStamped::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.CpgStateTimeStamped)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
        delete _impl_.state_;
    }
    _impl_.state_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpgStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.std_msgs.Header header = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.CpgState state = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* CpgStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.CpgStateTimeStamped)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::header(this),
                                 _Internal::header(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.CpgState state = 2;
    if (this->_internal_has_state()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::state(this),
                                 _Internal::state(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.CpgStateTimeStamped)
    return target;
}

size_t CpgStateTimeStamped::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.CpgStateTimeStamped)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.header_);
    }

    // .dtproto.quadip.CpgState state = 2;
    if (this->_internal_has_state()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.state_);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpgStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpgStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpgStateTimeStamped::GetClassData() const { return &_class_data_; }


void CpgStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<CpgStateTimeStamped*>(&to_msg);
    auto& from = static_cast<const CpgStateTimeStamped&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.CpgStateTimeStamped)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    if (from._internal_has_header()) {
        _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
            from._internal_header());
    }
    if (from._internal_has_state()) {
        _this->_internal_mutable_state()->::dtproto::quadip::CpgState::MergeFrom(
            from._internal_state());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpgStateTimeStamped::CopyFrom(const CpgStateTimeStamped& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.CpgStateTimeStamped)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CpgStateTimeStamped::IsInitialized() const {
    return true;
}

void CpgStateTimeStamped::InternalSwap(CpgStateTimeStamped* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(CpgStateTimeStamped, _impl_.state_)
        + sizeof(CpgStateTimeStamped::_impl_.state_)
        - PROTOBUF_FIELD_OFFSET(CpgStateTimeStamped, _impl_.header_)>(
        reinterpret_cast<char*>(&_impl_.header_),
        reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpgStateTimeStamped::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[5]);
}

// ===================================================================

class QuadIpState::_Internal {
public:
    static const ::dtproto::quadip::JointState& jointstate(const QuadIpState* msg);
    static const ::dtproto::quadip::ControlState& controlstatedesired(const QuadIpState* msg);
    static const ::dtproto::quadip::ControlState& controlstateactual(const QuadIpState* msg);
    static const ::dtproto::quadip::CpgState& cpgstate(const QuadIpState* msg);
};

const ::dtproto::quadip::JointState&
QuadIpState::_Internal::jointstate(const QuadIpState* msg) {
    return *msg->_impl_.jointstate_;
}
const ::dtproto::quadip::ControlState&
QuadIpState::_Internal::controlstatedesired(const QuadIpState* msg) {
    return *msg->_impl_.controlstatedesired_;
}
const ::dtproto::quadip::ControlState&
QuadIpState::_Internal::controlstateactual(const QuadIpState* msg) {
    return *msg->_impl_.controlstateactual_;
}
const ::dtproto::quadip::CpgState&
QuadIpState::_Internal::cpgstate(const QuadIpState* msg) {
    return *msg->_impl_.cpgstate_;
}
QuadIpState::QuadIpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.QuadIpState)
}
QuadIpState::QuadIpState(const QuadIpState& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    QuadIpState* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.jointstate_){nullptr}
                        , decltype(_impl_.controlstatedesired_){nullptr}
                        , decltype(_impl_.controlstateactual_){nullptr}
                        , decltype(_impl_.cpgstate_){nullptr}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_jointstate()) {
        _this->_impl_.jointstate_ = new ::dtproto::quadip::JointState(*from._impl_.jointstate_);
    }
    if (from._internal_has_controlstatedesired()) {
        _this->_impl_.controlstatedesired_ = new ::dtproto::quadip::ControlState(*from._impl_.controlstatedesired_);
    }
    if (from._internal_has_controlstateactual()) {
        _this->_impl_.controlstateactual_ = new ::dtproto::quadip::ControlState(*from._impl_.controlstateactual_);
    }
    if (from._internal_has_cpgstate()) {
        _this->_impl_.cpgstate_ = new ::dtproto::quadip::CpgState(*from._impl_.cpgstate_);
    }
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.QuadIpState)
}

inline void QuadIpState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.jointstate_){nullptr}
        , decltype(_impl_.controlstatedesired_){nullptr}
        , decltype(_impl_.controlstateactual_){nullptr}
        , decltype(_impl_.cpgstate_){nullptr}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

QuadIpState::~QuadIpState() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.QuadIpState)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void QuadIpState::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.jointstate_;
    if (this != internal_default_instance()) delete _impl_.controlstatedesired_;
    if (this != internal_default_instance()) delete _impl_.controlstateactual_;
    if (this != internal_default_instance()) delete _impl_.cpgstate_;
}

void QuadIpState::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void QuadIpState::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.QuadIpState)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.jointstate_ != nullptr) {
        delete _impl_.jointstate_;
    }
    _impl_.jointstate_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.controlstatedesired_ != nullptr) {
        delete _impl_.controlstatedesired_;
    }
    _impl_.controlstatedesired_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.controlstateactual_ != nullptr) {
        delete _impl_.controlstateactual_;
    }
    _impl_.controlstateactual_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.cpgstate_ != nullptr) {
        delete _impl_.cpgstate_;
    }
    _impl_.cpgstate_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadIpState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.quadip.JointState jointState = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_jointstate(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.ControlState controlStateDesired = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_controlstatedesired(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.ControlState controlStateActual = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                ptr = ctx->ParseMessage(_internal_mutable_controlstateactual(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.CpgState cpgState = 4;
        case 4:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                ptr = ctx->ParseMessage(_internal_mutable_cpgstate(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* QuadIpState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.QuadIpState)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.quadip.JointState jointState = 1;
    if (this->_internal_has_jointstate()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::jointstate(this),
                                 _Internal::jointstate(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.ControlState controlStateDesired = 2;
    if (this->_internal_has_controlstatedesired()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::controlstatedesired(this),
                                 _Internal::controlstatedesired(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.ControlState controlStateActual = 3;
    if (this->_internal_has_controlstateactual()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(3, _Internal::controlstateactual(this),
                                 _Internal::controlstateactual(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.CpgState cpgState = 4;
    if (this->_internal_has_cpgstate()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(4, _Internal::cpgstate(this),
                                 _Internal::cpgstate(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.QuadIpState)
    return target;
}

size_t QuadIpState::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.QuadIpState)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .dtproto.quadip.JointState jointState = 1;
    if (this->_internal_has_jointstate()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.jointstate_);
    }

    // .dtproto.quadip.ControlState controlStateDesired = 2;
    if (this->_internal_has_controlstatedesired()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.controlstatedesired_);
    }

    // .dtproto.quadip.ControlState controlStateActual = 3;
    if (this->_internal_has_controlstateactual()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.controlstateactual_);
    }

    // .dtproto.quadip.CpgState cpgState = 4;
    if (this->_internal_has_cpgstate()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.cpgstate_);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadIpState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuadIpState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadIpState::GetClassData() const { return &_class_data_; }


void QuadIpState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<QuadIpState*>(&to_msg);
    auto& from = static_cast<const QuadIpState&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.QuadIpState)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    if (from._internal_has_jointstate()) {
        _this->_internal_mutable_jointstate()->::dtproto::quadip::JointState::MergeFrom(
            from._internal_jointstate());
    }
    if (from._internal_has_controlstatedesired()) {
        _this->_internal_mutable_controlstatedesired()->::dtproto::quadip::ControlState::MergeFrom(
            from._internal_controlstatedesired());
    }
    if (from._internal_has_controlstateactual()) {
        _this->_internal_mutable_controlstateactual()->::dtproto::quadip::ControlState::MergeFrom(
            from._internal_controlstateactual());
    }
    if (from._internal_has_cpgstate()) {
        _this->_internal_mutable_cpgstate()->::dtproto::quadip::CpgState::MergeFrom(
            from._internal_cpgstate());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadIpState::CopyFrom(const QuadIpState& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.QuadIpState)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool QuadIpState::IsInitialized() const {
    return true;
}

void QuadIpState::InternalSwap(QuadIpState* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(QuadIpState, _impl_.cpgstate_)
        + sizeof(QuadIpState::_impl_.cpgstate_)
        - PROTOBUF_FIELD_OFFSET(QuadIpState, _impl_.jointstate_)>(
        reinterpret_cast<char*>(&_impl_.jointstate_),
        reinterpret_cast<char*>(&other->_impl_.jointstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadIpState::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[6]);
}

// ===================================================================

class QuadIpStateTimeStamped::_Internal {
public:
    static const ::dtproto::std_msgs::Header& header(const QuadIpStateTimeStamped* msg);
    static const ::dtproto::quadip::QuadIpState& state(const QuadIpStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
QuadIpStateTimeStamped::_Internal::header(const QuadIpStateTimeStamped* msg) {
    return *msg->_impl_.header_;
}
const ::dtproto::quadip::QuadIpState&
QuadIpStateTimeStamped::_Internal::state(const QuadIpStateTimeStamped* msg) {
    return *msg->_impl_.state_;
}
void QuadIpStateTimeStamped::clear_header() {
    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
}
QuadIpStateTimeStamped::QuadIpStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                               bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:dtproto.quadip.QuadIpStateTimeStamped)
}
QuadIpStateTimeStamped::QuadIpStateTimeStamped(const QuadIpStateTimeStamped& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    QuadIpStateTimeStamped* const _this = this; (void)_this;
    new (&_impl_) Impl_{
                        decltype(_impl_.header_){nullptr}
                        , decltype(_impl_.state_){nullptr}
                        , /*decltype(_impl_._cached_size_)*/{}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_header()) {
        _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
    }
    if (from._internal_has_state()) {
        _this->_impl_.state_ = new ::dtproto::quadip::QuadIpState(*from._impl_.state_);
    }
    // @@protoc_insertion_point(copy_constructor:dtproto.quadip.QuadIpStateTimeStamped)
}

inline void QuadIpStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.header_){nullptr}
        , decltype(_impl_.state_){nullptr}
        , /*decltype(_impl_._cached_size_)*/{}
    };
}

QuadIpStateTimeStamped::~QuadIpStateTimeStamped() {
    // @@protoc_insertion_point(destructor:dtproto.quadip.QuadIpStateTimeStamped)
    if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void QuadIpStateTimeStamped::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.header_;
    if (this != internal_default_instance()) delete _impl_.state_;
}

void QuadIpStateTimeStamped::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void QuadIpStateTimeStamped::Clear() {
    // @@protoc_insertion_point(message_clear_start:dtproto.quadip.QuadIpStateTimeStamped)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
        delete _impl_.header_;
    }
    _impl_.header_ = nullptr;
    if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
        delete _impl_.state_;
    }
    _impl_.state_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadIpStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .dtproto.std_msgs.Header header = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // .dtproto.quadip.QuadIpState state = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default:
            goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* QuadIpStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:dtproto.quadip.QuadIpStateTimeStamped)
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::header(this),
                                 _Internal::header(this).GetCachedSize(), target, stream);
    }

    // .dtproto.quadip.QuadIpState state = 2;
    if (this->_internal_has_state()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, _Internal::state(this),
                                 _Internal::state(this).GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:dtproto.quadip.QuadIpStateTimeStamped)
    return target;
}

size_t QuadIpStateTimeStamped::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:dtproto.quadip.QuadIpStateTimeStamped)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .dtproto.std_msgs.Header header = 1;
    if (this->_internal_has_header()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.header_);
    }

    // .dtproto.quadip.QuadIpState state = 2;
    if (this->_internal_has_state()) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *_impl_.state_);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadIpStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuadIpStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadIpStateTimeStamped::GetClassData() const { return &_class_data_; }


void QuadIpStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<QuadIpStateTimeStamped*>(&to_msg);
    auto& from = static_cast<const QuadIpStateTimeStamped&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.quadip.QuadIpStateTimeStamped)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void) cached_has_bits;

    if (from._internal_has_header()) {
        _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
            from._internal_header());
    }
    if (from._internal_has_state()) {
        _this->_internal_mutable_state()->::dtproto::quadip::QuadIpState::MergeFrom(
            from._internal_state());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadIpStateTimeStamped::CopyFrom(const QuadIpStateTimeStamped& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:dtproto.quadip.QuadIpStateTimeStamped)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool QuadIpStateTimeStamped::IsInitialized() const {
    return true;
}

void QuadIpStateTimeStamped::InternalSwap(QuadIpStateTimeStamped* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(QuadIpStateTimeStamped, _impl_.state_)
        + sizeof(QuadIpStateTimeStamped::_impl_.state_)
        - PROTOBUF_FIELD_OFFSET(QuadIpStateTimeStamped, _impl_.header_)>(
        reinterpret_cast<char*>(&_impl_.header_),
        reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadIpStateTimeStamped::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_QuadIP_2eproto_getter, &descriptor_table_QuadIP_2eproto_once,
        file_level_metadata_QuadIP_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace quadip
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
    template<> PROTOBUF_NOINLINE ::dtproto::quadip::JointState*
    Arena::CreateMaybeMessage< ::dtproto::quadip::JointState >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::JointStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::quadip::JointStateTimeStamped >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::JointStateTimeStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::ControlState*
Arena::CreateMaybeMessage< ::dtproto::quadip::ControlState >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::ControlState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::ControlStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::quadip::ControlStateTimeStamped >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::ControlStateTimeStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::CpgState*
Arena::CreateMaybeMessage< ::dtproto::quadip::CpgState >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::CpgState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::CpgStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::quadip::CpgStateTimeStamped >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::CpgStateTimeStamped >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::QuadIpState*
Arena::CreateMaybeMessage< ::dtproto::quadip::QuadIpState >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::QuadIpState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::quadip::QuadIpStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::quadip::QuadIpStateTimeStamped >(Arena* arena) {
    return Arena::CreateMessageInternal< ::dtproto::quadip::QuadIpStateTimeStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
