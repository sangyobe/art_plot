// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LeoQuad.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LeoQuad_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LeoQuad_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dtProto/std_msgs/Header.pb.h"
#include "dtProto/geometry_msgs/Point.pb.h"
#include "dtProto/geometry_msgs/Wrench.pb.h"
#include "dtProto/geometry_msgs/Orientation.pb.h"
#include "dtProto/geometry_msgs/Matrix.pb.h"
#include "dtProto/geometry_msgs/Vector.pb.h"
#include "dtProto/sensor_msgs/Imu.pb.h"
#include "dtProto/sensor_msgs/Joy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LeoQuad_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LeoQuad_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LeoQuad_2eproto;
namespace dtproto {
namespace leoquad {
class ControlState;
struct ControlStateDefaultTypeInternal;
extern ControlStateDefaultTypeInternal _ControlState_default_instance_;
class JointData;
struct JointDataDefaultTypeInternal;
extern JointDataDefaultTypeInternal _JointData_default_instance_;
class JointState;
struct JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
class LeoQuadState;
struct LeoQuadStateDefaultTypeInternal;
extern LeoQuadStateDefaultTypeInternal _LeoQuadState_default_instance_;
class LeoQuadStateTimeStamped;
struct LeoQuadStateTimeStampedDefaultTypeInternal;
extern LeoQuadStateTimeStampedDefaultTypeInternal _LeoQuadStateTimeStamped_default_instance_;
class TaskState;
struct TaskStateDefaultTypeInternal;
extern TaskStateDefaultTypeInternal _TaskState_default_instance_;
}  // namespace leoquad
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::leoquad::ControlState* Arena::CreateMaybeMessage<::dtproto::leoquad::ControlState>(Arena*);
template<> ::dtproto::leoquad::JointData* Arena::CreateMaybeMessage<::dtproto::leoquad::JointData>(Arena*);
template<> ::dtproto::leoquad::JointState* Arena::CreateMaybeMessage<::dtproto::leoquad::JointState>(Arena*);
template<> ::dtproto::leoquad::LeoQuadState* Arena::CreateMaybeMessage<::dtproto::leoquad::LeoQuadState>(Arena*);
template<> ::dtproto::leoquad::LeoQuadStateTimeStamped* Arena::CreateMaybeMessage<::dtproto::leoquad::LeoQuadStateTimeStamped>(Arena*);
template<> ::dtproto::leoquad::TaskState* Arena::CreateMaybeMessage<::dtproto::leoquad::TaskState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace leoquad {

// ===================================================================

class TaskState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.leoquad.TaskState) */ {
 public:
  inline TaskState() : TaskState(nullptr) {}
  ~TaskState() override;
  explicit PROTOBUF_CONSTEXPR TaskState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskState(const TaskState& from);
  TaskState(TaskState&& from) noexcept
    : TaskState() {
    *this = ::std::move(from);
  }

  inline TaskState& operator=(const TaskState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskState& operator=(TaskState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskState* internal_default_instance() {
    return reinterpret_cast<const TaskState*>(
               &_TaskState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskState& a, TaskState& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskState& from) {
    TaskState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.leoquad.TaskState";
  }
  protected:
  explicit TaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kRotFieldNumber = 2,
    kLinVelFieldNumber = 3,
    kAngVelFieldNumber = 4,
    kForceFieldNumber = 5,
    kMomentFieldNumber = 6,
    kWrenchFieldNumber = 7,
    kIdFieldNumber = 8,
  };
  // .dtproto.geometry_msgs.Point3d pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::dtproto::geometry_msgs::Point3d& pos() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_pos();
  ::dtproto::geometry_msgs::Point3d* mutable_pos();
  void set_allocated_pos(::dtproto::geometry_msgs::Point3d* pos);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_pos() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::dtproto::geometry_msgs::Point3d* pos);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_pos();

  // .dtproto.geometry_msgs.Rotation rot = 2;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::dtproto::geometry_msgs::Rotation& rot() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Rotation* release_rot();
  ::dtproto::geometry_msgs::Rotation* mutable_rot();
  void set_allocated_rot(::dtproto::geometry_msgs::Rotation* rot);
  private:
  const ::dtproto::geometry_msgs::Rotation& _internal_rot() const;
  ::dtproto::geometry_msgs::Rotation* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::dtproto::geometry_msgs::Rotation* rot);
  ::dtproto::geometry_msgs::Rotation* unsafe_arena_release_rot();

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  bool has_linvel() const;
  private:
  bool _internal_has_linvel() const;
  public:
  void clear_linvel();
  const ::dtproto::geometry_msgs::Point3d& linvel() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_linvel();
  ::dtproto::geometry_msgs::Point3d* mutable_linvel();
  void set_allocated_linvel(::dtproto::geometry_msgs::Point3d* linvel);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_linvel() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_linvel();
  public:
  void unsafe_arena_set_allocated_linvel(
      ::dtproto::geometry_msgs::Point3d* linvel);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_linvel();

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  bool has_angvel() const;
  private:
  bool _internal_has_angvel() const;
  public:
  void clear_angvel();
  const ::dtproto::geometry_msgs::Point3d& angvel() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_angvel();
  ::dtproto::geometry_msgs::Point3d* mutable_angvel();
  void set_allocated_angvel(::dtproto::geometry_msgs::Point3d* angvel);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_angvel() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_angvel();
  public:
  void unsafe_arena_set_allocated_angvel(
      ::dtproto::geometry_msgs::Point3d* angvel);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_angvel();

  // .dtproto.geometry_msgs.Point3d force = 5;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::dtproto::geometry_msgs::Point3d& force() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_force();
  ::dtproto::geometry_msgs::Point3d* mutable_force();
  void set_allocated_force(::dtproto::geometry_msgs::Point3d* force);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_force() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::dtproto::geometry_msgs::Point3d* force);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_force();

  // .dtproto.geometry_msgs.Point3d moment = 6;
  bool has_moment() const;
  private:
  bool _internal_has_moment() const;
  public:
  void clear_moment();
  const ::dtproto::geometry_msgs::Point3d& moment() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_moment();
  ::dtproto::geometry_msgs::Point3d* mutable_moment();
  void set_allocated_moment(::dtproto::geometry_msgs::Point3d* moment);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_moment() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_moment();
  public:
  void unsafe_arena_set_allocated_moment(
      ::dtproto::geometry_msgs::Point3d* moment);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_moment();

  // .dtproto.geometry_msgs.Wrench wrench = 7;
  bool has_wrench() const;
  private:
  bool _internal_has_wrench() const;
  public:
  void clear_wrench();
  const ::dtproto::geometry_msgs::Wrench& wrench() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Wrench* release_wrench();
  ::dtproto::geometry_msgs::Wrench* mutable_wrench();
  void set_allocated_wrench(::dtproto::geometry_msgs::Wrench* wrench);
  private:
  const ::dtproto::geometry_msgs::Wrench& _internal_wrench() const;
  ::dtproto::geometry_msgs::Wrench* _internal_mutable_wrench();
  public:
  void unsafe_arena_set_allocated_wrench(
      ::dtproto::geometry_msgs::Wrench* wrench);
  ::dtproto::geometry_msgs::Wrench* unsafe_arena_release_wrench();

  // uint32 id = 8;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.leoquad.TaskState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::geometry_msgs::Point3d* pos_;
    ::dtproto::geometry_msgs::Rotation* rot_;
    ::dtproto::geometry_msgs::Point3d* linvel_;
    ::dtproto::geometry_msgs::Point3d* angvel_;
    ::dtproto::geometry_msgs::Point3d* force_;
    ::dtproto::geometry_msgs::Point3d* moment_;
    ::dtproto::geometry_msgs::Wrench* wrench_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LeoQuad_2eproto;
};
// -------------------------------------------------------------------

class JointState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.leoquad.JointState) */ {
 public:
  inline JointState() : JointState(nullptr) {}
  ~JointState() override;
  explicit PROTOBUF_CONSTEXPR JointState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointState(const JointState& from);
  JointState(JointState&& from) noexcept
    : JointState() {
    *this = ::std::move(from);
  }

  inline JointState& operator=(const JointState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointState& operator=(JointState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointState& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointState* internal_default_instance() {
    return reinterpret_cast<const JointState*>(
               &_JointState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JointState& a, JointState& b) {
    a.Swap(&b);
  }
  inline void Swap(JointState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JointState& from) {
    JointState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.leoquad.JointState";
  }
  protected:
  explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusWordFieldNumber = 1,
    kControlWordFieldNumber = 2,
    kIncPosOfsCntFieldNumber = 3,
    kAbsPosOfsCntFieldNumber = 4,
    kIncPosCntFieldNumber = 5,
    kAbsPosCntFieldNumber = 6,
    kIncVelCpsFieldNumber = 7,
    kMcuTempCFieldNumber = 8,
    kInvTempCFieldNumber = 9,
    kInputVoltVFieldNumber = 10,
    kActPosRadFieldNumber = 11,
    kActAuxRadFieldNumber = 12,
    kActVelRpsFieldNumber = 13,
    kActTorqNmFieldNumber = 14,
    kDesPosRadFieldNumber = 15,
    kDesVelRpsFieldNumber = 16,
    kDesAccRpssFieldNumber = 17,
    kDesTorqNmFieldNumber = 18,
  };
  // uint32 statusWord = 1;
  void clear_statusword();
  uint32_t statusword() const;
  void set_statusword(uint32_t value);
  private:
  uint32_t _internal_statusword() const;
  void _internal_set_statusword(uint32_t value);
  public:

  // uint32 controlWord = 2;
  void clear_controlword();
  uint32_t controlword() const;
  void set_controlword(uint32_t value);
  private:
  uint32_t _internal_controlword() const;
  void _internal_set_controlword(uint32_t value);
  public:

  // int32 incPos_ofs_cnt = 3;
  void clear_incpos_ofs_cnt();
  int32_t incpos_ofs_cnt() const;
  void set_incpos_ofs_cnt(int32_t value);
  private:
  int32_t _internal_incpos_ofs_cnt() const;
  void _internal_set_incpos_ofs_cnt(int32_t value);
  public:

  // int32 absPosOfs_cnt = 4;
  void clear_absposofs_cnt();
  int32_t absposofs_cnt() const;
  void set_absposofs_cnt(int32_t value);
  private:
  int32_t _internal_absposofs_cnt() const;
  void _internal_set_absposofs_cnt(int32_t value);
  public:

  // int32 incPos_cnt = 5;
  void clear_incpos_cnt();
  int32_t incpos_cnt() const;
  void set_incpos_cnt(int32_t value);
  private:
  int32_t _internal_incpos_cnt() const;
  void _internal_set_incpos_cnt(int32_t value);
  public:

  // int32 absPos_cnt = 6;
  void clear_abspos_cnt();
  int32_t abspos_cnt() const;
  void set_abspos_cnt(int32_t value);
  private:
  int32_t _internal_abspos_cnt() const;
  void _internal_set_abspos_cnt(int32_t value);
  public:

  // int32 incVel_cps = 7;
  void clear_incvel_cps();
  int32_t incvel_cps() const;
  void set_incvel_cps(int32_t value);
  private:
  int32_t _internal_incvel_cps() const;
  void _internal_set_incvel_cps(int32_t value);
  public:

  // float mcuTemp_C = 8;
  void clear_mcutemp_c();
  float mcutemp_c() const;
  void set_mcutemp_c(float value);
  private:
  float _internal_mcutemp_c() const;
  void _internal_set_mcutemp_c(float value);
  public:

  // float invTemp_C = 9;
  void clear_invtemp_c();
  float invtemp_c() const;
  void set_invtemp_c(float value);
  private:
  float _internal_invtemp_c() const;
  void _internal_set_invtemp_c(float value);
  public:

  // float inputVolt_V = 10;
  void clear_inputvolt_v();
  float inputvolt_v() const;
  void set_inputvolt_v(float value);
  private:
  float _internal_inputvolt_v() const;
  void _internal_set_inputvolt_v(float value);
  public:

  // double actPos_rad = 11;
  void clear_actpos_rad();
  double actpos_rad() const;
  void set_actpos_rad(double value);
  private:
  double _internal_actpos_rad() const;
  void _internal_set_actpos_rad(double value);
  public:

  // double actAux_rad = 12;
  void clear_actaux_rad();
  double actaux_rad() const;
  void set_actaux_rad(double value);
  private:
  double _internal_actaux_rad() const;
  void _internal_set_actaux_rad(double value);
  public:

  // double actVel_rps = 13;
  void clear_actvel_rps();
  double actvel_rps() const;
  void set_actvel_rps(double value);
  private:
  double _internal_actvel_rps() const;
  void _internal_set_actvel_rps(double value);
  public:

  // double actTorq_Nm = 14;
  void clear_acttorq_nm();
  double acttorq_nm() const;
  void set_acttorq_nm(double value);
  private:
  double _internal_acttorq_nm() const;
  void _internal_set_acttorq_nm(double value);
  public:

  // double desPos_rad = 15;
  void clear_despos_rad();
  double despos_rad() const;
  void set_despos_rad(double value);
  private:
  double _internal_despos_rad() const;
  void _internal_set_despos_rad(double value);
  public:

  // double desVel_rps = 16;
  void clear_desvel_rps();
  double desvel_rps() const;
  void set_desvel_rps(double value);
  private:
  double _internal_desvel_rps() const;
  void _internal_set_desvel_rps(double value);
  public:

  // double desAcc_rpss = 17;
  void clear_desacc_rpss();
  double desacc_rpss() const;
  void set_desacc_rpss(double value);
  private:
  double _internal_desacc_rpss() const;
  void _internal_set_desacc_rpss(double value);
  public:

  // double desTorq_Nm = 18;
  void clear_destorq_nm();
  double destorq_nm() const;
  void set_destorq_nm(double value);
  private:
  double _internal_destorq_nm() const;
  void _internal_set_destorq_nm(double value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.leoquad.JointState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t statusword_;
    uint32_t controlword_;
    int32_t incpos_ofs_cnt_;
    int32_t absposofs_cnt_;
    int32_t incpos_cnt_;
    int32_t abspos_cnt_;
    int32_t incvel_cps_;
    float mcutemp_c_;
    float invtemp_c_;
    float inputvolt_v_;
    double actpos_rad_;
    double actaux_rad_;
    double actvel_rps_;
    double acttorq_nm_;
    double despos_rad_;
    double desvel_rps_;
    double desacc_rpss_;
    double destorq_nm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LeoQuad_2eproto;
};
// -------------------------------------------------------------------

class JointData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.leoquad.JointData) */ {
 public:
  inline JointData() : JointData(nullptr) {}
  ~JointData() override;
  explicit PROTOBUF_CONSTEXPR JointData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointData(const JointData& from);
  JointData(JointData&& from) noexcept
    : JointData() {
    *this = ::std::move(from);
  }

  inline JointData& operator=(const JointData& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointData& operator=(JointData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointData& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointData* internal_default_instance() {
    return reinterpret_cast<const JointData*>(
               &_JointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JointData& a, JointData& b) {
    a.Swap(&b);
  }
  inline void Swap(JointData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JointData& from) {
    JointData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.leoquad.JointData";
  }
  protected:
  explicit JointData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointsFieldNumber = 1,
  };
  // repeated .dtproto.leoquad.JointState joints = 1;
  int joints_size() const;
  private:
  int _internal_joints_size() const;
  public:
  void clear_joints();
  ::dtproto::leoquad::JointState* mutable_joints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::leoquad::JointState >*
      mutable_joints();
  private:
  const ::dtproto::leoquad::JointState& _internal_joints(int index) const;
  ::dtproto::leoquad::JointState* _internal_add_joints();
  public:
  const ::dtproto::leoquad::JointState& joints(int index) const;
  ::dtproto::leoquad::JointState* add_joints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::leoquad::JointState >&
      joints() const;

  // @@protoc_insertion_point(class_scope:dtproto.leoquad.JointData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::leoquad::JointState > joints_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LeoQuad_2eproto;
};
// -------------------------------------------------------------------

class ControlState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.leoquad.ControlState) */ {
 public:
  inline ControlState() : ControlState(nullptr) {}
  ~ControlState() override;
  explicit PROTOBUF_CONSTEXPR ControlState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlState(const ControlState& from);
  ControlState(ControlState&& from) noexcept
    : ControlState() {
    *this = ::std::move(from);
  }

  inline ControlState& operator=(const ControlState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlState& operator=(ControlState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlState* internal_default_instance() {
    return reinterpret_cast<const ControlState*>(
               &_ControlState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControlState& a, ControlState& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlState& from) {
    ControlState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.leoquad.ControlState";
  }
  protected:
  explicit ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosWorld2FootWrtWorldFieldNumber = 9,
    kVelWorld2FootWrtWorldFieldNumber = 10,
    kPosBody2FootWrtWorldFieldNumber = 11,
    kVelBody2FootWrtWorldFieldNumber = 12,
    kPosBody2FootWrtBodyFieldNumber = 13,
    kVelBody2FootWrtBodyFieldNumber = 14,
    kPosWorld2ComWrtWorldFieldNumber = 1,
    kVelWorld2ComWrtWorldFieldNumber = 2,
    kPosWorld2BodyWrtWorldFieldNumber = 3,
    kVelWorld2BodyWrtWorldFieldNumber = 4,
    kEulerAngleBodyWrtWorldFieldNumber = 5,
    kAngularVelBodyWrtWorldFieldNumber = 6,
    kAngularVelBodyWrtBodyFieldNumber = 7,
    kAngularMomentumBodyWrtWorldFieldNumber = 8,
    kRotBodyWrtWorldFieldNumber = 15,
    kContactFieldNumber = 16,
  };
  // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
  int posworld2footwrtworld_size() const;
  private:
  int _internal_posworld2footwrtworld_size() const;
  public:
  void clear_posworld2footwrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_posworld2footwrtworld(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_posworld2footwrtworld();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_posworld2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_posworld2footwrtworld();
  public:
  const ::dtproto::geometry_msgs::Point3d& posworld2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_posworld2footwrtworld();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      posworld2footwrtworld() const;

  // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
  int velworld2footwrtworld_size() const;
  private:
  int _internal_velworld2footwrtworld_size() const;
  public:
  void clear_velworld2footwrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_velworld2footwrtworld(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_velworld2footwrtworld();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_velworld2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_velworld2footwrtworld();
  public:
  const ::dtproto::geometry_msgs::Point3d& velworld2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_velworld2footwrtworld();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      velworld2footwrtworld() const;

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
  int posbody2footwrtworld_size() const;
  private:
  int _internal_posbody2footwrtworld_size() const;
  public:
  void clear_posbody2footwrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_posbody2footwrtworld(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_posbody2footwrtworld();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_posbody2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_posbody2footwrtworld();
  public:
  const ::dtproto::geometry_msgs::Point3d& posbody2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_posbody2footwrtworld();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      posbody2footwrtworld() const;

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
  int velbody2footwrtworld_size() const;
  private:
  int _internal_velbody2footwrtworld_size() const;
  public:
  void clear_velbody2footwrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_velbody2footwrtworld(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_velbody2footwrtworld();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_velbody2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_velbody2footwrtworld();
  public:
  const ::dtproto::geometry_msgs::Point3d& velbody2footwrtworld(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_velbody2footwrtworld();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      velbody2footwrtworld() const;

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
  int posbody2footwrtbody_size() const;
  private:
  int _internal_posbody2footwrtbody_size() const;
  public:
  void clear_posbody2footwrtbody();
  ::dtproto::geometry_msgs::Point3d* mutable_posbody2footwrtbody(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_posbody2footwrtbody();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_posbody2footwrtbody(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_posbody2footwrtbody();
  public:
  const ::dtproto::geometry_msgs::Point3d& posbody2footwrtbody(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_posbody2footwrtbody();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      posbody2footwrtbody() const;

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
  int velbody2footwrtbody_size() const;
  private:
  int _internal_velbody2footwrtbody_size() const;
  public:
  void clear_velbody2footwrtbody();
  ::dtproto::geometry_msgs::Point3d* mutable_velbody2footwrtbody(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_velbody2footwrtbody();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_velbody2footwrtbody(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_velbody2footwrtbody();
  public:
  const ::dtproto::geometry_msgs::Point3d& velbody2footwrtbody(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_velbody2footwrtbody();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      velbody2footwrtbody() const;

  // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
  bool has_posworld2comwrtworld() const;
  private:
  bool _internal_has_posworld2comwrtworld() const;
  public:
  void clear_posworld2comwrtworld();
  const ::dtproto::geometry_msgs::Point3d& posworld2comwrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_posworld2comwrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_posworld2comwrtworld();
  void set_allocated_posworld2comwrtworld(::dtproto::geometry_msgs::Point3d* posworld2comwrtworld);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_posworld2comwrtworld() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_posworld2comwrtworld();
  public:
  void unsafe_arena_set_allocated_posworld2comwrtworld(
      ::dtproto::geometry_msgs::Point3d* posworld2comwrtworld);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_posworld2comwrtworld();

  // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
  bool has_velworld2comwrtworld() const;
  private:
  bool _internal_has_velworld2comwrtworld() const;
  public:
  void clear_velworld2comwrtworld();
  const ::dtproto::geometry_msgs::Point3d& velworld2comwrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_velworld2comwrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_velworld2comwrtworld();
  void set_allocated_velworld2comwrtworld(::dtproto::geometry_msgs::Point3d* velworld2comwrtworld);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_velworld2comwrtworld() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_velworld2comwrtworld();
  public:
  void unsafe_arena_set_allocated_velworld2comwrtworld(
      ::dtproto::geometry_msgs::Point3d* velworld2comwrtworld);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_velworld2comwrtworld();

  // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
  bool has_posworld2bodywrtworld() const;
  private:
  bool _internal_has_posworld2bodywrtworld() const;
  public:
  void clear_posworld2bodywrtworld();
  const ::dtproto::geometry_msgs::Point3d& posworld2bodywrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_posworld2bodywrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_posworld2bodywrtworld();
  void set_allocated_posworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_posworld2bodywrtworld() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_posworld2bodywrtworld();
  public:
  void unsafe_arena_set_allocated_posworld2bodywrtworld(
      ::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_posworld2bodywrtworld();

  // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
  bool has_velworld2bodywrtworld() const;
  private:
  bool _internal_has_velworld2bodywrtworld() const;
  public:
  void clear_velworld2bodywrtworld();
  const ::dtproto::geometry_msgs::Point3d& velworld2bodywrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_velworld2bodywrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_velworld2bodywrtworld();
  void set_allocated_velworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_velworld2bodywrtworld() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_velworld2bodywrtworld();
  public:
  void unsafe_arena_set_allocated_velworld2bodywrtworld(
      ::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_velworld2bodywrtworld();

  // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
  bool has_euleranglebodywrtworld() const;
  private:
  bool _internal_has_euleranglebodywrtworld() const;
  public:
  void clear_euleranglebodywrtworld();
  const ::dtproto::geometry_msgs::Euler& euleranglebodywrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Euler* release_euleranglebodywrtworld();
  ::dtproto::geometry_msgs::Euler* mutable_euleranglebodywrtworld();
  void set_allocated_euleranglebodywrtworld(::dtproto::geometry_msgs::Euler* euleranglebodywrtworld);
  private:
  const ::dtproto::geometry_msgs::Euler& _internal_euleranglebodywrtworld() const;
  ::dtproto::geometry_msgs::Euler* _internal_mutable_euleranglebodywrtworld();
  public:
  void unsafe_arena_set_allocated_euleranglebodywrtworld(
      ::dtproto::geometry_msgs::Euler* euleranglebodywrtworld);
  ::dtproto::geometry_msgs::Euler* unsafe_arena_release_euleranglebodywrtworld();

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
  bool has_angularvelbodywrtworld() const;
  private:
  bool _internal_has_angularvelbodywrtworld() const;
  public:
  void clear_angularvelbodywrtworld();
  const ::dtproto::geometry_msgs::Euler& angularvelbodywrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Euler* release_angularvelbodywrtworld();
  ::dtproto::geometry_msgs::Euler* mutable_angularvelbodywrtworld();
  void set_allocated_angularvelbodywrtworld(::dtproto::geometry_msgs::Euler* angularvelbodywrtworld);
  private:
  const ::dtproto::geometry_msgs::Euler& _internal_angularvelbodywrtworld() const;
  ::dtproto::geometry_msgs::Euler* _internal_mutable_angularvelbodywrtworld();
  public:
  void unsafe_arena_set_allocated_angularvelbodywrtworld(
      ::dtproto::geometry_msgs::Euler* angularvelbodywrtworld);
  ::dtproto::geometry_msgs::Euler* unsafe_arena_release_angularvelbodywrtworld();

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
  bool has_angularvelbodywrtbody() const;
  private:
  bool _internal_has_angularvelbodywrtbody() const;
  public:
  void clear_angularvelbodywrtbody();
  const ::dtproto::geometry_msgs::Euler& angularvelbodywrtbody() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Euler* release_angularvelbodywrtbody();
  ::dtproto::geometry_msgs::Euler* mutable_angularvelbodywrtbody();
  void set_allocated_angularvelbodywrtbody(::dtproto::geometry_msgs::Euler* angularvelbodywrtbody);
  private:
  const ::dtproto::geometry_msgs::Euler& _internal_angularvelbodywrtbody() const;
  ::dtproto::geometry_msgs::Euler* _internal_mutable_angularvelbodywrtbody();
  public:
  void unsafe_arena_set_allocated_angularvelbodywrtbody(
      ::dtproto::geometry_msgs::Euler* angularvelbodywrtbody);
  ::dtproto::geometry_msgs::Euler* unsafe_arena_release_angularvelbodywrtbody();

  // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
  bool has_angularmomentumbodywrtworld() const;
  private:
  bool _internal_has_angularmomentumbodywrtworld() const;
  public:
  void clear_angularmomentumbodywrtworld();
  const ::dtproto::geometry_msgs::Point3d& angularmomentumbodywrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_angularmomentumbodywrtworld();
  ::dtproto::geometry_msgs::Point3d* mutable_angularmomentumbodywrtworld();
  void set_allocated_angularmomentumbodywrtworld(::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_angularmomentumbodywrtworld() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_angularmomentumbodywrtworld();
  public:
  void unsafe_arena_set_allocated_angularmomentumbodywrtworld(
      ::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_angularmomentumbodywrtworld();

  // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
  bool has_rotbodywrtworld() const;
  private:
  bool _internal_has_rotbodywrtworld() const;
  public:
  void clear_rotbodywrtworld();
  const ::dtproto::geometry_msgs::Matrix3d& rotbodywrtworld() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Matrix3d* release_rotbodywrtworld();
  ::dtproto::geometry_msgs::Matrix3d* mutable_rotbodywrtworld();
  void set_allocated_rotbodywrtworld(::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld);
  private:
  const ::dtproto::geometry_msgs::Matrix3d& _internal_rotbodywrtworld() const;
  ::dtproto::geometry_msgs::Matrix3d* _internal_mutable_rotbodywrtworld();
  public:
  void unsafe_arena_set_allocated_rotbodywrtworld(
      ::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld);
  ::dtproto::geometry_msgs::Matrix3d* unsafe_arena_release_rotbodywrtworld();

  // .dtproto.geometry_msgs.Vector4b contact = 16;
  bool has_contact() const;
  private:
  bool _internal_has_contact() const;
  public:
  void clear_contact();
  const ::dtproto::geometry_msgs::Vector4b& contact() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Vector4b* release_contact();
  ::dtproto::geometry_msgs::Vector4b* mutable_contact();
  void set_allocated_contact(::dtproto::geometry_msgs::Vector4b* contact);
  private:
  const ::dtproto::geometry_msgs::Vector4b& _internal_contact() const;
  ::dtproto::geometry_msgs::Vector4b* _internal_mutable_contact();
  public:
  void unsafe_arena_set_allocated_contact(
      ::dtproto::geometry_msgs::Vector4b* contact);
  ::dtproto::geometry_msgs::Vector4b* unsafe_arena_release_contact();

  // @@protoc_insertion_point(class_scope:dtproto.leoquad.ControlState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > posworld2footwrtworld_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > velworld2footwrtworld_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > posbody2footwrtworld_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > velbody2footwrtworld_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > posbody2footwrtbody_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > velbody2footwrtbody_;
    ::dtproto::geometry_msgs::Point3d* posworld2comwrtworld_;
    ::dtproto::geometry_msgs::Point3d* velworld2comwrtworld_;
    ::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld_;
    ::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld_;
    ::dtproto::geometry_msgs::Euler* euleranglebodywrtworld_;
    ::dtproto::geometry_msgs::Euler* angularvelbodywrtworld_;
    ::dtproto::geometry_msgs::Euler* angularvelbodywrtbody_;
    ::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld_;
    ::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld_;
    ::dtproto::geometry_msgs::Vector4b* contact_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LeoQuad_2eproto;
};
// -------------------------------------------------------------------

class LeoQuadState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.leoquad.LeoQuadState) */ {
 public:
  inline LeoQuadState() : LeoQuadState(nullptr) {}
  ~LeoQuadState() override;
  explicit PROTOBUF_CONSTEXPR LeoQuadState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeoQuadState(const LeoQuadState& from);
  LeoQuadState(LeoQuadState&& from) noexcept
    : LeoQuadState() {
    *this = ::std::move(from);
  }

  inline LeoQuadState& operator=(const LeoQuadState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeoQuadState& operator=(LeoQuadState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeoQuadState& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeoQuadState* internal_default_instance() {
    return reinterpret_cast<const LeoQuadState*>(
               &_LeoQuadState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LeoQuadState& a, LeoQuadState& b) {
    a.Swap(&b);
  }
  inline void Swap(LeoQuadState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeoQuadState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeoQuadState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeoQuadState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeoQuadState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeoQuadState& from) {
    LeoQuadState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeoQuadState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.leoquad.LeoQuadState";
  }
  protected:
  explicit LeoQuadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointDataFieldNumber = 1,
    kTaskStateDesiredFieldNumber = 2,
    kTaskStateActualFieldNumber = 3,
    kImuFieldNumber = 4,
    kJoystickFieldNumber = 5,
    kControlStateDesiredFieldNumber = 7,
    kControlStateActualFieldNumber = 8,
  };
  // .dtproto.leoquad.JointData jointData = 1;
  bool has_jointdata() const;
  private:
  bool _internal_has_jointdata() const;
  public:
  void clear_jointdata();
  const ::dtproto::leoquad::JointData& jointdata() const;
  PROTOBUF_NODISCARD ::dtproto::leoquad::JointData* release_jointdata();
  ::dtproto::leoquad::JointData* mutable_jointdata();
  void set_allocated_jointdata(::dtproto::leoquad::JointData* jointdata);
  private:
  const ::dtproto::leoquad::JointData& _internal_jointdata() const;
  ::dtproto::leoquad::JointData* _internal_mutable_jointdata();
  public:
  void unsafe_arena_set_allocated_jointdata(
      ::dtproto::leoquad::JointData* jointdata);
  ::dtproto::leoquad::JointData* unsafe_arena_release_jointdata();

  // .dtproto.leoquad.TaskState taskStateDesired = 2;
  bool has_taskstatedesired() const;
  private:
  bool _internal_has_taskstatedesired() const;
  public:
  void clear_taskstatedesired();
  const ::dtproto::leoquad::TaskState& taskstatedesired() const;
  PROTOBUF_NODISCARD ::dtproto::leoquad::TaskState* release_taskstatedesired();
  ::dtproto::leoquad::TaskState* mutable_taskstatedesired();
  void set_allocated_taskstatedesired(::dtproto::leoquad::TaskState* taskstatedesired);
  private:
  const ::dtproto::leoquad::TaskState& _internal_taskstatedesired() const;
  ::dtproto::leoquad::TaskState* _internal_mutable_taskstatedesired();
  public:
  void unsafe_arena_set_allocated_taskstatedesired(
      ::dtproto::leoquad::TaskState* taskstatedesired);
  ::dtproto::leoquad::TaskState* unsafe_arena_release_taskstatedesired();

  // .dtproto.leoquad.TaskState taskStateActual = 3;
  bool has_taskstateactual() const;
  private:
  bool _internal_has_taskstateactual() const;
  public:
  void clear_taskstateactual();
  const ::dtproto::leoquad::TaskState& taskstateactual() const;
  PROTOBUF_NODISCARD ::dtproto::leoquad::TaskState* release_taskstateactual();
  ::dtproto::leoquad::TaskState* mutable_taskstateactual();
  void set_allocated_taskstateactual(::dtproto::leoquad::TaskState* taskstateactual);
  private:
  const ::dtproto::leoquad::TaskState& _internal_taskstateactual() const;
  ::dtproto::leoquad::TaskState* _internal_mutable_taskstateactual();
  public:
  void unsafe_arena_set_allocated_taskstateactual(
      ::dtproto::leoquad::TaskState* taskstateactual);
  ::dtproto::leoquad::TaskState* unsafe_arena_release_taskstateactual();

  // .dtproto.sensor_msgs.Imu imu = 4;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::dtproto::sensor_msgs::Imu& imu() const;
  PROTOBUF_NODISCARD ::dtproto::sensor_msgs::Imu* release_imu();
  ::dtproto::sensor_msgs::Imu* mutable_imu();
  void set_allocated_imu(::dtproto::sensor_msgs::Imu* imu);
  private:
  const ::dtproto::sensor_msgs::Imu& _internal_imu() const;
  ::dtproto::sensor_msgs::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::dtproto::sensor_msgs::Imu* imu);
  ::dtproto::sensor_msgs::Imu* unsafe_arena_release_imu();

  // .dtproto.sensor_msgs.Joy joystick = 5;
  bool has_joystick() const;
  private:
  bool _internal_has_joystick() const;
  public:
  void clear_joystick();
  const ::dtproto::sensor_msgs::Joy& joystick() const;
  PROTOBUF_NODISCARD ::dtproto::sensor_msgs::Joy* release_joystick();
  ::dtproto::sensor_msgs::Joy* mutable_joystick();
  void set_allocated_joystick(::dtproto::sensor_msgs::Joy* joystick);
  private:
  const ::dtproto::sensor_msgs::Joy& _internal_joystick() const;
  ::dtproto::sensor_msgs::Joy* _internal_mutable_joystick();
  public:
  void unsafe_arena_set_allocated_joystick(
      ::dtproto::sensor_msgs::Joy* joystick);
  ::dtproto::sensor_msgs::Joy* unsafe_arena_release_joystick();

  // .dtproto.leoquad.ControlState controlStateDesired = 7;
  bool has_controlstatedesired() const;
  private:
  bool _internal_has_controlstatedesired() const;
  public:
  void clear_controlstatedesired();
  const ::dtproto::leoquad::ControlState& controlstatedesired() const;
  PROTOBUF_NODISCARD ::dtproto::leoquad::ControlState* release_controlstatedesired();
  ::dtproto::leoquad::ControlState* mutable_controlstatedesired();
  void set_allocated_controlstatedesired(::dtproto::leoquad::ControlState* controlstatedesired);
  private:
  const ::dtproto::leoquad::ControlState& _internal_controlstatedesired() const;
  ::dtproto::leoquad::ControlState* _internal_mutable_controlstatedesired();
  public:
  void unsafe_arena_set_allocated_controlstatedesired(
      ::dtproto::leoquad::ControlState* controlstatedesired);
  ::dtproto::leoquad::ControlState* unsafe_arena_release_controlstatedesired();

  // .dtproto.leoquad.ControlState controlStateActual = 8;
  bool has_controlstateactual() const;
  private:
  bool _internal_has_controlstateactual() const;
  public:
  void clear_controlstateactual();
  const ::dtproto::leoquad::ControlState& controlstateactual() const;
  PROTOBUF_NODISCARD ::dtproto::leoquad::ControlState* release_controlstateactual();
  ::dtproto::leoquad::ControlState* mutable_controlstateactual();
  void set_allocated_controlstateactual(::dtproto::leoquad::ControlState* controlstateactual);
  private:
  const ::dtproto::leoquad::ControlState& _internal_controlstateactual() const;
  ::dtproto::leoquad::ControlState* _internal_mutable_controlstateactual();
  public:
  void unsafe_arena_set_allocated_controlstateactual(
      ::dtproto::leoquad::ControlState* controlstateactual);
  ::dtproto::leoquad::ControlState* unsafe_arena_release_controlstateactual();

  // @@protoc_insertion_point(class_scope:dtproto.leoquad.LeoQuadState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::leoquad::JointData* jointdata_;
    ::dtproto::leoquad::TaskState* taskstatedesired_;
    ::dtproto::leoquad::TaskState* taskstateactual_;
    ::dtproto::sensor_msgs::Imu* imu_;
    ::dtproto::sensor_msgs::Joy* joystick_;
    ::dtproto::leoquad::ControlState* controlstatedesired_;
    ::dtproto::leoquad::ControlState* controlstateactual_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LeoQuad_2eproto;
};
// -------------------------------------------------------------------

class LeoQuadStateTimeStamped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.leoquad.LeoQuadStateTimeStamped) */ {
 public:
  inline LeoQuadStateTimeStamped() : LeoQuadStateTimeStamped(nullptr) {}
  ~LeoQuadStateTimeStamped() override;
  explicit PROTOBUF_CONSTEXPR LeoQuadStateTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeoQuadStateTimeStamped(const LeoQuadStateTimeStamped& from);
  LeoQuadStateTimeStamped(LeoQuadStateTimeStamped&& from) noexcept
    : LeoQuadStateTimeStamped() {
    *this = ::std::move(from);
  }

  inline LeoQuadStateTimeStamped& operator=(const LeoQuadStateTimeStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeoQuadStateTimeStamped& operator=(LeoQuadStateTimeStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeoQuadStateTimeStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeoQuadStateTimeStamped* internal_default_instance() {
    return reinterpret_cast<const LeoQuadStateTimeStamped*>(
               &_LeoQuadStateTimeStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LeoQuadStateTimeStamped& a, LeoQuadStateTimeStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(LeoQuadStateTimeStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeoQuadStateTimeStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeoQuadStateTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeoQuadStateTimeStamped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeoQuadStateTimeStamped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeoQuadStateTimeStamped& from) {
    LeoQuadStateTimeStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeoQuadStateTimeStamped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.leoquad.LeoQuadStateTimeStamped";
  }
  protected:
  explicit LeoQuadStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .dtproto.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dtproto::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
  ::dtproto::std_msgs::Header* mutable_header();
  void set_allocated_header(::dtproto::std_msgs::Header* header);
  private:
  const ::dtproto::std_msgs::Header& _internal_header() const;
  ::dtproto::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dtproto::std_msgs::Header* header);
  ::dtproto::std_msgs::Header* unsafe_arena_release_header();

  // .dtproto.leoquad.LeoQuadState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::dtproto::leoquad::LeoQuadState& state() const;
  PROTOBUF_NODISCARD ::dtproto::leoquad::LeoQuadState* release_state();
  ::dtproto::leoquad::LeoQuadState* mutable_state();
  void set_allocated_state(::dtproto::leoquad::LeoQuadState* state);
  private:
  const ::dtproto::leoquad::LeoQuadState& _internal_state() const;
  ::dtproto::leoquad::LeoQuadState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::dtproto::leoquad::LeoQuadState* state);
  ::dtproto::leoquad::LeoQuadState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:dtproto.leoquad.LeoQuadStateTimeStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::std_msgs::Header* header_;
    ::dtproto::leoquad::LeoQuadState* state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LeoQuad_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskState

// .dtproto.geometry_msgs.Point3d pos = 1;
inline bool TaskState::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool TaskState::has_pos() const {
  return _internal_has_pos();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_pos() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::pos() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.pos)
  return _internal_pos();
}
inline void TaskState::unsafe_arena_set_allocated_pos(
    ::dtproto::geometry_msgs::Point3d* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.pos)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_pos() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.pos)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_pos() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.pos)
  return _msg;
}
inline void TaskState::set_allocated_pos(::dtproto::geometry_msgs::Point3d* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.pos)
}

// .dtproto.geometry_msgs.Rotation rot = 2;
inline bool TaskState::_internal_has_rot() const {
  return this != internal_default_instance() && _impl_.rot_ != nullptr;
}
inline bool TaskState::has_rot() const {
  return _internal_has_rot();
}
inline const ::dtproto::geometry_msgs::Rotation& TaskState::_internal_rot() const {
  const ::dtproto::geometry_msgs::Rotation* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Rotation&>(
      ::dtproto::geometry_msgs::_Rotation_default_instance_);
}
inline const ::dtproto::geometry_msgs::Rotation& TaskState::rot() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.rot)
  return _internal_rot();
}
inline void TaskState::unsafe_arena_set_allocated_rot(
    ::dtproto::geometry_msgs::Rotation* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.rot)
}
inline ::dtproto::geometry_msgs::Rotation* TaskState::release_rot() {
  
  ::dtproto::geometry_msgs::Rotation* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Rotation* TaskState::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.rot)
  
  ::dtproto::geometry_msgs::Rotation* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Rotation* TaskState::_internal_mutable_rot() {
  
  if (_impl_.rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Rotation>(GetArenaForAllocation());
    _impl_.rot_ = p;
  }
  return _impl_.rot_;
}
inline ::dtproto::geometry_msgs::Rotation* TaskState::mutable_rot() {
  ::dtproto::geometry_msgs::Rotation* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.rot)
  return _msg;
}
inline void TaskState::set_allocated_rot(::dtproto::geometry_msgs::Rotation* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rot_);
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot));
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.rot)
}

// .dtproto.geometry_msgs.Point3d linVel = 3;
inline bool TaskState::_internal_has_linvel() const {
  return this != internal_default_instance() && _impl_.linvel_ != nullptr;
}
inline bool TaskState::has_linvel() const {
  return _internal_has_linvel();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_linvel() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.linvel_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::linvel() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.linVel)
  return _internal_linvel();
}
inline void TaskState::unsafe_arena_set_allocated_linvel(
    ::dtproto::geometry_msgs::Point3d* linvel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linvel_);
  }
  _impl_.linvel_ = linvel;
  if (linvel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.linVel)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_linvel() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.linvel_;
  _impl_.linvel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_linvel() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.linVel)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.linvel_;
  _impl_.linvel_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_linvel() {
  
  if (_impl_.linvel_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.linvel_ = p;
  }
  return _impl_.linvel_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_linvel() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_linvel();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.linVel)
  return _msg;
}
inline void TaskState::set_allocated_linvel(::dtproto::geometry_msgs::Point3d* linvel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.linvel_);
  }
  if (linvel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linvel));
    if (message_arena != submessage_arena) {
      linvel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linvel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.linvel_ = linvel;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.linVel)
}

// .dtproto.geometry_msgs.Point3d angVel = 4;
inline bool TaskState::_internal_has_angvel() const {
  return this != internal_default_instance() && _impl_.angvel_ != nullptr;
}
inline bool TaskState::has_angvel() const {
  return _internal_has_angvel();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_angvel() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.angvel_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::angvel() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.angVel)
  return _internal_angvel();
}
inline void TaskState::unsafe_arena_set_allocated_angvel(
    ::dtproto::geometry_msgs::Point3d* angvel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angvel_);
  }
  _impl_.angvel_ = angvel;
  if (angvel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.angVel)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_angvel() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.angvel_;
  _impl_.angvel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_angvel() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.angVel)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.angvel_;
  _impl_.angvel_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_angvel() {
  
  if (_impl_.angvel_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.angvel_ = p;
  }
  return _impl_.angvel_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_angvel() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_angvel();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.angVel)
  return _msg;
}
inline void TaskState::set_allocated_angvel(::dtproto::geometry_msgs::Point3d* angvel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angvel_);
  }
  if (angvel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angvel));
    if (message_arena != submessage_arena) {
      angvel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angvel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angvel_ = angvel;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.angVel)
}

// .dtproto.geometry_msgs.Point3d force = 5;
inline bool TaskState::_internal_has_force() const {
  return this != internal_default_instance() && _impl_.force_ != nullptr;
}
inline bool TaskState::has_force() const {
  return _internal_has_force();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_force() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.force_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::force() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.force)
  return _internal_force();
}
inline void TaskState::unsafe_arena_set_allocated_force(
    ::dtproto::geometry_msgs::Point3d* force) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.force_);
  }
  _impl_.force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.force)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_force() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.force_;
  _impl_.force_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.force)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.force_;
  _impl_.force_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_force() {
  
  if (_impl_.force_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.force_ = p;
  }
  return _impl_.force_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_force() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_force();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.force)
  return _msg;
}
inline void TaskState::set_allocated_force(::dtproto::geometry_msgs::Point3d* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.force_);
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force));
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.force_ = force;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.force)
}

// .dtproto.geometry_msgs.Point3d moment = 6;
inline bool TaskState::_internal_has_moment() const {
  return this != internal_default_instance() && _impl_.moment_ != nullptr;
}
inline bool TaskState::has_moment() const {
  return _internal_has_moment();
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::_internal_moment() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.moment_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& TaskState::moment() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.moment)
  return _internal_moment();
}
inline void TaskState::unsafe_arena_set_allocated_moment(
    ::dtproto::geometry_msgs::Point3d* moment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moment_);
  }
  _impl_.moment_ = moment;
  if (moment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.moment)
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::release_moment() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.moment_;
  _impl_.moment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::unsafe_arena_release_moment() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.moment)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.moment_;
  _impl_.moment_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::_internal_mutable_moment() {
  
  if (_impl_.moment_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.moment_ = p;
  }
  return _impl_.moment_;
}
inline ::dtproto::geometry_msgs::Point3d* TaskState::mutable_moment() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_moment();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.moment)
  return _msg;
}
inline void TaskState::set_allocated_moment(::dtproto::geometry_msgs::Point3d* moment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moment_);
  }
  if (moment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(moment));
    if (message_arena != submessage_arena) {
      moment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moment_ = moment;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.moment)
}

// .dtproto.geometry_msgs.Wrench wrench = 7;
inline bool TaskState::_internal_has_wrench() const {
  return this != internal_default_instance() && _impl_.wrench_ != nullptr;
}
inline bool TaskState::has_wrench() const {
  return _internal_has_wrench();
}
inline const ::dtproto::geometry_msgs::Wrench& TaskState::_internal_wrench() const {
  const ::dtproto::geometry_msgs::Wrench* p = _impl_.wrench_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Wrench&>(
      ::dtproto::geometry_msgs::_Wrench_default_instance_);
}
inline const ::dtproto::geometry_msgs::Wrench& TaskState::wrench() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.wrench)
  return _internal_wrench();
}
inline void TaskState::unsafe_arena_set_allocated_wrench(
    ::dtproto::geometry_msgs::Wrench* wrench) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrench_);
  }
  _impl_.wrench_ = wrench;
  if (wrench) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.TaskState.wrench)
}
inline ::dtproto::geometry_msgs::Wrench* TaskState::release_wrench() {
  
  ::dtproto::geometry_msgs::Wrench* temp = _impl_.wrench_;
  _impl_.wrench_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Wrench* TaskState::unsafe_arena_release_wrench() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.TaskState.wrench)
  
  ::dtproto::geometry_msgs::Wrench* temp = _impl_.wrench_;
  _impl_.wrench_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Wrench* TaskState::_internal_mutable_wrench() {
  
  if (_impl_.wrench_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Wrench>(GetArenaForAllocation());
    _impl_.wrench_ = p;
  }
  return _impl_.wrench_;
}
inline ::dtproto::geometry_msgs::Wrench* TaskState::mutable_wrench() {
  ::dtproto::geometry_msgs::Wrench* _msg = _internal_mutable_wrench();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.TaskState.wrench)
  return _msg;
}
inline void TaskState::set_allocated_wrench(::dtproto::geometry_msgs::Wrench* wrench) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wrench_);
  }
  if (wrench) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrench));
    if (message_arena != submessage_arena) {
      wrench = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrench, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wrench_ = wrench;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.TaskState.wrench)
}

// uint32 id = 8;
inline void TaskState::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TaskState::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TaskState::id() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.TaskState.id)
  return _internal_id();
}
inline void TaskState::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TaskState::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.TaskState.id)
}

// -------------------------------------------------------------------

// JointState

// uint32 statusWord = 1;
inline void JointState::clear_statusword() {
  _impl_.statusword_ = 0u;
}
inline uint32_t JointState::_internal_statusword() const {
  return _impl_.statusword_;
}
inline uint32_t JointState::statusword() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.statusWord)
  return _internal_statusword();
}
inline void JointState::_internal_set_statusword(uint32_t value) {
  
  _impl_.statusword_ = value;
}
inline void JointState::set_statusword(uint32_t value) {
  _internal_set_statusword(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.statusWord)
}

// uint32 controlWord = 2;
inline void JointState::clear_controlword() {
  _impl_.controlword_ = 0u;
}
inline uint32_t JointState::_internal_controlword() const {
  return _impl_.controlword_;
}
inline uint32_t JointState::controlword() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.controlWord)
  return _internal_controlword();
}
inline void JointState::_internal_set_controlword(uint32_t value) {
  
  _impl_.controlword_ = value;
}
inline void JointState::set_controlword(uint32_t value) {
  _internal_set_controlword(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.controlWord)
}

// int32 incPos_ofs_cnt = 3;
inline void JointState::clear_incpos_ofs_cnt() {
  _impl_.incpos_ofs_cnt_ = 0;
}
inline int32_t JointState::_internal_incpos_ofs_cnt() const {
  return _impl_.incpos_ofs_cnt_;
}
inline int32_t JointState::incpos_ofs_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.incPos_ofs_cnt)
  return _internal_incpos_ofs_cnt();
}
inline void JointState::_internal_set_incpos_ofs_cnt(int32_t value) {
  
  _impl_.incpos_ofs_cnt_ = value;
}
inline void JointState::set_incpos_ofs_cnt(int32_t value) {
  _internal_set_incpos_ofs_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.incPos_ofs_cnt)
}

// int32 absPosOfs_cnt = 4;
inline void JointState::clear_absposofs_cnt() {
  _impl_.absposofs_cnt_ = 0;
}
inline int32_t JointState::_internal_absposofs_cnt() const {
  return _impl_.absposofs_cnt_;
}
inline int32_t JointState::absposofs_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.absPosOfs_cnt)
  return _internal_absposofs_cnt();
}
inline void JointState::_internal_set_absposofs_cnt(int32_t value) {
  
  _impl_.absposofs_cnt_ = value;
}
inline void JointState::set_absposofs_cnt(int32_t value) {
  _internal_set_absposofs_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.absPosOfs_cnt)
}

// int32 incPos_cnt = 5;
inline void JointState::clear_incpos_cnt() {
  _impl_.incpos_cnt_ = 0;
}
inline int32_t JointState::_internal_incpos_cnt() const {
  return _impl_.incpos_cnt_;
}
inline int32_t JointState::incpos_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.incPos_cnt)
  return _internal_incpos_cnt();
}
inline void JointState::_internal_set_incpos_cnt(int32_t value) {
  
  _impl_.incpos_cnt_ = value;
}
inline void JointState::set_incpos_cnt(int32_t value) {
  _internal_set_incpos_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.incPos_cnt)
}

// int32 absPos_cnt = 6;
inline void JointState::clear_abspos_cnt() {
  _impl_.abspos_cnt_ = 0;
}
inline int32_t JointState::_internal_abspos_cnt() const {
  return _impl_.abspos_cnt_;
}
inline int32_t JointState::abspos_cnt() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.absPos_cnt)
  return _internal_abspos_cnt();
}
inline void JointState::_internal_set_abspos_cnt(int32_t value) {
  
  _impl_.abspos_cnt_ = value;
}
inline void JointState::set_abspos_cnt(int32_t value) {
  _internal_set_abspos_cnt(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.absPos_cnt)
}

// int32 incVel_cps = 7;
inline void JointState::clear_incvel_cps() {
  _impl_.incvel_cps_ = 0;
}
inline int32_t JointState::_internal_incvel_cps() const {
  return _impl_.incvel_cps_;
}
inline int32_t JointState::incvel_cps() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.incVel_cps)
  return _internal_incvel_cps();
}
inline void JointState::_internal_set_incvel_cps(int32_t value) {
  
  _impl_.incvel_cps_ = value;
}
inline void JointState::set_incvel_cps(int32_t value) {
  _internal_set_incvel_cps(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.incVel_cps)
}

// float mcuTemp_C = 8;
inline void JointState::clear_mcutemp_c() {
  _impl_.mcutemp_c_ = 0;
}
inline float JointState::_internal_mcutemp_c() const {
  return _impl_.mcutemp_c_;
}
inline float JointState::mcutemp_c() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.mcuTemp_C)
  return _internal_mcutemp_c();
}
inline void JointState::_internal_set_mcutemp_c(float value) {
  
  _impl_.mcutemp_c_ = value;
}
inline void JointState::set_mcutemp_c(float value) {
  _internal_set_mcutemp_c(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.mcuTemp_C)
}

// float invTemp_C = 9;
inline void JointState::clear_invtemp_c() {
  _impl_.invtemp_c_ = 0;
}
inline float JointState::_internal_invtemp_c() const {
  return _impl_.invtemp_c_;
}
inline float JointState::invtemp_c() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.invTemp_C)
  return _internal_invtemp_c();
}
inline void JointState::_internal_set_invtemp_c(float value) {
  
  _impl_.invtemp_c_ = value;
}
inline void JointState::set_invtemp_c(float value) {
  _internal_set_invtemp_c(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.invTemp_C)
}

// float inputVolt_V = 10;
inline void JointState::clear_inputvolt_v() {
  _impl_.inputvolt_v_ = 0;
}
inline float JointState::_internal_inputvolt_v() const {
  return _impl_.inputvolt_v_;
}
inline float JointState::inputvolt_v() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.inputVolt_V)
  return _internal_inputvolt_v();
}
inline void JointState::_internal_set_inputvolt_v(float value) {
  
  _impl_.inputvolt_v_ = value;
}
inline void JointState::set_inputvolt_v(float value) {
  _internal_set_inputvolt_v(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.inputVolt_V)
}

// double actPos_rad = 11;
inline void JointState::clear_actpos_rad() {
  _impl_.actpos_rad_ = 0;
}
inline double JointState::_internal_actpos_rad() const {
  return _impl_.actpos_rad_;
}
inline double JointState::actpos_rad() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.actPos_rad)
  return _internal_actpos_rad();
}
inline void JointState::_internal_set_actpos_rad(double value) {
  
  _impl_.actpos_rad_ = value;
}
inline void JointState::set_actpos_rad(double value) {
  _internal_set_actpos_rad(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.actPos_rad)
}

// double actAux_rad = 12;
inline void JointState::clear_actaux_rad() {
  _impl_.actaux_rad_ = 0;
}
inline double JointState::_internal_actaux_rad() const {
  return _impl_.actaux_rad_;
}
inline double JointState::actaux_rad() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.actAux_rad)
  return _internal_actaux_rad();
}
inline void JointState::_internal_set_actaux_rad(double value) {
  
  _impl_.actaux_rad_ = value;
}
inline void JointState::set_actaux_rad(double value) {
  _internal_set_actaux_rad(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.actAux_rad)
}

// double actVel_rps = 13;
inline void JointState::clear_actvel_rps() {
  _impl_.actvel_rps_ = 0;
}
inline double JointState::_internal_actvel_rps() const {
  return _impl_.actvel_rps_;
}
inline double JointState::actvel_rps() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.actVel_rps)
  return _internal_actvel_rps();
}
inline void JointState::_internal_set_actvel_rps(double value) {
  
  _impl_.actvel_rps_ = value;
}
inline void JointState::set_actvel_rps(double value) {
  _internal_set_actvel_rps(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.actVel_rps)
}

// double actTorq_Nm = 14;
inline void JointState::clear_acttorq_nm() {
  _impl_.acttorq_nm_ = 0;
}
inline double JointState::_internal_acttorq_nm() const {
  return _impl_.acttorq_nm_;
}
inline double JointState::acttorq_nm() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.actTorq_Nm)
  return _internal_acttorq_nm();
}
inline void JointState::_internal_set_acttorq_nm(double value) {
  
  _impl_.acttorq_nm_ = value;
}
inline void JointState::set_acttorq_nm(double value) {
  _internal_set_acttorq_nm(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.actTorq_Nm)
}

// double desPos_rad = 15;
inline void JointState::clear_despos_rad() {
  _impl_.despos_rad_ = 0;
}
inline double JointState::_internal_despos_rad() const {
  return _impl_.despos_rad_;
}
inline double JointState::despos_rad() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.desPos_rad)
  return _internal_despos_rad();
}
inline void JointState::_internal_set_despos_rad(double value) {
  
  _impl_.despos_rad_ = value;
}
inline void JointState::set_despos_rad(double value) {
  _internal_set_despos_rad(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.desPos_rad)
}

// double desVel_rps = 16;
inline void JointState::clear_desvel_rps() {
  _impl_.desvel_rps_ = 0;
}
inline double JointState::_internal_desvel_rps() const {
  return _impl_.desvel_rps_;
}
inline double JointState::desvel_rps() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.desVel_rps)
  return _internal_desvel_rps();
}
inline void JointState::_internal_set_desvel_rps(double value) {
  
  _impl_.desvel_rps_ = value;
}
inline void JointState::set_desvel_rps(double value) {
  _internal_set_desvel_rps(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.desVel_rps)
}

// double desAcc_rpss = 17;
inline void JointState::clear_desacc_rpss() {
  _impl_.desacc_rpss_ = 0;
}
inline double JointState::_internal_desacc_rpss() const {
  return _impl_.desacc_rpss_;
}
inline double JointState::desacc_rpss() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.desAcc_rpss)
  return _internal_desacc_rpss();
}
inline void JointState::_internal_set_desacc_rpss(double value) {
  
  _impl_.desacc_rpss_ = value;
}
inline void JointState::set_desacc_rpss(double value) {
  _internal_set_desacc_rpss(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.desAcc_rpss)
}

// double desTorq_Nm = 18;
inline void JointState::clear_destorq_nm() {
  _impl_.destorq_nm_ = 0;
}
inline double JointState::_internal_destorq_nm() const {
  return _impl_.destorq_nm_;
}
inline double JointState::destorq_nm() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointState.desTorq_Nm)
  return _internal_destorq_nm();
}
inline void JointState::_internal_set_destorq_nm(double value) {
  
  _impl_.destorq_nm_ = value;
}
inline void JointState::set_destorq_nm(double value) {
  _internal_set_destorq_nm(value);
  // @@protoc_insertion_point(field_set:dtproto.leoquad.JointState.desTorq_Nm)
}

// -------------------------------------------------------------------

// JointData

// repeated .dtproto.leoquad.JointState joints = 1;
inline int JointData::_internal_joints_size() const {
  return _impl_.joints_.size();
}
inline int JointData::joints_size() const {
  return _internal_joints_size();
}
inline void JointData::clear_joints() {
  _impl_.joints_.Clear();
}
inline ::dtproto::leoquad::JointState* JointData::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.JointData.joints)
  return _impl_.joints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::leoquad::JointState >*
JointData::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.JointData.joints)
  return &_impl_.joints_;
}
inline const ::dtproto::leoquad::JointState& JointData::_internal_joints(int index) const {
  return _impl_.joints_.Get(index);
}
inline const ::dtproto::leoquad::JointState& JointData::joints(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.JointData.joints)
  return _internal_joints(index);
}
inline ::dtproto::leoquad::JointState* JointData::_internal_add_joints() {
  return _impl_.joints_.Add();
}
inline ::dtproto::leoquad::JointState* JointData::add_joints() {
  ::dtproto::leoquad::JointState* _add = _internal_add_joints();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.JointData.joints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::leoquad::JointState >&
JointData::joints() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.JointData.joints)
  return _impl_.joints_;
}

// -------------------------------------------------------------------

// ControlState

// .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
inline bool ControlState::_internal_has_posworld2comwrtworld() const {
  return this != internal_default_instance() && _impl_.posworld2comwrtworld_ != nullptr;
}
inline bool ControlState::has_posworld2comwrtworld() const {
  return _internal_has_posworld2comwrtworld();
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posworld2comwrtworld() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.posworld2comwrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::posworld2comwrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.posWorld2ComWrtWorld)
  return _internal_posworld2comwrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_posworld2comwrtworld(
    ::dtproto::geometry_msgs::Point3d* posworld2comwrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2comwrtworld_);
  }
  _impl_.posworld2comwrtworld_ = posworld2comwrtworld;
  if (posworld2comwrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.posWorld2ComWrtWorld)
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::release_posworld2comwrtworld() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2comwrtworld_;
  _impl_.posworld2comwrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_posworld2comwrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.posWorld2ComWrtWorld)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2comwrtworld_;
  _impl_.posworld2comwrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_posworld2comwrtworld() {
  
  if (_impl_.posworld2comwrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.posworld2comwrtworld_ = p;
  }
  return _impl_.posworld2comwrtworld_;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posworld2comwrtworld() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_posworld2comwrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.posWorld2ComWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_posworld2comwrtworld(::dtproto::geometry_msgs::Point3d* posworld2comwrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2comwrtworld_);
  }
  if (posworld2comwrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posworld2comwrtworld));
    if (message_arena != submessage_arena) {
      posworld2comwrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posworld2comwrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.posworld2comwrtworld_ = posworld2comwrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.posWorld2ComWrtWorld)
}

// .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
inline bool ControlState::_internal_has_velworld2comwrtworld() const {
  return this != internal_default_instance() && _impl_.velworld2comwrtworld_ != nullptr;
}
inline bool ControlState::has_velworld2comwrtworld() const {
  return _internal_has_velworld2comwrtworld();
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velworld2comwrtworld() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.velworld2comwrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::velworld2comwrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.velWorld2ComWrtWorld)
  return _internal_velworld2comwrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_velworld2comwrtworld(
    ::dtproto::geometry_msgs::Point3d* velworld2comwrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2comwrtworld_);
  }
  _impl_.velworld2comwrtworld_ = velworld2comwrtworld;
  if (velworld2comwrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.velWorld2ComWrtWorld)
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::release_velworld2comwrtworld() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2comwrtworld_;
  _impl_.velworld2comwrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_velworld2comwrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.velWorld2ComWrtWorld)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2comwrtworld_;
  _impl_.velworld2comwrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_velworld2comwrtworld() {
  
  if (_impl_.velworld2comwrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.velworld2comwrtworld_ = p;
  }
  return _impl_.velworld2comwrtworld_;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velworld2comwrtworld() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_velworld2comwrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.velWorld2ComWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_velworld2comwrtworld(::dtproto::geometry_msgs::Point3d* velworld2comwrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2comwrtworld_);
  }
  if (velworld2comwrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velworld2comwrtworld));
    if (message_arena != submessage_arena) {
      velworld2comwrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velworld2comwrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velworld2comwrtworld_ = velworld2comwrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.velWorld2ComWrtWorld)
}

// .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
inline bool ControlState::_internal_has_posworld2bodywrtworld() const {
  return this != internal_default_instance() && _impl_.posworld2bodywrtworld_ != nullptr;
}
inline bool ControlState::has_posworld2bodywrtworld() const {
  return _internal_has_posworld2bodywrtworld();
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posworld2bodywrtworld() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.posworld2bodywrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::posworld2bodywrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.posWorld2BodyWrtWorld)
  return _internal_posworld2bodywrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_posworld2bodywrtworld(
    ::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2bodywrtworld_);
  }
  _impl_.posworld2bodywrtworld_ = posworld2bodywrtworld;
  if (posworld2bodywrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.posWorld2BodyWrtWorld)
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::release_posworld2bodywrtworld() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2bodywrtworld_;
  _impl_.posworld2bodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_posworld2bodywrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.posWorld2BodyWrtWorld)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.posworld2bodywrtworld_;
  _impl_.posworld2bodywrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_posworld2bodywrtworld() {
  
  if (_impl_.posworld2bodywrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.posworld2bodywrtworld_ = p;
  }
  return _impl_.posworld2bodywrtworld_;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posworld2bodywrtworld() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_posworld2bodywrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.posWorld2BodyWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_posworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* posworld2bodywrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posworld2bodywrtworld_);
  }
  if (posworld2bodywrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posworld2bodywrtworld));
    if (message_arena != submessage_arena) {
      posworld2bodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posworld2bodywrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.posworld2bodywrtworld_ = posworld2bodywrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.posWorld2BodyWrtWorld)
}

// .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
inline bool ControlState::_internal_has_velworld2bodywrtworld() const {
  return this != internal_default_instance() && _impl_.velworld2bodywrtworld_ != nullptr;
}
inline bool ControlState::has_velworld2bodywrtworld() const {
  return _internal_has_velworld2bodywrtworld();
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velworld2bodywrtworld() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.velworld2bodywrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::velworld2bodywrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.velWorld2BodyWrtWorld)
  return _internal_velworld2bodywrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_velworld2bodywrtworld(
    ::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2bodywrtworld_);
  }
  _impl_.velworld2bodywrtworld_ = velworld2bodywrtworld;
  if (velworld2bodywrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.velWorld2BodyWrtWorld)
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::release_velworld2bodywrtworld() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2bodywrtworld_;
  _impl_.velworld2bodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_velworld2bodywrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.velWorld2BodyWrtWorld)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.velworld2bodywrtworld_;
  _impl_.velworld2bodywrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_velworld2bodywrtworld() {
  
  if (_impl_.velworld2bodywrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.velworld2bodywrtworld_ = p;
  }
  return _impl_.velworld2bodywrtworld_;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velworld2bodywrtworld() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_velworld2bodywrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.velWorld2BodyWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_velworld2bodywrtworld(::dtproto::geometry_msgs::Point3d* velworld2bodywrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velworld2bodywrtworld_);
  }
  if (velworld2bodywrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velworld2bodywrtworld));
    if (message_arena != submessage_arena) {
      velworld2bodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velworld2bodywrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velworld2bodywrtworld_ = velworld2bodywrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.velWorld2BodyWrtWorld)
}

// .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
inline bool ControlState::_internal_has_euleranglebodywrtworld() const {
  return this != internal_default_instance() && _impl_.euleranglebodywrtworld_ != nullptr;
}
inline bool ControlState::has_euleranglebodywrtworld() const {
  return _internal_has_euleranglebodywrtworld();
}
inline const ::dtproto::geometry_msgs::Euler& ControlState::_internal_euleranglebodywrtworld() const {
  const ::dtproto::geometry_msgs::Euler* p = _impl_.euleranglebodywrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Euler&>(
      ::dtproto::geometry_msgs::_Euler_default_instance_);
}
inline const ::dtproto::geometry_msgs::Euler& ControlState::euleranglebodywrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.eulerAngleBodyWrtWorld)
  return _internal_euleranglebodywrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_euleranglebodywrtworld(
    ::dtproto::geometry_msgs::Euler* euleranglebodywrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.euleranglebodywrtworld_);
  }
  _impl_.euleranglebodywrtworld_ = euleranglebodywrtworld;
  if (euleranglebodywrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.eulerAngleBodyWrtWorld)
}
inline ::dtproto::geometry_msgs::Euler* ControlState::release_euleranglebodywrtworld() {
  
  ::dtproto::geometry_msgs::Euler* temp = _impl_.euleranglebodywrtworld_;
  _impl_.euleranglebodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::unsafe_arena_release_euleranglebodywrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.eulerAngleBodyWrtWorld)
  
  ::dtproto::geometry_msgs::Euler* temp = _impl_.euleranglebodywrtworld_;
  _impl_.euleranglebodywrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::_internal_mutable_euleranglebodywrtworld() {
  
  if (_impl_.euleranglebodywrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Euler>(GetArenaForAllocation());
    _impl_.euleranglebodywrtworld_ = p;
  }
  return _impl_.euleranglebodywrtworld_;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::mutable_euleranglebodywrtworld() {
  ::dtproto::geometry_msgs::Euler* _msg = _internal_mutable_euleranglebodywrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.eulerAngleBodyWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_euleranglebodywrtworld(::dtproto::geometry_msgs::Euler* euleranglebodywrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.euleranglebodywrtworld_);
  }
  if (euleranglebodywrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euleranglebodywrtworld));
    if (message_arena != submessage_arena) {
      euleranglebodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euleranglebodywrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.euleranglebodywrtworld_ = euleranglebodywrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.eulerAngleBodyWrtWorld)
}

// .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
inline bool ControlState::_internal_has_angularvelbodywrtworld() const {
  return this != internal_default_instance() && _impl_.angularvelbodywrtworld_ != nullptr;
}
inline bool ControlState::has_angularvelbodywrtworld() const {
  return _internal_has_angularvelbodywrtworld();
}
inline const ::dtproto::geometry_msgs::Euler& ControlState::_internal_angularvelbodywrtworld() const {
  const ::dtproto::geometry_msgs::Euler* p = _impl_.angularvelbodywrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Euler&>(
      ::dtproto::geometry_msgs::_Euler_default_instance_);
}
inline const ::dtproto::geometry_msgs::Euler& ControlState::angularvelbodywrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.angularVelBodyWrtWorld)
  return _internal_angularvelbodywrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_angularvelbodywrtworld(
    ::dtproto::geometry_msgs::Euler* angularvelbodywrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtworld_);
  }
  _impl_.angularvelbodywrtworld_ = angularvelbodywrtworld;
  if (angularvelbodywrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.angularVelBodyWrtWorld)
}
inline ::dtproto::geometry_msgs::Euler* ControlState::release_angularvelbodywrtworld() {
  
  ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtworld_;
  _impl_.angularvelbodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::unsafe_arena_release_angularvelbodywrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.angularVelBodyWrtWorld)
  
  ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtworld_;
  _impl_.angularvelbodywrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::_internal_mutable_angularvelbodywrtworld() {
  
  if (_impl_.angularvelbodywrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Euler>(GetArenaForAllocation());
    _impl_.angularvelbodywrtworld_ = p;
  }
  return _impl_.angularvelbodywrtworld_;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::mutable_angularvelbodywrtworld() {
  ::dtproto::geometry_msgs::Euler* _msg = _internal_mutable_angularvelbodywrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.angularVelBodyWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_angularvelbodywrtworld(::dtproto::geometry_msgs::Euler* angularvelbodywrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtworld_);
  }
  if (angularvelbodywrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularvelbodywrtworld));
    if (message_arena != submessage_arena) {
      angularvelbodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelbodywrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angularvelbodywrtworld_ = angularvelbodywrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.angularVelBodyWrtWorld)
}

// .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
inline bool ControlState::_internal_has_angularvelbodywrtbody() const {
  return this != internal_default_instance() && _impl_.angularvelbodywrtbody_ != nullptr;
}
inline bool ControlState::has_angularvelbodywrtbody() const {
  return _internal_has_angularvelbodywrtbody();
}
inline const ::dtproto::geometry_msgs::Euler& ControlState::_internal_angularvelbodywrtbody() const {
  const ::dtproto::geometry_msgs::Euler* p = _impl_.angularvelbodywrtbody_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Euler&>(
      ::dtproto::geometry_msgs::_Euler_default_instance_);
}
inline const ::dtproto::geometry_msgs::Euler& ControlState::angularvelbodywrtbody() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.angularVelBodyWrtBody)
  return _internal_angularvelbodywrtbody();
}
inline void ControlState::unsafe_arena_set_allocated_angularvelbodywrtbody(
    ::dtproto::geometry_msgs::Euler* angularvelbodywrtbody) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtbody_);
  }
  _impl_.angularvelbodywrtbody_ = angularvelbodywrtbody;
  if (angularvelbodywrtbody) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.angularVelBodyWrtBody)
}
inline ::dtproto::geometry_msgs::Euler* ControlState::release_angularvelbodywrtbody() {
  
  ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtbody_;
  _impl_.angularvelbodywrtbody_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::unsafe_arena_release_angularvelbodywrtbody() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.angularVelBodyWrtBody)
  
  ::dtproto::geometry_msgs::Euler* temp = _impl_.angularvelbodywrtbody_;
  _impl_.angularvelbodywrtbody_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::_internal_mutable_angularvelbodywrtbody() {
  
  if (_impl_.angularvelbodywrtbody_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Euler>(GetArenaForAllocation());
    _impl_.angularvelbodywrtbody_ = p;
  }
  return _impl_.angularvelbodywrtbody_;
}
inline ::dtproto::geometry_msgs::Euler* ControlState::mutable_angularvelbodywrtbody() {
  ::dtproto::geometry_msgs::Euler* _msg = _internal_mutable_angularvelbodywrtbody();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.angularVelBodyWrtBody)
  return _msg;
}
inline void ControlState::set_allocated_angularvelbodywrtbody(::dtproto::geometry_msgs::Euler* angularvelbodywrtbody) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelbodywrtbody_);
  }
  if (angularvelbodywrtbody) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularvelbodywrtbody));
    if (message_arena != submessage_arena) {
      angularvelbodywrtbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelbodywrtbody, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angularvelbodywrtbody_ = angularvelbodywrtbody;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.angularVelBodyWrtBody)
}

// .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
inline bool ControlState::_internal_has_angularmomentumbodywrtworld() const {
  return this != internal_default_instance() && _impl_.angularmomentumbodywrtworld_ != nullptr;
}
inline bool ControlState::has_angularmomentumbodywrtworld() const {
  return _internal_has_angularmomentumbodywrtworld();
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_angularmomentumbodywrtworld() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.angularmomentumbodywrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::angularmomentumbodywrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.angularMomentumBodyWrtWorld)
  return _internal_angularmomentumbodywrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_angularmomentumbodywrtworld(
    ::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularmomentumbodywrtworld_);
  }
  _impl_.angularmomentumbodywrtworld_ = angularmomentumbodywrtworld;
  if (angularmomentumbodywrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.angularMomentumBodyWrtWorld)
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::release_angularmomentumbodywrtworld() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.angularmomentumbodywrtworld_;
  _impl_.angularmomentumbodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::unsafe_arena_release_angularmomentumbodywrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.angularMomentumBodyWrtWorld)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.angularmomentumbodywrtworld_;
  _impl_.angularmomentumbodywrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_mutable_angularmomentumbodywrtworld() {
  
  if (_impl_.angularmomentumbodywrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.angularmomentumbodywrtworld_ = p;
  }
  return _impl_.angularmomentumbodywrtworld_;
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_angularmomentumbodywrtworld() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_angularmomentumbodywrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.angularMomentumBodyWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_angularmomentumbodywrtworld(::dtproto::geometry_msgs::Point3d* angularmomentumbodywrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularmomentumbodywrtworld_);
  }
  if (angularmomentumbodywrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angularmomentumbodywrtworld));
    if (message_arena != submessage_arena) {
      angularmomentumbodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularmomentumbodywrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angularmomentumbodywrtworld_ = angularmomentumbodywrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.angularMomentumBodyWrtWorld)
}

// repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
inline int ControlState::_internal_posworld2footwrtworld_size() const {
  return _impl_.posworld2footwrtworld_.size();
}
inline int ControlState::posworld2footwrtworld_size() const {
  return _internal_posworld2footwrtworld_size();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posworld2footwrtworld(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.posWorld2FootWrtWorld)
  return _impl_.posworld2footwrtworld_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
ControlState::mutable_posworld2footwrtworld() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.ControlState.posWorld2FootWrtWorld)
  return &_impl_.posworld2footwrtworld_;
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posworld2footwrtworld(int index) const {
  return _impl_.posworld2footwrtworld_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::posworld2footwrtworld(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.posWorld2FootWrtWorld)
  return _internal_posworld2footwrtworld(index);
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_posworld2footwrtworld() {
  return _impl_.posworld2footwrtworld_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::add_posworld2footwrtworld() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_posworld2footwrtworld();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.ControlState.posWorld2FootWrtWorld)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
ControlState::posworld2footwrtworld() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.ControlState.posWorld2FootWrtWorld)
  return _impl_.posworld2footwrtworld_;
}

// repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
inline int ControlState::_internal_velworld2footwrtworld_size() const {
  return _impl_.velworld2footwrtworld_.size();
}
inline int ControlState::velworld2footwrtworld_size() const {
  return _internal_velworld2footwrtworld_size();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velworld2footwrtworld(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.velWorld2FootWrtWorld)
  return _impl_.velworld2footwrtworld_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
ControlState::mutable_velworld2footwrtworld() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.ControlState.velWorld2FootWrtWorld)
  return &_impl_.velworld2footwrtworld_;
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velworld2footwrtworld(int index) const {
  return _impl_.velworld2footwrtworld_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::velworld2footwrtworld(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.velWorld2FootWrtWorld)
  return _internal_velworld2footwrtworld(index);
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_velworld2footwrtworld() {
  return _impl_.velworld2footwrtworld_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::add_velworld2footwrtworld() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_velworld2footwrtworld();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.ControlState.velWorld2FootWrtWorld)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
ControlState::velworld2footwrtworld() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.ControlState.velWorld2FootWrtWorld)
  return _impl_.velworld2footwrtworld_;
}

// repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
inline int ControlState::_internal_posbody2footwrtworld_size() const {
  return _impl_.posbody2footwrtworld_.size();
}
inline int ControlState::posbody2footwrtworld_size() const {
  return _internal_posbody2footwrtworld_size();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posbody2footwrtworld(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.posBody2FootWrtWorld)
  return _impl_.posbody2footwrtworld_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
ControlState::mutable_posbody2footwrtworld() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.ControlState.posBody2FootWrtWorld)
  return &_impl_.posbody2footwrtworld_;
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posbody2footwrtworld(int index) const {
  return _impl_.posbody2footwrtworld_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::posbody2footwrtworld(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.posBody2FootWrtWorld)
  return _internal_posbody2footwrtworld(index);
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_posbody2footwrtworld() {
  return _impl_.posbody2footwrtworld_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::add_posbody2footwrtworld() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_posbody2footwrtworld();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.ControlState.posBody2FootWrtWorld)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
ControlState::posbody2footwrtworld() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.ControlState.posBody2FootWrtWorld)
  return _impl_.posbody2footwrtworld_;
}

// repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
inline int ControlState::_internal_velbody2footwrtworld_size() const {
  return _impl_.velbody2footwrtworld_.size();
}
inline int ControlState::velbody2footwrtworld_size() const {
  return _internal_velbody2footwrtworld_size();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velbody2footwrtworld(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.velBody2FootWrtWorld)
  return _impl_.velbody2footwrtworld_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
ControlState::mutable_velbody2footwrtworld() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.ControlState.velBody2FootWrtWorld)
  return &_impl_.velbody2footwrtworld_;
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velbody2footwrtworld(int index) const {
  return _impl_.velbody2footwrtworld_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::velbody2footwrtworld(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.velBody2FootWrtWorld)
  return _internal_velbody2footwrtworld(index);
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_velbody2footwrtworld() {
  return _impl_.velbody2footwrtworld_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::add_velbody2footwrtworld() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_velbody2footwrtworld();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.ControlState.velBody2FootWrtWorld)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
ControlState::velbody2footwrtworld() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.ControlState.velBody2FootWrtWorld)
  return _impl_.velbody2footwrtworld_;
}

// repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
inline int ControlState::_internal_posbody2footwrtbody_size() const {
  return _impl_.posbody2footwrtbody_.size();
}
inline int ControlState::posbody2footwrtbody_size() const {
  return _internal_posbody2footwrtbody_size();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_posbody2footwrtbody(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.posBody2FootWrtBody)
  return _impl_.posbody2footwrtbody_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
ControlState::mutable_posbody2footwrtbody() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.ControlState.posBody2FootWrtBody)
  return &_impl_.posbody2footwrtbody_;
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_posbody2footwrtbody(int index) const {
  return _impl_.posbody2footwrtbody_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::posbody2footwrtbody(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.posBody2FootWrtBody)
  return _internal_posbody2footwrtbody(index);
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_posbody2footwrtbody() {
  return _impl_.posbody2footwrtbody_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::add_posbody2footwrtbody() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_posbody2footwrtbody();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.ControlState.posBody2FootWrtBody)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
ControlState::posbody2footwrtbody() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.ControlState.posBody2FootWrtBody)
  return _impl_.posbody2footwrtbody_;
}

// repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
inline int ControlState::_internal_velbody2footwrtbody_size() const {
  return _impl_.velbody2footwrtbody_.size();
}
inline int ControlState::velbody2footwrtbody_size() const {
  return _internal_velbody2footwrtbody_size();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::mutable_velbody2footwrtbody(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.velBody2FootWrtBody)
  return _impl_.velbody2footwrtbody_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
ControlState::mutable_velbody2footwrtbody() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.leoquad.ControlState.velBody2FootWrtBody)
  return &_impl_.velbody2footwrtbody_;
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::_internal_velbody2footwrtbody(int index) const {
  return _impl_.velbody2footwrtbody_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& ControlState::velbody2footwrtbody(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.velBody2FootWrtBody)
  return _internal_velbody2footwrtbody(index);
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::_internal_add_velbody2footwrtbody() {
  return _impl_.velbody2footwrtbody_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* ControlState::add_velbody2footwrtbody() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_velbody2footwrtbody();
  // @@protoc_insertion_point(field_add:dtproto.leoquad.ControlState.velBody2FootWrtBody)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
ControlState::velbody2footwrtbody() const {
  // @@protoc_insertion_point(field_list:dtproto.leoquad.ControlState.velBody2FootWrtBody)
  return _impl_.velbody2footwrtbody_;
}

// .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
inline bool ControlState::_internal_has_rotbodywrtworld() const {
  return this != internal_default_instance() && _impl_.rotbodywrtworld_ != nullptr;
}
inline bool ControlState::has_rotbodywrtworld() const {
  return _internal_has_rotbodywrtworld();
}
inline const ::dtproto::geometry_msgs::Matrix3d& ControlState::_internal_rotbodywrtworld() const {
  const ::dtproto::geometry_msgs::Matrix3d* p = _impl_.rotbodywrtworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Matrix3d&>(
      ::dtproto::geometry_msgs::_Matrix3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Matrix3d& ControlState::rotbodywrtworld() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.rotBodyWrtWorld)
  return _internal_rotbodywrtworld();
}
inline void ControlState::unsafe_arena_set_allocated_rotbodywrtworld(
    ::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotbodywrtworld_);
  }
  _impl_.rotbodywrtworld_ = rotbodywrtworld;
  if (rotbodywrtworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.rotBodyWrtWorld)
}
inline ::dtproto::geometry_msgs::Matrix3d* ControlState::release_rotbodywrtworld() {
  
  ::dtproto::geometry_msgs::Matrix3d* temp = _impl_.rotbodywrtworld_;
  _impl_.rotbodywrtworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Matrix3d* ControlState::unsafe_arena_release_rotbodywrtworld() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.rotBodyWrtWorld)
  
  ::dtproto::geometry_msgs::Matrix3d* temp = _impl_.rotbodywrtworld_;
  _impl_.rotbodywrtworld_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Matrix3d* ControlState::_internal_mutable_rotbodywrtworld() {
  
  if (_impl_.rotbodywrtworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Matrix3d>(GetArenaForAllocation());
    _impl_.rotbodywrtworld_ = p;
  }
  return _impl_.rotbodywrtworld_;
}
inline ::dtproto::geometry_msgs::Matrix3d* ControlState::mutable_rotbodywrtworld() {
  ::dtproto::geometry_msgs::Matrix3d* _msg = _internal_mutable_rotbodywrtworld();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.rotBodyWrtWorld)
  return _msg;
}
inline void ControlState::set_allocated_rotbodywrtworld(::dtproto::geometry_msgs::Matrix3d* rotbodywrtworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotbodywrtworld_);
  }
  if (rotbodywrtworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotbodywrtworld));
    if (message_arena != submessage_arena) {
      rotbodywrtworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotbodywrtworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotbodywrtworld_ = rotbodywrtworld;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.rotBodyWrtWorld)
}

// .dtproto.geometry_msgs.Vector4b contact = 16;
inline bool ControlState::_internal_has_contact() const {
  return this != internal_default_instance() && _impl_.contact_ != nullptr;
}
inline bool ControlState::has_contact() const {
  return _internal_has_contact();
}
inline const ::dtproto::geometry_msgs::Vector4b& ControlState::_internal_contact() const {
  const ::dtproto::geometry_msgs::Vector4b* p = _impl_.contact_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Vector4b&>(
      ::dtproto::geometry_msgs::_Vector4b_default_instance_);
}
inline const ::dtproto::geometry_msgs::Vector4b& ControlState::contact() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.ControlState.contact)
  return _internal_contact();
}
inline void ControlState::unsafe_arena_set_allocated_contact(
    ::dtproto::geometry_msgs::Vector4b* contact) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contact_);
  }
  _impl_.contact_ = contact;
  if (contact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.ControlState.contact)
}
inline ::dtproto::geometry_msgs::Vector4b* ControlState::release_contact() {
  
  ::dtproto::geometry_msgs::Vector4b* temp = _impl_.contact_;
  _impl_.contact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Vector4b* ControlState::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.ControlState.contact)
  
  ::dtproto::geometry_msgs::Vector4b* temp = _impl_.contact_;
  _impl_.contact_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Vector4b* ControlState::_internal_mutable_contact() {
  
  if (_impl_.contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Vector4b>(GetArenaForAllocation());
    _impl_.contact_ = p;
  }
  return _impl_.contact_;
}
inline ::dtproto::geometry_msgs::Vector4b* ControlState::mutable_contact() {
  ::dtproto::geometry_msgs::Vector4b* _msg = _internal_mutable_contact();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.ControlState.contact)
  return _msg;
}
inline void ControlState::set_allocated_contact(::dtproto::geometry_msgs::Vector4b* contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contact_);
  }
  if (contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact));
    if (message_arena != submessage_arena) {
      contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.ControlState.contact)
}

// -------------------------------------------------------------------

// LeoQuadState

// .dtproto.leoquad.JointData jointData = 1;
inline bool LeoQuadState::_internal_has_jointdata() const {
  return this != internal_default_instance() && _impl_.jointdata_ != nullptr;
}
inline bool LeoQuadState::has_jointdata() const {
  return _internal_has_jointdata();
}
inline void LeoQuadState::clear_jointdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.jointdata_ != nullptr) {
    delete _impl_.jointdata_;
  }
  _impl_.jointdata_ = nullptr;
}
inline const ::dtproto::leoquad::JointData& LeoQuadState::_internal_jointdata() const {
  const ::dtproto::leoquad::JointData* p = _impl_.jointdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::leoquad::JointData&>(
      ::dtproto::leoquad::_JointData_default_instance_);
}
inline const ::dtproto::leoquad::JointData& LeoQuadState::jointdata() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.jointData)
  return _internal_jointdata();
}
inline void LeoQuadState::unsafe_arena_set_allocated_jointdata(
    ::dtproto::leoquad::JointData* jointdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointdata_);
  }
  _impl_.jointdata_ = jointdata;
  if (jointdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.jointData)
}
inline ::dtproto::leoquad::JointData* LeoQuadState::release_jointdata() {
  
  ::dtproto::leoquad::JointData* temp = _impl_.jointdata_;
  _impl_.jointdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::leoquad::JointData* LeoQuadState::unsafe_arena_release_jointdata() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.jointData)
  
  ::dtproto::leoquad::JointData* temp = _impl_.jointdata_;
  _impl_.jointdata_ = nullptr;
  return temp;
}
inline ::dtproto::leoquad::JointData* LeoQuadState::_internal_mutable_jointdata() {
  
  if (_impl_.jointdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::leoquad::JointData>(GetArenaForAllocation());
    _impl_.jointdata_ = p;
  }
  return _impl_.jointdata_;
}
inline ::dtproto::leoquad::JointData* LeoQuadState::mutable_jointdata() {
  ::dtproto::leoquad::JointData* _msg = _internal_mutable_jointdata();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.jointData)
  return _msg;
}
inline void LeoQuadState::set_allocated_jointdata(::dtproto::leoquad::JointData* jointdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.jointdata_;
  }
  if (jointdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(jointdata);
    if (message_arena != submessage_arena) {
      jointdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jointdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jointdata_ = jointdata;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.jointData)
}

// .dtproto.leoquad.TaskState taskStateDesired = 2;
inline bool LeoQuadState::_internal_has_taskstatedesired() const {
  return this != internal_default_instance() && _impl_.taskstatedesired_ != nullptr;
}
inline bool LeoQuadState::has_taskstatedesired() const {
  return _internal_has_taskstatedesired();
}
inline void LeoQuadState::clear_taskstatedesired() {
  if (GetArenaForAllocation() == nullptr && _impl_.taskstatedesired_ != nullptr) {
    delete _impl_.taskstatedesired_;
  }
  _impl_.taskstatedesired_ = nullptr;
}
inline const ::dtproto::leoquad::TaskState& LeoQuadState::_internal_taskstatedesired() const {
  const ::dtproto::leoquad::TaskState* p = _impl_.taskstatedesired_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::leoquad::TaskState&>(
      ::dtproto::leoquad::_TaskState_default_instance_);
}
inline const ::dtproto::leoquad::TaskState& LeoQuadState::taskstatedesired() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.taskStateDesired)
  return _internal_taskstatedesired();
}
inline void LeoQuadState::unsafe_arena_set_allocated_taskstatedesired(
    ::dtproto::leoquad::TaskState* taskstatedesired) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taskstatedesired_);
  }
  _impl_.taskstatedesired_ = taskstatedesired;
  if (taskstatedesired) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.taskStateDesired)
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::release_taskstatedesired() {
  
  ::dtproto::leoquad::TaskState* temp = _impl_.taskstatedesired_;
  _impl_.taskstatedesired_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::unsafe_arena_release_taskstatedesired() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.taskStateDesired)
  
  ::dtproto::leoquad::TaskState* temp = _impl_.taskstatedesired_;
  _impl_.taskstatedesired_ = nullptr;
  return temp;
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::_internal_mutable_taskstatedesired() {
  
  if (_impl_.taskstatedesired_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::leoquad::TaskState>(GetArenaForAllocation());
    _impl_.taskstatedesired_ = p;
  }
  return _impl_.taskstatedesired_;
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::mutable_taskstatedesired() {
  ::dtproto::leoquad::TaskState* _msg = _internal_mutable_taskstatedesired();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.taskStateDesired)
  return _msg;
}
inline void LeoQuadState::set_allocated_taskstatedesired(::dtproto::leoquad::TaskState* taskstatedesired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.taskstatedesired_;
  }
  if (taskstatedesired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(taskstatedesired);
    if (message_arena != submessage_arena) {
      taskstatedesired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskstatedesired, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.taskstatedesired_ = taskstatedesired;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.taskStateDesired)
}

// .dtproto.leoquad.TaskState taskStateActual = 3;
inline bool LeoQuadState::_internal_has_taskstateactual() const {
  return this != internal_default_instance() && _impl_.taskstateactual_ != nullptr;
}
inline bool LeoQuadState::has_taskstateactual() const {
  return _internal_has_taskstateactual();
}
inline void LeoQuadState::clear_taskstateactual() {
  if (GetArenaForAllocation() == nullptr && _impl_.taskstateactual_ != nullptr) {
    delete _impl_.taskstateactual_;
  }
  _impl_.taskstateactual_ = nullptr;
}
inline const ::dtproto::leoquad::TaskState& LeoQuadState::_internal_taskstateactual() const {
  const ::dtproto::leoquad::TaskState* p = _impl_.taskstateactual_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::leoquad::TaskState&>(
      ::dtproto::leoquad::_TaskState_default_instance_);
}
inline const ::dtproto::leoquad::TaskState& LeoQuadState::taskstateactual() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.taskStateActual)
  return _internal_taskstateactual();
}
inline void LeoQuadState::unsafe_arena_set_allocated_taskstateactual(
    ::dtproto::leoquad::TaskState* taskstateactual) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taskstateactual_);
  }
  _impl_.taskstateactual_ = taskstateactual;
  if (taskstateactual) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.taskStateActual)
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::release_taskstateactual() {
  
  ::dtproto::leoquad::TaskState* temp = _impl_.taskstateactual_;
  _impl_.taskstateactual_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::unsafe_arena_release_taskstateactual() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.taskStateActual)
  
  ::dtproto::leoquad::TaskState* temp = _impl_.taskstateactual_;
  _impl_.taskstateactual_ = nullptr;
  return temp;
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::_internal_mutable_taskstateactual() {
  
  if (_impl_.taskstateactual_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::leoquad::TaskState>(GetArenaForAllocation());
    _impl_.taskstateactual_ = p;
  }
  return _impl_.taskstateactual_;
}
inline ::dtproto::leoquad::TaskState* LeoQuadState::mutable_taskstateactual() {
  ::dtproto::leoquad::TaskState* _msg = _internal_mutable_taskstateactual();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.taskStateActual)
  return _msg;
}
inline void LeoQuadState::set_allocated_taskstateactual(::dtproto::leoquad::TaskState* taskstateactual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.taskstateactual_;
  }
  if (taskstateactual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(taskstateactual);
    if (message_arena != submessage_arena) {
      taskstateactual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskstateactual, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.taskstateactual_ = taskstateactual;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.taskStateActual)
}

// .dtproto.sensor_msgs.Imu imu = 4;
inline bool LeoQuadState::_internal_has_imu() const {
  return this != internal_default_instance() && _impl_.imu_ != nullptr;
}
inline bool LeoQuadState::has_imu() const {
  return _internal_has_imu();
}
inline const ::dtproto::sensor_msgs::Imu& LeoQuadState::_internal_imu() const {
  const ::dtproto::sensor_msgs::Imu* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::sensor_msgs::Imu&>(
      ::dtproto::sensor_msgs::_Imu_default_instance_);
}
inline const ::dtproto::sensor_msgs::Imu& LeoQuadState::imu() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.imu)
  return _internal_imu();
}
inline void LeoQuadState::unsafe_arena_set_allocated_imu(
    ::dtproto::sensor_msgs::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.imu)
}
inline ::dtproto::sensor_msgs::Imu* LeoQuadState::release_imu() {
  
  ::dtproto::sensor_msgs::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::sensor_msgs::Imu* LeoQuadState::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.imu)
  
  ::dtproto::sensor_msgs::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::dtproto::sensor_msgs::Imu* LeoQuadState::_internal_mutable_imu() {
  
  if (_impl_.imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::sensor_msgs::Imu>(GetArenaForAllocation());
    _impl_.imu_ = p;
  }
  return _impl_.imu_;
}
inline ::dtproto::sensor_msgs::Imu* LeoQuadState::mutable_imu() {
  ::dtproto::sensor_msgs::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.imu)
  return _msg;
}
inline void LeoQuadState::set_allocated_imu(::dtproto::sensor_msgs::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_);
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu));
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.imu)
}

// .dtproto.sensor_msgs.Joy joystick = 5;
inline bool LeoQuadState::_internal_has_joystick() const {
  return this != internal_default_instance() && _impl_.joystick_ != nullptr;
}
inline bool LeoQuadState::has_joystick() const {
  return _internal_has_joystick();
}
inline const ::dtproto::sensor_msgs::Joy& LeoQuadState::_internal_joystick() const {
  const ::dtproto::sensor_msgs::Joy* p = _impl_.joystick_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::sensor_msgs::Joy&>(
      ::dtproto::sensor_msgs::_Joy_default_instance_);
}
inline const ::dtproto::sensor_msgs::Joy& LeoQuadState::joystick() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.joystick)
  return _internal_joystick();
}
inline void LeoQuadState::unsafe_arena_set_allocated_joystick(
    ::dtproto::sensor_msgs::Joy* joystick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joystick_);
  }
  _impl_.joystick_ = joystick;
  if (joystick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.joystick)
}
inline ::dtproto::sensor_msgs::Joy* LeoQuadState::release_joystick() {
  
  ::dtproto::sensor_msgs::Joy* temp = _impl_.joystick_;
  _impl_.joystick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::sensor_msgs::Joy* LeoQuadState::unsafe_arena_release_joystick() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.joystick)
  
  ::dtproto::sensor_msgs::Joy* temp = _impl_.joystick_;
  _impl_.joystick_ = nullptr;
  return temp;
}
inline ::dtproto::sensor_msgs::Joy* LeoQuadState::_internal_mutable_joystick() {
  
  if (_impl_.joystick_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::sensor_msgs::Joy>(GetArenaForAllocation());
    _impl_.joystick_ = p;
  }
  return _impl_.joystick_;
}
inline ::dtproto::sensor_msgs::Joy* LeoQuadState::mutable_joystick() {
  ::dtproto::sensor_msgs::Joy* _msg = _internal_mutable_joystick();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.joystick)
  return _msg;
}
inline void LeoQuadState::set_allocated_joystick(::dtproto::sensor_msgs::Joy* joystick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joystick_);
  }
  if (joystick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joystick));
    if (message_arena != submessage_arena) {
      joystick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joystick, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joystick_ = joystick;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.joystick)
}

// .dtproto.leoquad.ControlState controlStateDesired = 7;
inline bool LeoQuadState::_internal_has_controlstatedesired() const {
  return this != internal_default_instance() && _impl_.controlstatedesired_ != nullptr;
}
inline bool LeoQuadState::has_controlstatedesired() const {
  return _internal_has_controlstatedesired();
}
inline void LeoQuadState::clear_controlstatedesired() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlstatedesired_ != nullptr) {
    delete _impl_.controlstatedesired_;
  }
  _impl_.controlstatedesired_ = nullptr;
}
inline const ::dtproto::leoquad::ControlState& LeoQuadState::_internal_controlstatedesired() const {
  const ::dtproto::leoquad::ControlState* p = _impl_.controlstatedesired_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::leoquad::ControlState&>(
      ::dtproto::leoquad::_ControlState_default_instance_);
}
inline const ::dtproto::leoquad::ControlState& LeoQuadState::controlstatedesired() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.controlStateDesired)
  return _internal_controlstatedesired();
}
inline void LeoQuadState::unsafe_arena_set_allocated_controlstatedesired(
    ::dtproto::leoquad::ControlState* controlstatedesired) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlstatedesired_);
  }
  _impl_.controlstatedesired_ = controlstatedesired;
  if (controlstatedesired) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.controlStateDesired)
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::release_controlstatedesired() {
  
  ::dtproto::leoquad::ControlState* temp = _impl_.controlstatedesired_;
  _impl_.controlstatedesired_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::unsafe_arena_release_controlstatedesired() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.controlStateDesired)
  
  ::dtproto::leoquad::ControlState* temp = _impl_.controlstatedesired_;
  _impl_.controlstatedesired_ = nullptr;
  return temp;
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::_internal_mutable_controlstatedesired() {
  
  if (_impl_.controlstatedesired_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::leoquad::ControlState>(GetArenaForAllocation());
    _impl_.controlstatedesired_ = p;
  }
  return _impl_.controlstatedesired_;
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::mutable_controlstatedesired() {
  ::dtproto::leoquad::ControlState* _msg = _internal_mutable_controlstatedesired();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.controlStateDesired)
  return _msg;
}
inline void LeoQuadState::set_allocated_controlstatedesired(::dtproto::leoquad::ControlState* controlstatedesired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.controlstatedesired_;
  }
  if (controlstatedesired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(controlstatedesired);
    if (message_arena != submessage_arena) {
      controlstatedesired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlstatedesired, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.controlstatedesired_ = controlstatedesired;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.controlStateDesired)
}

// .dtproto.leoquad.ControlState controlStateActual = 8;
inline bool LeoQuadState::_internal_has_controlstateactual() const {
  return this != internal_default_instance() && _impl_.controlstateactual_ != nullptr;
}
inline bool LeoQuadState::has_controlstateactual() const {
  return _internal_has_controlstateactual();
}
inline void LeoQuadState::clear_controlstateactual() {
  if (GetArenaForAllocation() == nullptr && _impl_.controlstateactual_ != nullptr) {
    delete _impl_.controlstateactual_;
  }
  _impl_.controlstateactual_ = nullptr;
}
inline const ::dtproto::leoquad::ControlState& LeoQuadState::_internal_controlstateactual() const {
  const ::dtproto::leoquad::ControlState* p = _impl_.controlstateactual_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::leoquad::ControlState&>(
      ::dtproto::leoquad::_ControlState_default_instance_);
}
inline const ::dtproto::leoquad::ControlState& LeoQuadState::controlstateactual() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadState.controlStateActual)
  return _internal_controlstateactual();
}
inline void LeoQuadState::unsafe_arena_set_allocated_controlstateactual(
    ::dtproto::leoquad::ControlState* controlstateactual) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controlstateactual_);
  }
  _impl_.controlstateactual_ = controlstateactual;
  if (controlstateactual) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadState.controlStateActual)
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::release_controlstateactual() {
  
  ::dtproto::leoquad::ControlState* temp = _impl_.controlstateactual_;
  _impl_.controlstateactual_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::unsafe_arena_release_controlstateactual() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadState.controlStateActual)
  
  ::dtproto::leoquad::ControlState* temp = _impl_.controlstateactual_;
  _impl_.controlstateactual_ = nullptr;
  return temp;
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::_internal_mutable_controlstateactual() {
  
  if (_impl_.controlstateactual_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::leoquad::ControlState>(GetArenaForAllocation());
    _impl_.controlstateactual_ = p;
  }
  return _impl_.controlstateactual_;
}
inline ::dtproto::leoquad::ControlState* LeoQuadState::mutable_controlstateactual() {
  ::dtproto::leoquad::ControlState* _msg = _internal_mutable_controlstateactual();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadState.controlStateActual)
  return _msg;
}
inline void LeoQuadState::set_allocated_controlstateactual(::dtproto::leoquad::ControlState* controlstateactual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.controlstateactual_;
  }
  if (controlstateactual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(controlstateactual);
    if (message_arena != submessage_arena) {
      controlstateactual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlstateactual, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.controlstateactual_ = controlstateactual;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadState.controlStateActual)
}

// -------------------------------------------------------------------

// LeoQuadStateTimeStamped

// .dtproto.std_msgs.Header header = 1;
inline bool LeoQuadStateTimeStamped::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool LeoQuadStateTimeStamped::has_header() const {
  return _internal_has_header();
}
inline const ::dtproto::std_msgs::Header& LeoQuadStateTimeStamped::_internal_header() const {
  const ::dtproto::std_msgs::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
      ::dtproto::std_msgs::_Header_default_instance_);
}
inline const ::dtproto::std_msgs::Header& LeoQuadStateTimeStamped::header() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadStateTimeStamped.header)
  return _internal_header();
}
inline void LeoQuadStateTimeStamped::unsafe_arena_set_allocated_header(
    ::dtproto::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadStateTimeStamped.header)
}
inline ::dtproto::std_msgs::Header* LeoQuadStateTimeStamped::release_header() {
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::Header* LeoQuadStateTimeStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadStateTimeStamped.header)
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::Header* LeoQuadStateTimeStamped::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::dtproto::std_msgs::Header* LeoQuadStateTimeStamped::mutable_header() {
  ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadStateTimeStamped.header)
  return _msg;
}
inline void LeoQuadStateTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadStateTimeStamped.header)
}

// .dtproto.leoquad.LeoQuadState state = 2;
inline bool LeoQuadStateTimeStamped::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool LeoQuadStateTimeStamped::has_state() const {
  return _internal_has_state();
}
inline void LeoQuadStateTimeStamped::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::dtproto::leoquad::LeoQuadState& LeoQuadStateTimeStamped::_internal_state() const {
  const ::dtproto::leoquad::LeoQuadState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::leoquad::LeoQuadState&>(
      ::dtproto::leoquad::_LeoQuadState_default_instance_);
}
inline const ::dtproto::leoquad::LeoQuadState& LeoQuadStateTimeStamped::state() const {
  // @@protoc_insertion_point(field_get:dtproto.leoquad.LeoQuadStateTimeStamped.state)
  return _internal_state();
}
inline void LeoQuadStateTimeStamped::unsafe_arena_set_allocated_state(
    ::dtproto::leoquad::LeoQuadState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.leoquad.LeoQuadStateTimeStamped.state)
}
inline ::dtproto::leoquad::LeoQuadState* LeoQuadStateTimeStamped::release_state() {
  
  ::dtproto::leoquad::LeoQuadState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::leoquad::LeoQuadState* LeoQuadStateTimeStamped::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:dtproto.leoquad.LeoQuadStateTimeStamped.state)
  
  ::dtproto::leoquad::LeoQuadState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::dtproto::leoquad::LeoQuadState* LeoQuadStateTimeStamped::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::leoquad::LeoQuadState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::dtproto::leoquad::LeoQuadState* LeoQuadStateTimeStamped::mutable_state() {
  ::dtproto::leoquad::LeoQuadState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:dtproto.leoquad.LeoQuadStateTimeStamped.state)
  return _msg;
}
inline void LeoQuadStateTimeStamped::set_allocated_state(::dtproto::leoquad::LeoQuadState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:dtproto.leoquad.LeoQuadStateTimeStamped.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace leoquad
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LeoQuad_2eproto
