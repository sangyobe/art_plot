// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Woly.proto

#include "Woly.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace woly {
PROTOBUF_CONSTEXPR TaskState::TaskState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.rot_)*/nullptr
  , /*decltype(_impl_.linvel_)*/nullptr
  , /*decltype(_impl_.angvel_)*/nullptr
  , /*decltype(_impl_.force_)*/nullptr
  , /*decltype(_impl_.moment_)*/nullptr
  , /*decltype(_impl_.wrench_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStateDefaultTypeInternal() {}
  union {
    TaskState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStateDefaultTypeInternal _TaskState_default_instance_;
PROTOBUF_CONSTEXPR JointState::JointState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusword_)*/0u
  , /*decltype(_impl_.controlword_)*/0u
  , /*decltype(_impl_.incpos_ofs_cnt_)*/0
  , /*decltype(_impl_.absposofs_cnt_)*/0
  , /*decltype(_impl_.incpos_cnt_)*/0
  , /*decltype(_impl_.abspos_cnt_)*/0
  , /*decltype(_impl_.incvel_cps_)*/0
  , /*decltype(_impl_.mcutemp_c_)*/0
  , /*decltype(_impl_.invtemp_c_)*/0
  , /*decltype(_impl_.inputvolt_v_)*/0
  , /*decltype(_impl_.actpos_rad_)*/0
  , /*decltype(_impl_.actaux_rad_)*/0
  , /*decltype(_impl_.actvel_rps_)*/0
  , /*decltype(_impl_.acttorq_nm_)*/0
  , /*decltype(_impl_.despos_rad_)*/0
  , /*decltype(_impl_.desvel_rps_)*/0
  , /*decltype(_impl_.desacc_rpss_)*/0
  , /*decltype(_impl_.destorq_nm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointStateDefaultTypeInternal() {}
  union {
    JointState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointStateDefaultTypeInternal _JointState_default_instance_;
PROTOBUF_CONSTEXPR JointData::JointData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.joints_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointDataDefaultTypeInternal() {}
  union {
    JointData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointDataDefaultTypeInternal _JointData_default_instance_;
PROTOBUF_CONSTEXPR ControlState::ControlState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posworld2footwrtworld_)*/{}
  , /*decltype(_impl_.velworld2footwrtworld_)*/{}
  , /*decltype(_impl_.posbody2footwrtworld_)*/{}
  , /*decltype(_impl_.velbody2footwrtworld_)*/{}
  , /*decltype(_impl_.posbody2footwrtbody_)*/{}
  , /*decltype(_impl_.velbody2footwrtbody_)*/{}
  , /*decltype(_impl_.posworld2comwrtworld_)*/nullptr
  , /*decltype(_impl_.velworld2comwrtworld_)*/nullptr
  , /*decltype(_impl_.posworld2bodywrtworld_)*/nullptr
  , /*decltype(_impl_.velworld2bodywrtworld_)*/nullptr
  , /*decltype(_impl_.euleranglebodywrtworld_)*/nullptr
  , /*decltype(_impl_.angularvelbodywrtworld_)*/nullptr
  , /*decltype(_impl_.angularvelbodywrtbody_)*/nullptr
  , /*decltype(_impl_.angularmomentumbodywrtworld_)*/nullptr
  , /*decltype(_impl_.rotbodywrtworld_)*/nullptr
  , /*decltype(_impl_.contact_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStateDefaultTypeInternal() {}
  union {
    ControlState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateDefaultTypeInternal _ControlState_default_instance_;
PROTOBUF_CONSTEXPR WolyState::WolyState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jointdata_)*/nullptr
  , /*decltype(_impl_.taskstatedesired_)*/nullptr
  , /*decltype(_impl_.taskstateactual_)*/nullptr
  , /*decltype(_impl_.imu_)*/nullptr
  , /*decltype(_impl_.joystick_)*/nullptr
  , /*decltype(_impl_.controlstatedesired_)*/nullptr
  , /*decltype(_impl_.controlstateactual_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WolyStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WolyStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WolyStateDefaultTypeInternal() {}
  union {
    WolyState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WolyStateDefaultTypeInternal _WolyState_default_instance_;
PROTOBUF_CONSTEXPR WolyStateTimeStamped::WolyStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WolyStateTimeStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WolyStateTimeStampedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WolyStateTimeStampedDefaultTypeInternal() {}
  union {
    WolyStateTimeStamped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WolyStateTimeStampedDefaultTypeInternal _WolyStateTimeStamped_default_instance_;
}  // namespace woly
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_Woly_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Woly_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Woly_2eproto = nullptr;

const uint32_t TableStruct_Woly_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.rot_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.linvel_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.angvel_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.moment_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.wrench_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::TaskState, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.statusword_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.controlword_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.incpos_ofs_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.absposofs_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.incpos_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.abspos_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.incvel_cps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.mcutemp_c_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.invtemp_c_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.inputvolt_v_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.actpos_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.actaux_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.actvel_rps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.acttorq_nm_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.despos_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.desvel_rps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.desacc_rpss_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointState, _impl_.destorq_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::JointData, _impl_.joints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.posworld2comwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.velworld2comwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.posworld2bodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.velworld2bodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.euleranglebodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.angularvelbodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.angularvelbodywrtbody_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.angularmomentumbodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.posworld2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.velworld2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.posbody2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.velbody2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.posbody2footwrtbody_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.velbody2footwrtbody_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.rotbodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::ControlState, _impl_.contact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.jointdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.taskstatedesired_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.taskstateactual_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.imu_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.joystick_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.controlstatedesired_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyState, _impl_.controlstateactual_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyStateTimeStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyStateTimeStamped, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::dtproto::woly::WolyStateTimeStamped, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::woly::TaskState)},
  { 14, -1, -1, sizeof(::dtproto::woly::JointState)},
  { 38, -1, -1, sizeof(::dtproto::woly::JointData)},
  { 45, -1, -1, sizeof(::dtproto::woly::ControlState)},
  { 67, -1, -1, sizeof(::dtproto::woly::WolyState)},
  { 80, -1, -1, sizeof(::dtproto::woly::WolyStateTimeStamped)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::woly::_TaskState_default_instance_._instance,
  &::dtproto::woly::_JointState_default_instance_._instance,
  &::dtproto::woly::_JointData_default_instance_._instance,
  &::dtproto::woly::_ControlState_default_instance_._instance,
  &::dtproto::woly::_WolyState_default_instance_._instance,
  &::dtproto::woly::_WolyStateTimeStamped_default_instance_._instance,
};

const char descriptor_table_protodef_Woly_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nWoly.proto\022\014dtproto.woly\032\035dtProto/std_"
  "msgs/Header.proto\032!dtProto/geometry_msgs"
  "/Point.proto\032\"dtProto/geometry_msgs/Wren"
  "ch.proto\032\'dtProto/geometry_msgs/Orientat"
  "ion.proto\032\"dtProto/geometry_msgs/Matrix."
  "proto\032\"dtProto/geometry_msgs/Vector.prot"
  "o\032\035dtProto/sensor_msgs/Imu.proto\032\035dtProt"
  "o/sensor_msgs/Joy.proto\"\340\002\n\tTaskState\022+\n"
  "\003pos\030\001 \001(\0132\036.dtproto.geometry_msgs.Point"
  "3d\022,\n\003rot\030\002 \001(\0132\037.dtproto.geometry_msgs."
  "Rotation\022.\n\006linVel\030\003 \001(\0132\036.dtproto.geome"
  "try_msgs.Point3d\022.\n\006angVel\030\004 \001(\0132\036.dtpro"
  "to.geometry_msgs.Point3d\022-\n\005force\030\005 \001(\0132"
  "\036.dtproto.geometry_msgs.Point3d\022.\n\006momen"
  "t\030\006 \001(\0132\036.dtproto.geometry_msgs.Point3d\022"
  "-\n\006wrench\030\007 \001(\0132\035.dtproto.geometry_msgs."
  "Wrench\022\n\n\002id\030\010 \001(\r\"\374\002\n\nJointState\022\022\n\nsta"
  "tusWord\030\001 \001(\r\022\023\n\013controlWord\030\002 \001(\r\022\026\n\016in"
  "cPos_ofs_cnt\030\003 \001(\005\022\025\n\rabsPosOfs_cnt\030\004 \001("
  "\005\022\022\n\nincPos_cnt\030\005 \001(\005\022\022\n\nabsPos_cnt\030\006 \001("
  "\005\022\022\n\nincVel_cps\030\007 \001(\005\022\021\n\tmcuTemp_C\030\010 \001(\002"
  "\022\021\n\tinvTemp_C\030\t \001(\002\022\023\n\013inputVolt_V\030\n \001(\002"
  "\022\022\n\nactPos_rad\030\013 \001(\001\022\022\n\nactAux_rad\030\014 \001(\001"
  "\022\022\n\nactVel_rps\030\r \001(\001\022\022\n\nactTorq_Nm\030\016 \001(\001"
  "\022\022\n\ndesPos_rad\030\017 \001(\001\022\022\n\ndesVel_rps\030\020 \001(\001"
  "\022\023\n\013desAcc_rpss\030\021 \001(\001\022\022\n\ndesTorq_Nm\030\022 \001("
  "\001\"5\n\tJointData\022(\n\006joints\030\001 \003(\0132\030.dtproto"
  ".woly.JointState\"\346\007\n\014ControlState\022<\n\024pos"
  "World2ComWrtWorld\030\001 \001(\0132\036.dtproto.geomet"
  "ry_msgs.Point3d\022<\n\024velWorld2ComWrtWorld\030"
  "\002 \001(\0132\036.dtproto.geometry_msgs.Point3d\022=\n"
  "\025posWorld2BodyWrtWorld\030\003 \001(\0132\036.dtproto.g"
  "eometry_msgs.Point3d\022=\n\025velWorld2BodyWrt"
  "World\030\004 \001(\0132\036.dtproto.geometry_msgs.Poin"
  "t3d\022<\n\026eulerAngleBodyWrtWorld\030\005 \001(\0132\034.dt"
  "proto.geometry_msgs.Euler\022<\n\026angularVelB"
  "odyWrtWorld\030\006 \001(\0132\034.dtproto.geometry_msg"
  "s.Euler\022;\n\025angularVelBodyWrtBody\030\007 \001(\0132\034"
  ".dtproto.geometry_msgs.Euler\022C\n\033angularM"
  "omentumBodyWrtWorld\030\010 \001(\0132\036.dtproto.geom"
  "etry_msgs.Point3d\022=\n\025posWorld2FootWrtWor"
  "ld\030\t \003(\0132\036.dtproto.geometry_msgs.Point3d"
  "\022=\n\025velWorld2FootWrtWorld\030\n \003(\0132\036.dtprot"
  "o.geometry_msgs.Point3d\022<\n\024posBody2FootW"
  "rtWorld\030\013 \003(\0132\036.dtproto.geometry_msgs.Po"
  "int3d\022<\n\024velBody2FootWrtWorld\030\014 \003(\0132\036.dt"
  "proto.geometry_msgs.Point3d\022;\n\023posBody2F"
  "ootWrtBody\030\r \003(\0132\036.dtproto.geometry_msgs"
  ".Point3d\022;\n\023velBody2FootWrtBody\030\016 \003(\0132\036."
  "dtproto.geometry_msgs.Point3d\0228\n\017rotBody"
  "WrtWorld\030\017 \001(\0132\037.dtproto.geometry_msgs.M"
  "atrix3d\0220\n\007contact\030\020 \001(\0132\037.dtproto.geome"
  "try_msgs.Vector4b\"\340\002\n\tWolyState\022*\n\tjoint"
  "Data\030\001 \001(\0132\027.dtproto.woly.JointData\0221\n\020t"
  "askStateDesired\030\002 \001(\0132\027.dtproto.woly.Tas"
  "kState\0220\n\017taskStateActual\030\003 \001(\0132\027.dtprot"
  "o.woly.TaskState\022%\n\003imu\030\004 \001(\0132\030.dtproto."
  "sensor_msgs.Imu\022*\n\010joystick\030\005 \001(\0132\030.dtpr"
  "oto.sensor_msgs.Joy\0227\n\023controlStateDesir"
  "ed\030\007 \001(\0132\032.dtproto.woly.ControlState\0226\n\022"
  "controlStateActual\030\010 \001(\0132\032.dtproto.woly."
  "ControlState\"h\n\024WolyStateTimeStamped\022(\n\006"
  "header\030\001 \001(\0132\030.dtproto.std_msgs.Header\022&"
  "\n\005state\030\002 \001(\0132\027.dtproto.woly.WolyStateb\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Woly_2eproto_deps[8] = {
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fPoint_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fWrench_2eproto,
  &::descriptor_table_dtProto_2fsensor_5fmsgs_2fImu_2eproto,
  &::descriptor_table_dtProto_2fsensor_5fmsgs_2fJoy_2eproto,
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::_pbi::once_flag descriptor_table_Woly_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Woly_2eproto = {
    false, false, 2566, descriptor_table_protodef_Woly_2eproto,
    "Woly.proto",
    &descriptor_table_Woly_2eproto_once, descriptor_table_Woly_2eproto_deps, 8, 6,
    schemas, file_default_instances, TableStruct_Woly_2eproto::offsets,
    file_level_metadata_Woly_2eproto, file_level_enum_descriptors_Woly_2eproto,
    file_level_service_descriptors_Woly_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Woly_2eproto_getter() {
  return &descriptor_table_Woly_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Woly_2eproto(&descriptor_table_Woly_2eproto);
namespace dtproto {
namespace woly {

// ===================================================================

class TaskState::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point3d& pos(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Rotation& rot(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& linvel(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& angvel(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& force(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& moment(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Wrench& wrench(const TaskState* msg);
};

const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::pos(const TaskState* msg) {
  return *msg->_impl_.pos_;
}
const ::dtproto::geometry_msgs::Rotation&
TaskState::_Internal::rot(const TaskState* msg) {
  return *msg->_impl_.rot_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::linvel(const TaskState* msg) {
  return *msg->_impl_.linvel_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::angvel(const TaskState* msg) {
  return *msg->_impl_.angvel_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::force(const TaskState* msg) {
  return *msg->_impl_.force_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::moment(const TaskState* msg) {
  return *msg->_impl_.moment_;
}
const ::dtproto::geometry_msgs::Wrench&
TaskState::_Internal::wrench(const TaskState* msg) {
  return *msg->_impl_.wrench_;
}
void TaskState::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
void TaskState::clear_rot() {
  if (GetArenaForAllocation() == nullptr && _impl_.rot_ != nullptr) {
    delete _impl_.rot_;
  }
  _impl_.rot_ = nullptr;
}
void TaskState::clear_linvel() {
  if (GetArenaForAllocation() == nullptr && _impl_.linvel_ != nullptr) {
    delete _impl_.linvel_;
  }
  _impl_.linvel_ = nullptr;
}
void TaskState::clear_angvel() {
  if (GetArenaForAllocation() == nullptr && _impl_.angvel_ != nullptr) {
    delete _impl_.angvel_;
  }
  _impl_.angvel_ = nullptr;
}
void TaskState::clear_force() {
  if (GetArenaForAllocation() == nullptr && _impl_.force_ != nullptr) {
    delete _impl_.force_;
  }
  _impl_.force_ = nullptr;
}
void TaskState::clear_moment() {
  if (GetArenaForAllocation() == nullptr && _impl_.moment_ != nullptr) {
    delete _impl_.moment_;
  }
  _impl_.moment_ = nullptr;
}
void TaskState::clear_wrench() {
  if (GetArenaForAllocation() == nullptr && _impl_.wrench_ != nullptr) {
    delete _impl_.wrench_;
  }
  _impl_.wrench_ = nullptr;
}
TaskState::TaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.woly.TaskState)
}
TaskState::TaskState(const TaskState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.linvel_){nullptr}
    , decltype(_impl_.angvel_){nullptr}
    , decltype(_impl_.force_){nullptr}
    , decltype(_impl_.moment_){nullptr}
    , decltype(_impl_.wrench_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.pos_);
  }
  if (from._internal_has_rot()) {
    _this->_impl_.rot_ = new ::dtproto::geometry_msgs::Rotation(*from._impl_.rot_);
  }
  if (from._internal_has_linvel()) {
    _this->_impl_.linvel_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.linvel_);
  }
  if (from._internal_has_angvel()) {
    _this->_impl_.angvel_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.angvel_);
  }
  if (from._internal_has_force()) {
    _this->_impl_.force_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.force_);
  }
  if (from._internal_has_moment()) {
    _this->_impl_.moment_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.moment_);
  }
  if (from._internal_has_wrench()) {
    _this->_impl_.wrench_ = new ::dtproto::geometry_msgs::Wrench(*from._impl_.wrench_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:dtproto.woly.TaskState)
}

inline void TaskState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.linvel_){nullptr}
    , decltype(_impl_.angvel_){nullptr}
    , decltype(_impl_.force_){nullptr}
    , decltype(_impl_.moment_){nullptr}
    , decltype(_impl_.wrench_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskState::~TaskState() {
  // @@protoc_insertion_point(destructor:dtproto.woly.TaskState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.rot_;
  if (this != internal_default_instance()) delete _impl_.linvel_;
  if (this != internal_default_instance()) delete _impl_.angvel_;
  if (this != internal_default_instance()) delete _impl_.force_;
  if (this != internal_default_instance()) delete _impl_.moment_;
  if (this != internal_default_instance()) delete _impl_.wrench_;
}

void TaskState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.woly.TaskState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rot_ != nullptr) {
    delete _impl_.rot_;
  }
  _impl_.rot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.linvel_ != nullptr) {
    delete _impl_.linvel_;
  }
  _impl_.linvel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angvel_ != nullptr) {
    delete _impl_.angvel_;
  }
  _impl_.angvel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.force_ != nullptr) {
    delete _impl_.force_;
  }
  _impl_.force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.moment_ != nullptr) {
    delete _impl_.moment_;
  }
  _impl_.moment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wrench_ != nullptr) {
    delete _impl_.wrench_;
  }
  _impl_.wrench_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point3d pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Rotation rot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d linVel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linvel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d angVel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angvel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d force = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d moment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_moment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Wrench wrench = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrench(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.woly.TaskState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Rotation rot = 2;
  if (this->_internal_has_rot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rot(this),
        _Internal::rot(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  if (this->_internal_has_linvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linvel(this),
        _Internal::linvel(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  if (this->_internal_has_angvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::angvel(this),
        _Internal::angvel(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d force = 5;
  if (this->_internal_has_force()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::force(this),
        _Internal::force(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d moment = 6;
  if (this->_internal_has_moment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::moment(this),
        _Internal::moment(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Wrench wrench = 7;
  if (this->_internal_has_wrench()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::wrench(this),
        _Internal::wrench(this).GetCachedSize(), target, stream);
  }

  // uint32 id = 8;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.woly.TaskState)
  return target;
}

size_t TaskState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.woly.TaskState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .dtproto.geometry_msgs.Rotation rot = 2;
  if (this->_internal_has_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rot_);
  }

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  if (this->_internal_has_linvel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linvel_);
  }

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  if (this->_internal_has_angvel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angvel_);
  }

  // .dtproto.geometry_msgs.Point3d force = 5;
  if (this->_internal_has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.force_);
  }

  // .dtproto.geometry_msgs.Point3d moment = 6;
  if (this->_internal_has_moment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.moment_);
  }

  // .dtproto.geometry_msgs.Wrench wrench = 7;
  if (this->_internal_has_wrench()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wrench_);
  }

  // uint32 id = 8;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskState::GetClassData() const { return &_class_data_; }


void TaskState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskState*>(&to_msg);
  auto& from = static_cast<const TaskState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.woly.TaskState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_rot()) {
    _this->_internal_mutable_rot()->::dtproto::geometry_msgs::Rotation::MergeFrom(
        from._internal_rot());
  }
  if (from._internal_has_linvel()) {
    _this->_internal_mutable_linvel()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_linvel());
  }
  if (from._internal_has_angvel()) {
    _this->_internal_mutable_angvel()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_angvel());
  }
  if (from._internal_has_force()) {
    _this->_internal_mutable_force()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_force());
  }
  if (from._internal_has_moment()) {
    _this->_internal_mutable_moment()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_moment());
  }
  if (from._internal_has_wrench()) {
    _this->_internal_mutable_wrench()->::dtproto::geometry_msgs::Wrench::MergeFrom(
        from._internal_wrench());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskState::CopyFrom(const TaskState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.woly.TaskState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskState::IsInitialized() const {
  return true;
}

void TaskState::InternalSwap(TaskState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskState, _impl_.id_)
      + sizeof(TaskState::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TaskState, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Woly_2eproto_getter, &descriptor_table_Woly_2eproto_once,
      file_level_metadata_Woly_2eproto[0]);
}

// ===================================================================

class JointState::_Internal {
 public:
};

JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.woly.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JointState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusword_){}
    , decltype(_impl_.controlword_){}
    , decltype(_impl_.incpos_ofs_cnt_){}
    , decltype(_impl_.absposofs_cnt_){}
    , decltype(_impl_.incpos_cnt_){}
    , decltype(_impl_.abspos_cnt_){}
    , decltype(_impl_.incvel_cps_){}
    , decltype(_impl_.mcutemp_c_){}
    , decltype(_impl_.invtemp_c_){}
    , decltype(_impl_.inputvolt_v_){}
    , decltype(_impl_.actpos_rad_){}
    , decltype(_impl_.actaux_rad_){}
    , decltype(_impl_.actvel_rps_){}
    , decltype(_impl_.acttorq_nm_){}
    , decltype(_impl_.despos_rad_){}
    , decltype(_impl_.desvel_rps_){}
    , decltype(_impl_.desacc_rpss_){}
    , decltype(_impl_.destorq_nm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.statusword_, &from._impl_.statusword_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destorq_nm_) -
    reinterpret_cast<char*>(&_impl_.statusword_)) + sizeof(_impl_.destorq_nm_));
  // @@protoc_insertion_point(copy_constructor:dtproto.woly.JointState)
}

inline void JointState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statusword_){0u}
    , decltype(_impl_.controlword_){0u}
    , decltype(_impl_.incpos_ofs_cnt_){0}
    , decltype(_impl_.absposofs_cnt_){0}
    , decltype(_impl_.incpos_cnt_){0}
    , decltype(_impl_.abspos_cnt_){0}
    , decltype(_impl_.incvel_cps_){0}
    , decltype(_impl_.mcutemp_c_){0}
    , decltype(_impl_.invtemp_c_){0}
    , decltype(_impl_.inputvolt_v_){0}
    , decltype(_impl_.actpos_rad_){0}
    , decltype(_impl_.actaux_rad_){0}
    , decltype(_impl_.actvel_rps_){0}
    , decltype(_impl_.acttorq_nm_){0}
    , decltype(_impl_.despos_rad_){0}
    , decltype(_impl_.desvel_rps_){0}
    , decltype(_impl_.desacc_rpss_){0}
    , decltype(_impl_.destorq_nm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:dtproto.woly.JointState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JointState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.woly.JointState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destorq_nm_) -
      reinterpret_cast<char*>(&_impl_.statusword_)) + sizeof(_impl_.destorq_nm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 statusWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.statusword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 controlWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.controlword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incPos_ofs_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.incpos_ofs_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 absPosOfs_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.absposofs_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incPos_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.incpos_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 absPos_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.abspos_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incVel_cps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.incvel_cps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float mcuTemp_C = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.mcutemp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float invTemp_C = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.invtemp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float inputVolt_V = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.inputvolt_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double actPos_rad = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.actpos_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double actAux_rad = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.actaux_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double actVel_rps = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.actvel_rps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double actTorq_Nm = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.acttorq_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double desPos_rad = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.despos_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double desVel_rps = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.desvel_rps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double desAcc_rpss = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.desacc_rpss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double desTorq_Nm = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.destorq_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.woly.JointState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->_internal_statusword() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_statusword(), target);
  }

  // uint32 controlWord = 2;
  if (this->_internal_controlword() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_controlword(), target);
  }

  // int32 incPos_ofs_cnt = 3;
  if (this->_internal_incpos_ofs_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_incpos_ofs_cnt(), target);
  }

  // int32 absPosOfs_cnt = 4;
  if (this->_internal_absposofs_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_absposofs_cnt(), target);
  }

  // int32 incPos_cnt = 5;
  if (this->_internal_incpos_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_incpos_cnt(), target);
  }

  // int32 absPos_cnt = 6;
  if (this->_internal_abspos_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_abspos_cnt(), target);
  }

  // int32 incVel_cps = 7;
  if (this->_internal_incvel_cps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_incvel_cps(), target);
  }

  // float mcuTemp_C = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = this->_internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_mcutemp_c(), target);
  }

  // float invTemp_C = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = this->_internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_invtemp_c(), target);
  }

  // float inputVolt_V = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = this->_internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_inputvolt_v(), target);
  }

  // double actPos_rad = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actpos_rad = this->_internal_actpos_rad();
  uint64_t raw_actpos_rad;
  memcpy(&raw_actpos_rad, &tmp_actpos_rad, sizeof(tmp_actpos_rad));
  if (raw_actpos_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_actpos_rad(), target);
  }

  // double actAux_rad = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actaux_rad = this->_internal_actaux_rad();
  uint64_t raw_actaux_rad;
  memcpy(&raw_actaux_rad, &tmp_actaux_rad, sizeof(tmp_actaux_rad));
  if (raw_actaux_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_actaux_rad(), target);
  }

  // double actVel_rps = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actvel_rps = this->_internal_actvel_rps();
  uint64_t raw_actvel_rps;
  memcpy(&raw_actvel_rps, &tmp_actvel_rps, sizeof(tmp_actvel_rps));
  if (raw_actvel_rps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_actvel_rps(), target);
  }

  // double actTorq_Nm = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acttorq_nm = this->_internal_acttorq_nm();
  uint64_t raw_acttorq_nm;
  memcpy(&raw_acttorq_nm, &tmp_acttorq_nm, sizeof(tmp_acttorq_nm));
  if (raw_acttorq_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_acttorq_nm(), target);
  }

  // double desPos_rad = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_despos_rad = this->_internal_despos_rad();
  uint64_t raw_despos_rad;
  memcpy(&raw_despos_rad, &tmp_despos_rad, sizeof(tmp_despos_rad));
  if (raw_despos_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_despos_rad(), target);
  }

  // double desVel_rps = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_desvel_rps = this->_internal_desvel_rps();
  uint64_t raw_desvel_rps;
  memcpy(&raw_desvel_rps, &tmp_desvel_rps, sizeof(tmp_desvel_rps));
  if (raw_desvel_rps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_desvel_rps(), target);
  }

  // double desAcc_rpss = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_desacc_rpss = this->_internal_desacc_rpss();
  uint64_t raw_desacc_rpss;
  memcpy(&raw_desacc_rpss, &tmp_desacc_rpss, sizeof(tmp_desacc_rpss));
  if (raw_desacc_rpss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_desacc_rpss(), target);
  }

  // double desTorq_Nm = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_destorq_nm = this->_internal_destorq_nm();
  uint64_t raw_destorq_nm;
  memcpy(&raw_destorq_nm, &tmp_destorq_nm, sizeof(tmp_destorq_nm));
  if (raw_destorq_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_destorq_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.woly.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.woly.JointState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->_internal_statusword() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statusword());
  }

  // uint32 controlWord = 2;
  if (this->_internal_controlword() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_controlword());
  }

  // int32 incPos_ofs_cnt = 3;
  if (this->_internal_incpos_ofs_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incpos_ofs_cnt());
  }

  // int32 absPosOfs_cnt = 4;
  if (this->_internal_absposofs_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_absposofs_cnt());
  }

  // int32 incPos_cnt = 5;
  if (this->_internal_incpos_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incpos_cnt());
  }

  // int32 absPos_cnt = 6;
  if (this->_internal_abspos_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_abspos_cnt());
  }

  // int32 incVel_cps = 7;
  if (this->_internal_incvel_cps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incvel_cps());
  }

  // float mcuTemp_C = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = this->_internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    total_size += 1 + 4;
  }

  // float invTemp_C = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = this->_internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    total_size += 1 + 4;
  }

  // float inputVolt_V = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = this->_internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    total_size += 1 + 4;
  }

  // double actPos_rad = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actpos_rad = this->_internal_actpos_rad();
  uint64_t raw_actpos_rad;
  memcpy(&raw_actpos_rad, &tmp_actpos_rad, sizeof(tmp_actpos_rad));
  if (raw_actpos_rad != 0) {
    total_size += 1 + 8;
  }

  // double actAux_rad = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actaux_rad = this->_internal_actaux_rad();
  uint64_t raw_actaux_rad;
  memcpy(&raw_actaux_rad, &tmp_actaux_rad, sizeof(tmp_actaux_rad));
  if (raw_actaux_rad != 0) {
    total_size += 1 + 8;
  }

  // double actVel_rps = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actvel_rps = this->_internal_actvel_rps();
  uint64_t raw_actvel_rps;
  memcpy(&raw_actvel_rps, &tmp_actvel_rps, sizeof(tmp_actvel_rps));
  if (raw_actvel_rps != 0) {
    total_size += 1 + 8;
  }

  // double actTorq_Nm = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acttorq_nm = this->_internal_acttorq_nm();
  uint64_t raw_acttorq_nm;
  memcpy(&raw_acttorq_nm, &tmp_acttorq_nm, sizeof(tmp_acttorq_nm));
  if (raw_acttorq_nm != 0) {
    total_size += 1 + 8;
  }

  // double desPos_rad = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_despos_rad = this->_internal_despos_rad();
  uint64_t raw_despos_rad;
  memcpy(&raw_despos_rad, &tmp_despos_rad, sizeof(tmp_despos_rad));
  if (raw_despos_rad != 0) {
    total_size += 1 + 8;
  }

  // double desVel_rps = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_desvel_rps = this->_internal_desvel_rps();
  uint64_t raw_desvel_rps;
  memcpy(&raw_desvel_rps, &tmp_desvel_rps, sizeof(tmp_desvel_rps));
  if (raw_desvel_rps != 0) {
    total_size += 2 + 8;
  }

  // double desAcc_rpss = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_desacc_rpss = this->_internal_desacc_rpss();
  uint64_t raw_desacc_rpss;
  memcpy(&raw_desacc_rpss, &tmp_desacc_rpss, sizeof(tmp_desacc_rpss));
  if (raw_desacc_rpss != 0) {
    total_size += 2 + 8;
  }

  // double desTorq_Nm = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_destorq_nm = this->_internal_destorq_nm();
  uint64_t raw_destorq_nm;
  memcpy(&raw_destorq_nm, &tmp_destorq_nm, sizeof(tmp_destorq_nm));
  if (raw_destorq_nm != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointState::GetClassData() const { return &_class_data_; }


void JointState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JointState*>(&to_msg);
  auto& from = static_cast<const JointState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.woly.JointState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_statusword() != 0) {
    _this->_internal_set_statusword(from._internal_statusword());
  }
  if (from._internal_controlword() != 0) {
    _this->_internal_set_controlword(from._internal_controlword());
  }
  if (from._internal_incpos_ofs_cnt() != 0) {
    _this->_internal_set_incpos_ofs_cnt(from._internal_incpos_ofs_cnt());
  }
  if (from._internal_absposofs_cnt() != 0) {
    _this->_internal_set_absposofs_cnt(from._internal_absposofs_cnt());
  }
  if (from._internal_incpos_cnt() != 0) {
    _this->_internal_set_incpos_cnt(from._internal_incpos_cnt());
  }
  if (from._internal_abspos_cnt() != 0) {
    _this->_internal_set_abspos_cnt(from._internal_abspos_cnt());
  }
  if (from._internal_incvel_cps() != 0) {
    _this->_internal_set_incvel_cps(from._internal_incvel_cps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = from._internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    _this->_internal_set_mcutemp_c(from._internal_mcutemp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = from._internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    _this->_internal_set_invtemp_c(from._internal_invtemp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = from._internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    _this->_internal_set_inputvolt_v(from._internal_inputvolt_v());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actpos_rad = from._internal_actpos_rad();
  uint64_t raw_actpos_rad;
  memcpy(&raw_actpos_rad, &tmp_actpos_rad, sizeof(tmp_actpos_rad));
  if (raw_actpos_rad != 0) {
    _this->_internal_set_actpos_rad(from._internal_actpos_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actaux_rad = from._internal_actaux_rad();
  uint64_t raw_actaux_rad;
  memcpy(&raw_actaux_rad, &tmp_actaux_rad, sizeof(tmp_actaux_rad));
  if (raw_actaux_rad != 0) {
    _this->_internal_set_actaux_rad(from._internal_actaux_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_actvel_rps = from._internal_actvel_rps();
  uint64_t raw_actvel_rps;
  memcpy(&raw_actvel_rps, &tmp_actvel_rps, sizeof(tmp_actvel_rps));
  if (raw_actvel_rps != 0) {
    _this->_internal_set_actvel_rps(from._internal_actvel_rps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acttorq_nm = from._internal_acttorq_nm();
  uint64_t raw_acttorq_nm;
  memcpy(&raw_acttorq_nm, &tmp_acttorq_nm, sizeof(tmp_acttorq_nm));
  if (raw_acttorq_nm != 0) {
    _this->_internal_set_acttorq_nm(from._internal_acttorq_nm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_despos_rad = from._internal_despos_rad();
  uint64_t raw_despos_rad;
  memcpy(&raw_despos_rad, &tmp_despos_rad, sizeof(tmp_despos_rad));
  if (raw_despos_rad != 0) {
    _this->_internal_set_despos_rad(from._internal_despos_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_desvel_rps = from._internal_desvel_rps();
  uint64_t raw_desvel_rps;
  memcpy(&raw_desvel_rps, &tmp_desvel_rps, sizeof(tmp_desvel_rps));
  if (raw_desvel_rps != 0) {
    _this->_internal_set_desvel_rps(from._internal_desvel_rps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_desacc_rpss = from._internal_desacc_rpss();
  uint64_t raw_desacc_rpss;
  memcpy(&raw_desacc_rpss, &tmp_desacc_rpss, sizeof(tmp_desacc_rpss));
  if (raw_desacc_rpss != 0) {
    _this->_internal_set_desacc_rpss(from._internal_desacc_rpss());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_destorq_nm = from._internal_destorq_nm();
  uint64_t raw_destorq_nm;
  memcpy(&raw_destorq_nm, &tmp_destorq_nm, sizeof(tmp_destorq_nm));
  if (raw_destorq_nm != 0) {
    _this->_internal_set_destorq_nm(from._internal_destorq_nm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.woly.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointState, _impl_.destorq_nm_)
      + sizeof(JointState::_impl_.destorq_nm_)
      - PROTOBUF_FIELD_OFFSET(JointState, _impl_.statusword_)>(
          reinterpret_cast<char*>(&_impl_.statusword_),
          reinterpret_cast<char*>(&other->_impl_.statusword_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Woly_2eproto_getter, &descriptor_table_Woly_2eproto_once,
      file_level_metadata_Woly_2eproto[1]);
}

// ===================================================================

class JointData::_Internal {
 public:
};

JointData::JointData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.woly.JointData)
}
JointData::JointData(const JointData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JointData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joints_){from._impl_.joints_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.woly.JointData)
}

inline void JointData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.joints_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JointData::~JointData() {
  // @@protoc_insertion_point(destructor:dtproto.woly.JointData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.joints_.~RepeatedPtrField();
}

void JointData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JointData::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.woly.JointData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.joints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dtproto.woly.JointState joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.woly.JointData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dtproto.woly.JointState joints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_joints_size()); i < n; i++) {
    const auto& repfield = this->_internal_joints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.woly.JointData)
  return target;
}

size_t JointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.woly.JointData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.woly.JointState joints = 1;
  total_size += 1UL * this->_internal_joints_size();
  for (const auto& msg : this->_impl_.joints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointData::GetClassData() const { return &_class_data_; }


void JointData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JointData*>(&to_msg);
  auto& from = static_cast<const JointData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.woly.JointData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.joints_.MergeFrom(from._impl_.joints_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointData::CopyFrom(const JointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.woly.JointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  return true;
}

void JointData::InternalSwap(JointData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.joints_.InternalSwap(&other->_impl_.joints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Woly_2eproto_getter, &descriptor_table_Woly_2eproto_once,
      file_level_metadata_Woly_2eproto[2]);
}

// ===================================================================

class ControlState::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point3d& posworld2comwrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& velworld2comwrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& posworld2bodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& velworld2bodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Euler& euleranglebodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Euler& angularvelbodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Euler& angularvelbodywrtbody(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& angularmomentumbodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Matrix3d& rotbodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Vector4b& contact(const ControlState* msg);
};

const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posworld2comwrtworld(const ControlState* msg) {
  return *msg->_impl_.posworld2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velworld2comwrtworld(const ControlState* msg) {
  return *msg->_impl_.velworld2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posworld2bodywrtworld(const ControlState* msg) {
  return *msg->_impl_.posworld2bodywrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velworld2bodywrtworld(const ControlState* msg) {
  return *msg->_impl_.velworld2bodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::euleranglebodywrtworld(const ControlState* msg) {
  return *msg->_impl_.euleranglebodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::angularvelbodywrtworld(const ControlState* msg) {
  return *msg->_impl_.angularvelbodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::angularvelbodywrtbody(const ControlState* msg) {
  return *msg->_impl_.angularvelbodywrtbody_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::angularmomentumbodywrtworld(const ControlState* msg) {
  return *msg->_impl_.angularmomentumbodywrtworld_;
}
const ::dtproto::geometry_msgs::Matrix3d&
ControlState::_Internal::rotbodywrtworld(const ControlState* msg) {
  return *msg->_impl_.rotbodywrtworld_;
}
const ::dtproto::geometry_msgs::Vector4b&
ControlState::_Internal::contact(const ControlState* msg) {
  return *msg->_impl_.contact_;
}
void ControlState::clear_posworld2comwrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2comwrtworld_ != nullptr) {
    delete _impl_.posworld2comwrtworld_;
  }
  _impl_.posworld2comwrtworld_ = nullptr;
}
void ControlState::clear_velworld2comwrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2comwrtworld_ != nullptr) {
    delete _impl_.velworld2comwrtworld_;
  }
  _impl_.velworld2comwrtworld_ = nullptr;
}
void ControlState::clear_posworld2bodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2bodywrtworld_ != nullptr) {
    delete _impl_.posworld2bodywrtworld_;
  }
  _impl_.posworld2bodywrtworld_ = nullptr;
}
void ControlState::clear_velworld2bodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2bodywrtworld_ != nullptr) {
    delete _impl_.velworld2bodywrtworld_;
  }
  _impl_.velworld2bodywrtworld_ = nullptr;
}
void ControlState::clear_euleranglebodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.euleranglebodywrtworld_ != nullptr) {
    delete _impl_.euleranglebodywrtworld_;
  }
  _impl_.euleranglebodywrtworld_ = nullptr;
}
void ControlState::clear_angularvelbodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtworld_ != nullptr) {
    delete _impl_.angularvelbodywrtworld_;
  }
  _impl_.angularvelbodywrtworld_ = nullptr;
}
void ControlState::clear_angularvelbodywrtbody() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtbody_ != nullptr) {
    delete _impl_.angularvelbodywrtbody_;
  }
  _impl_.angularvelbodywrtbody_ = nullptr;
}
void ControlState::clear_angularmomentumbodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularmomentumbodywrtworld_ != nullptr) {
    delete _impl_.angularmomentumbodywrtworld_;
  }
  _impl_.angularmomentumbodywrtworld_ = nullptr;
}
void ControlState::clear_posworld2footwrtworld() {
  _impl_.posworld2footwrtworld_.Clear();
}
void ControlState::clear_velworld2footwrtworld() {
  _impl_.velworld2footwrtworld_.Clear();
}
void ControlState::clear_posbody2footwrtworld() {
  _impl_.posbody2footwrtworld_.Clear();
}
void ControlState::clear_velbody2footwrtworld() {
  _impl_.velbody2footwrtworld_.Clear();
}
void ControlState::clear_posbody2footwrtbody() {
  _impl_.posbody2footwrtbody_.Clear();
}
void ControlState::clear_velbody2footwrtbody() {
  _impl_.velbody2footwrtbody_.Clear();
}
void ControlState::clear_rotbodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotbodywrtworld_ != nullptr) {
    delete _impl_.rotbodywrtworld_;
  }
  _impl_.rotbodywrtworld_ = nullptr;
}
void ControlState::clear_contact() {
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
}
ControlState::ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.woly.ControlState)
}
ControlState::ControlState(const ControlState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posworld2footwrtworld_){from._impl_.posworld2footwrtworld_}
    , decltype(_impl_.velworld2footwrtworld_){from._impl_.velworld2footwrtworld_}
    , decltype(_impl_.posbody2footwrtworld_){from._impl_.posbody2footwrtworld_}
    , decltype(_impl_.velbody2footwrtworld_){from._impl_.velbody2footwrtworld_}
    , decltype(_impl_.posbody2footwrtbody_){from._impl_.posbody2footwrtbody_}
    , decltype(_impl_.velbody2footwrtbody_){from._impl_.velbody2footwrtbody_}
    , decltype(_impl_.posworld2comwrtworld_){nullptr}
    , decltype(_impl_.velworld2comwrtworld_){nullptr}
    , decltype(_impl_.posworld2bodywrtworld_){nullptr}
    , decltype(_impl_.velworld2bodywrtworld_){nullptr}
    , decltype(_impl_.euleranglebodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtbody_){nullptr}
    , decltype(_impl_.angularmomentumbodywrtworld_){nullptr}
    , decltype(_impl_.rotbodywrtworld_){nullptr}
    , decltype(_impl_.contact_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posworld2comwrtworld()) {
    _this->_impl_.posworld2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posworld2comwrtworld_);
  }
  if (from._internal_has_velworld2comwrtworld()) {
    _this->_impl_.velworld2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velworld2comwrtworld_);
  }
  if (from._internal_has_posworld2bodywrtworld()) {
    _this->_impl_.posworld2bodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posworld2bodywrtworld_);
  }
  if (from._internal_has_velworld2bodywrtworld()) {
    _this->_impl_.velworld2bodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velworld2bodywrtworld_);
  }
  if (from._internal_has_euleranglebodywrtworld()) {
    _this->_impl_.euleranglebodywrtworld_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.euleranglebodywrtworld_);
  }
  if (from._internal_has_angularvelbodywrtworld()) {
    _this->_impl_.angularvelbodywrtworld_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.angularvelbodywrtworld_);
  }
  if (from._internal_has_angularvelbodywrtbody()) {
    _this->_impl_.angularvelbodywrtbody_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.angularvelbodywrtbody_);
  }
  if (from._internal_has_angularmomentumbodywrtworld()) {
    _this->_impl_.angularmomentumbodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.angularmomentumbodywrtworld_);
  }
  if (from._internal_has_rotbodywrtworld()) {
    _this->_impl_.rotbodywrtworld_ = new ::dtproto::geometry_msgs::Matrix3d(*from._impl_.rotbodywrtworld_);
  }
  if (from._internal_has_contact()) {
    _this->_impl_.contact_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.contact_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.woly.ControlState)
}

inline void ControlState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posworld2footwrtworld_){arena}
    , decltype(_impl_.velworld2footwrtworld_){arena}
    , decltype(_impl_.posbody2footwrtworld_){arena}
    , decltype(_impl_.velbody2footwrtworld_){arena}
    , decltype(_impl_.posbody2footwrtbody_){arena}
    , decltype(_impl_.velbody2footwrtbody_){arena}
    , decltype(_impl_.posworld2comwrtworld_){nullptr}
    , decltype(_impl_.velworld2comwrtworld_){nullptr}
    , decltype(_impl_.posworld2bodywrtworld_){nullptr}
    , decltype(_impl_.velworld2bodywrtworld_){nullptr}
    , decltype(_impl_.euleranglebodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtbody_){nullptr}
    , decltype(_impl_.angularmomentumbodywrtworld_){nullptr}
    , decltype(_impl_.rotbodywrtworld_){nullptr}
    , decltype(_impl_.contact_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlState::~ControlState() {
  // @@protoc_insertion_point(destructor:dtproto.woly.ControlState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.posworld2footwrtworld_.~RepeatedPtrField();
  _impl_.velworld2footwrtworld_.~RepeatedPtrField();
  _impl_.posbody2footwrtworld_.~RepeatedPtrField();
  _impl_.velbody2footwrtworld_.~RepeatedPtrField();
  _impl_.posbody2footwrtbody_.~RepeatedPtrField();
  _impl_.velbody2footwrtbody_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.posworld2comwrtworld_;
  if (this != internal_default_instance()) delete _impl_.velworld2comwrtworld_;
  if (this != internal_default_instance()) delete _impl_.posworld2bodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.velworld2bodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.euleranglebodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.angularvelbodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.angularvelbodywrtbody_;
  if (this != internal_default_instance()) delete _impl_.angularmomentumbodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.rotbodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.contact_;
}

void ControlState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.woly.ControlState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.posworld2footwrtworld_.Clear();
  _impl_.velworld2footwrtworld_.Clear();
  _impl_.posbody2footwrtworld_.Clear();
  _impl_.velbody2footwrtworld_.Clear();
  _impl_.posbody2footwrtbody_.Clear();
  _impl_.velbody2footwrtbody_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2comwrtworld_ != nullptr) {
    delete _impl_.posworld2comwrtworld_;
  }
  _impl_.posworld2comwrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2comwrtworld_ != nullptr) {
    delete _impl_.velworld2comwrtworld_;
  }
  _impl_.velworld2comwrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2bodywrtworld_ != nullptr) {
    delete _impl_.posworld2bodywrtworld_;
  }
  _impl_.posworld2bodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2bodywrtworld_ != nullptr) {
    delete _impl_.velworld2bodywrtworld_;
  }
  _impl_.velworld2bodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.euleranglebodywrtworld_ != nullptr) {
    delete _impl_.euleranglebodywrtworld_;
  }
  _impl_.euleranglebodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtworld_ != nullptr) {
    delete _impl_.angularvelbodywrtworld_;
  }
  _impl_.angularvelbodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtbody_ != nullptr) {
    delete _impl_.angularvelbodywrtbody_;
  }
  _impl_.angularvelbodywrtbody_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angularmomentumbodywrtworld_ != nullptr) {
    delete _impl_.angularmomentumbodywrtworld_;
  }
  _impl_.angularmomentumbodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotbodywrtworld_ != nullptr) {
    delete _impl_.rotbodywrtworld_;
  }
  _impl_.rotbodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_posworld2comwrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velworld2comwrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_posworld2bodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velworld2bodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_euleranglebodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularvelbodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularvelbodywrtbody(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularmomentumbodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posworld2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_velworld2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posbody2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_velbody2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posbody2footwrtbody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_velbody2footwrtbody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotbodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4b contact = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.woly.ControlState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
  if (this->_internal_has_posworld2comwrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::posworld2comwrtworld(this),
        _Internal::posworld2comwrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
  if (this->_internal_has_velworld2comwrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::velworld2comwrtworld(this),
        _Internal::velworld2comwrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
  if (this->_internal_has_posworld2bodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::posworld2bodywrtworld(this),
        _Internal::posworld2bodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
  if (this->_internal_has_velworld2bodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velworld2bodywrtworld(this),
        _Internal::velworld2bodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
  if (this->_internal_has_euleranglebodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::euleranglebodywrtworld(this),
        _Internal::euleranglebodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
  if (this->_internal_has_angularvelbodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::angularvelbodywrtworld(this),
        _Internal::angularvelbodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
  if (this->_internal_has_angularvelbodywrtbody()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::angularvelbodywrtbody(this),
        _Internal::angularvelbodywrtbody(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
  if (this->_internal_has_angularmomentumbodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::angularmomentumbodywrtworld(this),
        _Internal::angularmomentumbodywrtworld(this).GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posworld2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_posworld2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_velworld2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_velworld2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posbody2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_posbody2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_velbody2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_velbody2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posbody2footwrtbody_size()); i < n; i++) {
    const auto& repfield = this->_internal_posbody2footwrtbody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_velbody2footwrtbody_size()); i < n; i++) {
    const auto& repfield = this->_internal_velbody2footwrtbody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
  if (this->_internal_has_rotbodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::rotbodywrtworld(this),
        _Internal::rotbodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4b contact = 16;
  if (this->_internal_has_contact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::contact(this),
        _Internal::contact(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.woly.ControlState)
  return target;
}

size_t ControlState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.woly.ControlState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
  total_size += 1UL * this->_internal_posworld2footwrtworld_size();
  for (const auto& msg : this->_impl_.posworld2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
  total_size += 1UL * this->_internal_velworld2footwrtworld_size();
  for (const auto& msg : this->_impl_.velworld2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
  total_size += 1UL * this->_internal_posbody2footwrtworld_size();
  for (const auto& msg : this->_impl_.posbody2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
  total_size += 1UL * this->_internal_velbody2footwrtworld_size();
  for (const auto& msg : this->_impl_.velbody2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
  total_size += 1UL * this->_internal_posbody2footwrtbody_size();
  for (const auto& msg : this->_impl_.posbody2footwrtbody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
  total_size += 1UL * this->_internal_velbody2footwrtbody_size();
  for (const auto& msg : this->_impl_.velbody2footwrtbody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
  if (this->_internal_has_posworld2comwrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posworld2comwrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
  if (this->_internal_has_velworld2comwrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velworld2comwrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
  if (this->_internal_has_posworld2bodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posworld2bodywrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
  if (this->_internal_has_velworld2bodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velworld2bodywrtworld_);
  }

  // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
  if (this->_internal_has_euleranglebodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.euleranglebodywrtworld_);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
  if (this->_internal_has_angularvelbodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularvelbodywrtworld_);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
  if (this->_internal_has_angularvelbodywrtbody()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularvelbodywrtbody_);
  }

  // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
  if (this->_internal_has_angularmomentumbodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularmomentumbodywrtworld_);
  }

  // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 15;
  if (this->_internal_has_rotbodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotbodywrtworld_);
  }

  // .dtproto.geometry_msgs.Vector4b contact = 16;
  if (this->_internal_has_contact()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contact_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlState::GetClassData() const { return &_class_data_; }


void ControlState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlState*>(&to_msg);
  auto& from = static_cast<const ControlState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.woly.ControlState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.posworld2footwrtworld_.MergeFrom(from._impl_.posworld2footwrtworld_);
  _this->_impl_.velworld2footwrtworld_.MergeFrom(from._impl_.velworld2footwrtworld_);
  _this->_impl_.posbody2footwrtworld_.MergeFrom(from._impl_.posbody2footwrtworld_);
  _this->_impl_.velbody2footwrtworld_.MergeFrom(from._impl_.velbody2footwrtworld_);
  _this->_impl_.posbody2footwrtbody_.MergeFrom(from._impl_.posbody2footwrtbody_);
  _this->_impl_.velbody2footwrtbody_.MergeFrom(from._impl_.velbody2footwrtbody_);
  if (from._internal_has_posworld2comwrtworld()) {
    _this->_internal_mutable_posworld2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_posworld2comwrtworld());
  }
  if (from._internal_has_velworld2comwrtworld()) {
    _this->_internal_mutable_velworld2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_velworld2comwrtworld());
  }
  if (from._internal_has_posworld2bodywrtworld()) {
    _this->_internal_mutable_posworld2bodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_posworld2bodywrtworld());
  }
  if (from._internal_has_velworld2bodywrtworld()) {
    _this->_internal_mutable_velworld2bodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_velworld2bodywrtworld());
  }
  if (from._internal_has_euleranglebodywrtworld()) {
    _this->_internal_mutable_euleranglebodywrtworld()->::dtproto::geometry_msgs::Euler::MergeFrom(
        from._internal_euleranglebodywrtworld());
  }
  if (from._internal_has_angularvelbodywrtworld()) {
    _this->_internal_mutable_angularvelbodywrtworld()->::dtproto::geometry_msgs::Euler::MergeFrom(
        from._internal_angularvelbodywrtworld());
  }
  if (from._internal_has_angularvelbodywrtbody()) {
    _this->_internal_mutable_angularvelbodywrtbody()->::dtproto::geometry_msgs::Euler::MergeFrom(
        from._internal_angularvelbodywrtbody());
  }
  if (from._internal_has_angularmomentumbodywrtworld()) {
    _this->_internal_mutable_angularmomentumbodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_angularmomentumbodywrtworld());
  }
  if (from._internal_has_rotbodywrtworld()) {
    _this->_internal_mutable_rotbodywrtworld()->::dtproto::geometry_msgs::Matrix3d::MergeFrom(
        from._internal_rotbodywrtworld());
  }
  if (from._internal_has_contact()) {
    _this->_internal_mutable_contact()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
        from._internal_contact());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlState::CopyFrom(const ControlState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.woly.ControlState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlState::IsInitialized() const {
  return true;
}

void ControlState::InternalSwap(ControlState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.posworld2footwrtworld_.InternalSwap(&other->_impl_.posworld2footwrtworld_);
  _impl_.velworld2footwrtworld_.InternalSwap(&other->_impl_.velworld2footwrtworld_);
  _impl_.posbody2footwrtworld_.InternalSwap(&other->_impl_.posbody2footwrtworld_);
  _impl_.velbody2footwrtworld_.InternalSwap(&other->_impl_.velbody2footwrtworld_);
  _impl_.posbody2footwrtbody_.InternalSwap(&other->_impl_.posbody2footwrtbody_);
  _impl_.velbody2footwrtbody_.InternalSwap(&other->_impl_.velbody2footwrtbody_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlState, _impl_.contact_)
      + sizeof(ControlState::_impl_.contact_)
      - PROTOBUF_FIELD_OFFSET(ControlState, _impl_.posworld2comwrtworld_)>(
          reinterpret_cast<char*>(&_impl_.posworld2comwrtworld_),
          reinterpret_cast<char*>(&other->_impl_.posworld2comwrtworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Woly_2eproto_getter, &descriptor_table_Woly_2eproto_once,
      file_level_metadata_Woly_2eproto[3]);
}

// ===================================================================

class WolyState::_Internal {
 public:
  static const ::dtproto::woly::JointData& jointdata(const WolyState* msg);
  static const ::dtproto::woly::TaskState& taskstatedesired(const WolyState* msg);
  static const ::dtproto::woly::TaskState& taskstateactual(const WolyState* msg);
  static const ::dtproto::sensor_msgs::Imu& imu(const WolyState* msg);
  static const ::dtproto::sensor_msgs::Joy& joystick(const WolyState* msg);
  static const ::dtproto::woly::ControlState& controlstatedesired(const WolyState* msg);
  static const ::dtproto::woly::ControlState& controlstateactual(const WolyState* msg);
};

const ::dtproto::woly::JointData&
WolyState::_Internal::jointdata(const WolyState* msg) {
  return *msg->_impl_.jointdata_;
}
const ::dtproto::woly::TaskState&
WolyState::_Internal::taskstatedesired(const WolyState* msg) {
  return *msg->_impl_.taskstatedesired_;
}
const ::dtproto::woly::TaskState&
WolyState::_Internal::taskstateactual(const WolyState* msg) {
  return *msg->_impl_.taskstateactual_;
}
const ::dtproto::sensor_msgs::Imu&
WolyState::_Internal::imu(const WolyState* msg) {
  return *msg->_impl_.imu_;
}
const ::dtproto::sensor_msgs::Joy&
WolyState::_Internal::joystick(const WolyState* msg) {
  return *msg->_impl_.joystick_;
}
const ::dtproto::woly::ControlState&
WolyState::_Internal::controlstatedesired(const WolyState* msg) {
  return *msg->_impl_.controlstatedesired_;
}
const ::dtproto::woly::ControlState&
WolyState::_Internal::controlstateactual(const WolyState* msg) {
  return *msg->_impl_.controlstateactual_;
}
void WolyState::clear_imu() {
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
}
void WolyState::clear_joystick() {
  if (GetArenaForAllocation() == nullptr && _impl_.joystick_ != nullptr) {
    delete _impl_.joystick_;
  }
  _impl_.joystick_ = nullptr;
}
WolyState::WolyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.woly.WolyState)
}
WolyState::WolyState(const WolyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WolyState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jointdata_){nullptr}
    , decltype(_impl_.taskstatedesired_){nullptr}
    , decltype(_impl_.taskstateactual_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.joystick_){nullptr}
    , decltype(_impl_.controlstatedesired_){nullptr}
    , decltype(_impl_.controlstateactual_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_jointdata()) {
    _this->_impl_.jointdata_ = new ::dtproto::woly::JointData(*from._impl_.jointdata_);
  }
  if (from._internal_has_taskstatedesired()) {
    _this->_impl_.taskstatedesired_ = new ::dtproto::woly::TaskState(*from._impl_.taskstatedesired_);
  }
  if (from._internal_has_taskstateactual()) {
    _this->_impl_.taskstateactual_ = new ::dtproto::woly::TaskState(*from._impl_.taskstateactual_);
  }
  if (from._internal_has_imu()) {
    _this->_impl_.imu_ = new ::dtproto::sensor_msgs::Imu(*from._impl_.imu_);
  }
  if (from._internal_has_joystick()) {
    _this->_impl_.joystick_ = new ::dtproto::sensor_msgs::Joy(*from._impl_.joystick_);
  }
  if (from._internal_has_controlstatedesired()) {
    _this->_impl_.controlstatedesired_ = new ::dtproto::woly::ControlState(*from._impl_.controlstatedesired_);
  }
  if (from._internal_has_controlstateactual()) {
    _this->_impl_.controlstateactual_ = new ::dtproto::woly::ControlState(*from._impl_.controlstateactual_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.woly.WolyState)
}

inline void WolyState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jointdata_){nullptr}
    , decltype(_impl_.taskstatedesired_){nullptr}
    , decltype(_impl_.taskstateactual_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.joystick_){nullptr}
    , decltype(_impl_.controlstatedesired_){nullptr}
    , decltype(_impl_.controlstateactual_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WolyState::~WolyState() {
  // @@protoc_insertion_point(destructor:dtproto.woly.WolyState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WolyState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.jointdata_;
  if (this != internal_default_instance()) delete _impl_.taskstatedesired_;
  if (this != internal_default_instance()) delete _impl_.taskstateactual_;
  if (this != internal_default_instance()) delete _impl_.imu_;
  if (this != internal_default_instance()) delete _impl_.joystick_;
  if (this != internal_default_instance()) delete _impl_.controlstatedesired_;
  if (this != internal_default_instance()) delete _impl_.controlstateactual_;
}

void WolyState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WolyState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.woly.WolyState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.jointdata_ != nullptr) {
    delete _impl_.jointdata_;
  }
  _impl_.jointdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.taskstatedesired_ != nullptr) {
    delete _impl_.taskstatedesired_;
  }
  _impl_.taskstatedesired_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.taskstateactual_ != nullptr) {
    delete _impl_.taskstateactual_;
  }
  _impl_.taskstateactual_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joystick_ != nullptr) {
    delete _impl_.joystick_;
  }
  _impl_.joystick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.controlstatedesired_ != nullptr) {
    delete _impl_.controlstatedesired_;
  }
  _impl_.controlstatedesired_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.controlstateactual_ != nullptr) {
    delete _impl_.controlstateactual_;
  }
  _impl_.controlstateactual_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WolyState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.woly.JointData jointData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_jointdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.woly.TaskState taskStateDesired = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskstatedesired(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.woly.TaskState taskStateActual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskstateactual(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.sensor_msgs.Imu imu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.sensor_msgs.Joy joystick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_joystick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.woly.ControlState controlStateDesired = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlstatedesired(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.woly.ControlState controlStateActual = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlstateactual(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WolyState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.woly.WolyState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.woly.JointData jointData = 1;
  if (this->_internal_has_jointdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::jointdata(this),
        _Internal::jointdata(this).GetCachedSize(), target, stream);
  }

  // .dtproto.woly.TaskState taskStateDesired = 2;
  if (this->_internal_has_taskstatedesired()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::taskstatedesired(this),
        _Internal::taskstatedesired(this).GetCachedSize(), target, stream);
  }

  // .dtproto.woly.TaskState taskStateActual = 3;
  if (this->_internal_has_taskstateactual()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::taskstateactual(this),
        _Internal::taskstateactual(this).GetCachedSize(), target, stream);
  }

  // .dtproto.sensor_msgs.Imu imu = 4;
  if (this->_internal_has_imu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  // .dtproto.sensor_msgs.Joy joystick = 5;
  if (this->_internal_has_joystick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::joystick(this),
        _Internal::joystick(this).GetCachedSize(), target, stream);
  }

  // .dtproto.woly.ControlState controlStateDesired = 7;
  if (this->_internal_has_controlstatedesired()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::controlstatedesired(this),
        _Internal::controlstatedesired(this).GetCachedSize(), target, stream);
  }

  // .dtproto.woly.ControlState controlStateActual = 8;
  if (this->_internal_has_controlstateactual()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::controlstateactual(this),
        _Internal::controlstateactual(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.woly.WolyState)
  return target;
}

size_t WolyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.woly.WolyState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.woly.JointData jointData = 1;
  if (this->_internal_has_jointdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jointdata_);
  }

  // .dtproto.woly.TaskState taskStateDesired = 2;
  if (this->_internal_has_taskstatedesired()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.taskstatedesired_);
  }

  // .dtproto.woly.TaskState taskStateActual = 3;
  if (this->_internal_has_taskstateactual()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.taskstateactual_);
  }

  // .dtproto.sensor_msgs.Imu imu = 4;
  if (this->_internal_has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.imu_);
  }

  // .dtproto.sensor_msgs.Joy joystick = 5;
  if (this->_internal_has_joystick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joystick_);
  }

  // .dtproto.woly.ControlState controlStateDesired = 7;
  if (this->_internal_has_controlstatedesired()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlstatedesired_);
  }

  // .dtproto.woly.ControlState controlStateActual = 8;
  if (this->_internal_has_controlstateactual()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlstateactual_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WolyState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WolyState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WolyState::GetClassData() const { return &_class_data_; }


void WolyState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WolyState*>(&to_msg);
  auto& from = static_cast<const WolyState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.woly.WolyState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_jointdata()) {
    _this->_internal_mutable_jointdata()->::dtproto::woly::JointData::MergeFrom(
        from._internal_jointdata());
  }
  if (from._internal_has_taskstatedesired()) {
    _this->_internal_mutable_taskstatedesired()->::dtproto::woly::TaskState::MergeFrom(
        from._internal_taskstatedesired());
  }
  if (from._internal_has_taskstateactual()) {
    _this->_internal_mutable_taskstateactual()->::dtproto::woly::TaskState::MergeFrom(
        from._internal_taskstateactual());
  }
  if (from._internal_has_imu()) {
    _this->_internal_mutable_imu()->::dtproto::sensor_msgs::Imu::MergeFrom(
        from._internal_imu());
  }
  if (from._internal_has_joystick()) {
    _this->_internal_mutable_joystick()->::dtproto::sensor_msgs::Joy::MergeFrom(
        from._internal_joystick());
  }
  if (from._internal_has_controlstatedesired()) {
    _this->_internal_mutable_controlstatedesired()->::dtproto::woly::ControlState::MergeFrom(
        from._internal_controlstatedesired());
  }
  if (from._internal_has_controlstateactual()) {
    _this->_internal_mutable_controlstateactual()->::dtproto::woly::ControlState::MergeFrom(
        from._internal_controlstateactual());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WolyState::CopyFrom(const WolyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.woly.WolyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WolyState::IsInitialized() const {
  return true;
}

void WolyState::InternalSwap(WolyState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WolyState, _impl_.controlstateactual_)
      + sizeof(WolyState::_impl_.controlstateactual_)
      - PROTOBUF_FIELD_OFFSET(WolyState, _impl_.jointdata_)>(
          reinterpret_cast<char*>(&_impl_.jointdata_),
          reinterpret_cast<char*>(&other->_impl_.jointdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WolyState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Woly_2eproto_getter, &descriptor_table_Woly_2eproto_once,
      file_level_metadata_Woly_2eproto[4]);
}

// ===================================================================

class WolyStateTimeStamped::_Internal {
 public:
  static const ::dtproto::std_msgs::Header& header(const WolyStateTimeStamped* msg);
  static const ::dtproto::woly::WolyState& state(const WolyStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
WolyStateTimeStamped::_Internal::header(const WolyStateTimeStamped* msg) {
  return *msg->_impl_.header_;
}
const ::dtproto::woly::WolyState&
WolyStateTimeStamped::_Internal::state(const WolyStateTimeStamped* msg) {
  return *msg->_impl_.state_;
}
void WolyStateTimeStamped::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
WolyStateTimeStamped::WolyStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.woly.WolyStateTimeStamped)
}
WolyStateTimeStamped::WolyStateTimeStamped(const WolyStateTimeStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WolyStateTimeStamped* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::dtproto::woly::WolyState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.woly.WolyStateTimeStamped)
}

inline void WolyStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WolyStateTimeStamped::~WolyStateTimeStamped() {
  // @@protoc_insertion_point(destructor:dtproto.woly.WolyStateTimeStamped)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WolyStateTimeStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void WolyStateTimeStamped::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WolyStateTimeStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.woly.WolyStateTimeStamped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WolyStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.woly.WolyState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WolyStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.woly.WolyStateTimeStamped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .dtproto.woly.WolyState state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.woly.WolyStateTimeStamped)
  return target;
}

size_t WolyStateTimeStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.woly.WolyStateTimeStamped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .dtproto.woly.WolyState state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WolyStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WolyStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WolyStateTimeStamped::GetClassData() const { return &_class_data_; }


void WolyStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WolyStateTimeStamped*>(&to_msg);
  auto& from = static_cast<const WolyStateTimeStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.woly.WolyStateTimeStamped)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::dtproto::woly::WolyState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WolyStateTimeStamped::CopyFrom(const WolyStateTimeStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.woly.WolyStateTimeStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WolyStateTimeStamped::IsInitialized() const {
  return true;
}

void WolyStateTimeStamped::InternalSwap(WolyStateTimeStamped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WolyStateTimeStamped, _impl_.state_)
      + sizeof(WolyStateTimeStamped::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(WolyStateTimeStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WolyStateTimeStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Woly_2eproto_getter, &descriptor_table_Woly_2eproto_once,
      file_level_metadata_Woly_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace woly
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::woly::TaskState*
Arena::CreateMaybeMessage< ::dtproto::woly::TaskState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::woly::TaskState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::woly::JointState*
Arena::CreateMaybeMessage< ::dtproto::woly::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::woly::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::woly::JointData*
Arena::CreateMaybeMessage< ::dtproto::woly::JointData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::woly::JointData >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::woly::ControlState*
Arena::CreateMaybeMessage< ::dtproto::woly::ControlState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::woly::ControlState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::woly::WolyState*
Arena::CreateMaybeMessage< ::dtproto::woly::WolyState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::woly::WolyState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::woly::WolyStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::woly::WolyStateTimeStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::woly::WolyStateTimeStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
